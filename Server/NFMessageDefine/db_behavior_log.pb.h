// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_behavior_log.proto

#ifndef PROTOBUF_INCLUDED_db_5fbehavior_5flog_2eproto
#define PROTOBUF_INCLUDED_db_5fbehavior_5flog_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_db_5fbehavior_5flog_2eproto 

namespace protobuf_db_5fbehavior_5flog_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_db_5fbehavior_5flog_2eproto
namespace NFMsg {
class behavior_log_data;
class behavior_log_dataDefaultTypeInternal;
extern behavior_log_dataDefaultTypeInternal _behavior_log_data_default_instance_;
class db_behavior_log;
class db_behavior_logDefaultTypeInternal;
extern db_behavior_logDefaultTypeInternal _db_behavior_log_default_instance_;
}  // namespace NFMsg
namespace google {
namespace protobuf {
template<> ::NFMsg::behavior_log_data* Arena::CreateMaybeMessage<::NFMsg::behavior_log_data>(Arena*);
template<> ::NFMsg::db_behavior_log* Arena::CreateMaybeMessage<::NFMsg::db_behavior_log>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NFMsg {

// ===================================================================

class behavior_log_data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.behavior_log_data) */ {
 public:
  behavior_log_data();
  virtual ~behavior_log_data();

  behavior_log_data(const behavior_log_data& from);

  inline behavior_log_data& operator=(const behavior_log_data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  behavior_log_data(behavior_log_data&& from) noexcept
    : behavior_log_data() {
    *this = ::std::move(from);
  }

  inline behavior_log_data& operator=(behavior_log_data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const behavior_log_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const behavior_log_data* internal_default_instance() {
    return reinterpret_cast<const behavior_log_data*>(
               &_behavior_log_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(behavior_log_data* other);
  friend void swap(behavior_log_data& a, behavior_log_data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline behavior_log_data* New() const final {
    return CreateMaybeMessage<behavior_log_data>(NULL);
  }

  behavior_log_data* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<behavior_log_data>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const behavior_log_data& from);
  void MergeFrom(const behavior_log_data& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(behavior_log_data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nickname = 3;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string createdate = 4;
  bool has_createdate() const;
  void clear_createdate();
  static const int kCreatedateFieldNumber = 4;
  const ::std::string& createdate() const;
  void set_createdate(const ::std::string& value);
  #if LANG_CXX11
  void set_createdate(::std::string&& value);
  #endif
  void set_createdate(const char* value);
  void set_createdate(const char* value, size_t size);
  ::std::string* mutable_createdate();
  ::std::string* release_createdate();
  void set_allocated_createdate(::std::string* createdate);

  // optional string category = 5;
  bool has_category() const;
  void clear_category();
  static const int kCategoryFieldNumber = 5;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  #if LANG_CXX11
  void set_category(::std::string&& value);
  #endif
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);

  // optional string tag = 6;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 6;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // optional string msg = 8;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 8;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional uint64 userid = 2;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  ::google::protobuf::uint64 userid() const;
  void set_userid(::google::protobuf::uint64 value);

  // optional uint32 ID = 1;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 retcode = 7;
  bool has_retcode() const;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 7;
  ::google::protobuf::uint32 retcode() const;
  void set_retcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.behavior_log_data)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_userid();
  void clear_has_userid();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_createdate();
  void clear_has_createdate();
  void set_has_category();
  void clear_has_category();
  void set_has_tag();
  void clear_has_tag();
  void set_has_retcode();
  void clear_has_retcode();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr createdate_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 retcode_;
  friend struct ::protobuf_db_5fbehavior_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class db_behavior_log : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.db_behavior_log) */ {
 public:
  db_behavior_log();
  virtual ~db_behavior_log();

  db_behavior_log(const db_behavior_log& from);

  inline db_behavior_log& operator=(const db_behavior_log& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  db_behavior_log(db_behavior_log&& from) noexcept
    : db_behavior_log() {
    *this = ::std::move(from);
  }

  inline db_behavior_log& operator=(db_behavior_log&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_behavior_log& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_behavior_log* internal_default_instance() {
    return reinterpret_cast<const db_behavior_log*>(
               &_db_behavior_log_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(db_behavior_log* other);
  friend void swap(db_behavior_log& a, db_behavior_log& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline db_behavior_log* New() const final {
    return CreateMaybeMessage<db_behavior_log>(NULL);
  }

  db_behavior_log* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<db_behavior_log>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const db_behavior_log& from);
  void MergeFrom(const db_behavior_log& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_behavior_log* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string log_behavior = 1;
  bool has_log_behavior() const;
  void clear_log_behavior();
  static const int kLogBehaviorFieldNumber = 1;
  const ::std::string& log_behavior() const;
  void set_log_behavior(const ::std::string& value);
  #if LANG_CXX11
  void set_log_behavior(::std::string&& value);
  #endif
  void set_log_behavior(const char* value);
  void set_log_behavior(const char* value, size_t size);
  ::std::string* mutable_log_behavior();
  ::std::string* release_log_behavior();
  void set_allocated_log_behavior(::std::string* log_behavior);

  // optional .NFMsg.behavior_log_data db_fields = 2;
  bool has_db_fields() const;
  void clear_db_fields();
  static const int kDbFieldsFieldNumber = 2;
  private:
  const ::NFMsg::behavior_log_data& _internal_db_fields() const;
  public:
  const ::NFMsg::behavior_log_data& db_fields() const;
  ::NFMsg::behavior_log_data* release_db_fields();
  ::NFMsg::behavior_log_data* mutable_db_fields();
  void set_allocated_db_fields(::NFMsg::behavior_log_data* db_fields);

  // @@protoc_insertion_point(class_scope:NFMsg.db_behavior_log)
 private:
  void set_has_log_behavior();
  void clear_has_log_behavior();
  void set_has_db_fields();
  void clear_has_db_fields();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr log_behavior_;
  ::NFMsg::behavior_log_data* db_fields_;
  friend struct ::protobuf_db_5fbehavior_5flog_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// behavior_log_data

// optional uint32 ID = 1;
inline bool behavior_log_data::has_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void behavior_log_data::set_has_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void behavior_log_data::clear_has_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void behavior_log_data::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 behavior_log_data::id() const {
  // @@protoc_insertion_point(field_get:NFMsg.behavior_log_data.ID)
  return id_;
}
inline void behavior_log_data::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.behavior_log_data.ID)
}

// optional uint64 userid = 2;
inline bool behavior_log_data::has_userid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void behavior_log_data::set_has_userid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void behavior_log_data::clear_has_userid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void behavior_log_data::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 behavior_log_data::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.behavior_log_data.userid)
  return userid_;
}
inline void behavior_log_data::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.behavior_log_data.userid)
}

// optional string nickname = 3;
inline bool behavior_log_data::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void behavior_log_data::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void behavior_log_data::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void behavior_log_data::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& behavior_log_data::nickname() const {
  // @@protoc_insertion_point(field_get:NFMsg.behavior_log_data.nickname)
  return nickname_.GetNoArena();
}
inline void behavior_log_data::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.behavior_log_data.nickname)
}
#if LANG_CXX11
inline void behavior_log_data::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.behavior_log_data.nickname)
}
#endif
inline void behavior_log_data::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.behavior_log_data.nickname)
}
inline void behavior_log_data::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.behavior_log_data.nickname)
}
inline ::std::string* behavior_log_data::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:NFMsg.behavior_log_data.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* behavior_log_data::release_nickname() {
  // @@protoc_insertion_point(field_release:NFMsg.behavior_log_data.nickname)
  if (!has_nickname()) {
    return NULL;
  }
  clear_has_nickname();
  return nickname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void behavior_log_data::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.behavior_log_data.nickname)
}

// optional string createdate = 4;
inline bool behavior_log_data::has_createdate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void behavior_log_data::set_has_createdate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void behavior_log_data::clear_has_createdate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void behavior_log_data::clear_createdate() {
  createdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_createdate();
}
inline const ::std::string& behavior_log_data::createdate() const {
  // @@protoc_insertion_point(field_get:NFMsg.behavior_log_data.createdate)
  return createdate_.GetNoArena();
}
inline void behavior_log_data::set_createdate(const ::std::string& value) {
  set_has_createdate();
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.behavior_log_data.createdate)
}
#if LANG_CXX11
inline void behavior_log_data::set_createdate(::std::string&& value) {
  set_has_createdate();
  createdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.behavior_log_data.createdate)
}
#endif
inline void behavior_log_data::set_createdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_createdate();
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.behavior_log_data.createdate)
}
inline void behavior_log_data::set_createdate(const char* value, size_t size) {
  set_has_createdate();
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.behavior_log_data.createdate)
}
inline ::std::string* behavior_log_data::mutable_createdate() {
  set_has_createdate();
  // @@protoc_insertion_point(field_mutable:NFMsg.behavior_log_data.createdate)
  return createdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* behavior_log_data::release_createdate() {
  // @@protoc_insertion_point(field_release:NFMsg.behavior_log_data.createdate)
  if (!has_createdate()) {
    return NULL;
  }
  clear_has_createdate();
  return createdate_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void behavior_log_data::set_allocated_createdate(::std::string* createdate) {
  if (createdate != NULL) {
    set_has_createdate();
  } else {
    clear_has_createdate();
  }
  createdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createdate);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.behavior_log_data.createdate)
}

// optional string category = 5;
inline bool behavior_log_data::has_category() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void behavior_log_data::set_has_category() {
  _has_bits_[0] |= 0x00000004u;
}
inline void behavior_log_data::clear_has_category() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void behavior_log_data::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_category();
}
inline const ::std::string& behavior_log_data::category() const {
  // @@protoc_insertion_point(field_get:NFMsg.behavior_log_data.category)
  return category_.GetNoArena();
}
inline void behavior_log_data::set_category(const ::std::string& value) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.behavior_log_data.category)
}
#if LANG_CXX11
inline void behavior_log_data::set_category(::std::string&& value) {
  set_has_category();
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.behavior_log_data.category)
}
#endif
inline void behavior_log_data::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.behavior_log_data.category)
}
inline void behavior_log_data::set_category(const char* value, size_t size) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.behavior_log_data.category)
}
inline ::std::string* behavior_log_data::mutable_category() {
  set_has_category();
  // @@protoc_insertion_point(field_mutable:NFMsg.behavior_log_data.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* behavior_log_data::release_category() {
  // @@protoc_insertion_point(field_release:NFMsg.behavior_log_data.category)
  if (!has_category()) {
    return NULL;
  }
  clear_has_category();
  return category_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void behavior_log_data::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    set_has_category();
  } else {
    clear_has_category();
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.behavior_log_data.category)
}

// optional string tag = 6;
inline bool behavior_log_data::has_tag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void behavior_log_data::set_has_tag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void behavior_log_data::clear_has_tag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void behavior_log_data::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
inline const ::std::string& behavior_log_data::tag() const {
  // @@protoc_insertion_point(field_get:NFMsg.behavior_log_data.tag)
  return tag_.GetNoArena();
}
inline void behavior_log_data::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.behavior_log_data.tag)
}
#if LANG_CXX11
inline void behavior_log_data::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.behavior_log_data.tag)
}
#endif
inline void behavior_log_data::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.behavior_log_data.tag)
}
inline void behavior_log_data::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.behavior_log_data.tag)
}
inline ::std::string* behavior_log_data::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:NFMsg.behavior_log_data.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* behavior_log_data::release_tag() {
  // @@protoc_insertion_point(field_release:NFMsg.behavior_log_data.tag)
  if (!has_tag()) {
    return NULL;
  }
  clear_has_tag();
  return tag_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void behavior_log_data::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.behavior_log_data.tag)
}

// optional uint32 retcode = 7;
inline bool behavior_log_data::has_retcode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void behavior_log_data::set_has_retcode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void behavior_log_data::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void behavior_log_data::clear_retcode() {
  retcode_ = 0u;
  clear_has_retcode();
}
inline ::google::protobuf::uint32 behavior_log_data::retcode() const {
  // @@protoc_insertion_point(field_get:NFMsg.behavior_log_data.retcode)
  return retcode_;
}
inline void behavior_log_data::set_retcode(::google::protobuf::uint32 value) {
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.behavior_log_data.retcode)
}

// optional string msg = 8;
inline bool behavior_log_data::has_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void behavior_log_data::set_has_msg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void behavior_log_data::clear_has_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void behavior_log_data::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& behavior_log_data::msg() const {
  // @@protoc_insertion_point(field_get:NFMsg.behavior_log_data.msg)
  return msg_.GetNoArena();
}
inline void behavior_log_data::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.behavior_log_data.msg)
}
#if LANG_CXX11
inline void behavior_log_data::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.behavior_log_data.msg)
}
#endif
inline void behavior_log_data::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.behavior_log_data.msg)
}
inline void behavior_log_data::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.behavior_log_data.msg)
}
inline ::std::string* behavior_log_data::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:NFMsg.behavior_log_data.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* behavior_log_data::release_msg() {
  // @@protoc_insertion_point(field_release:NFMsg.behavior_log_data.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void behavior_log_data::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.behavior_log_data.msg)
}

// -------------------------------------------------------------------

// db_behavior_log

// optional string log_behavior = 1;
inline bool db_behavior_log::has_log_behavior() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_behavior_log::set_has_log_behavior() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_behavior_log::clear_has_log_behavior() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_behavior_log::clear_log_behavior() {
  log_behavior_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_log_behavior();
}
inline const ::std::string& db_behavior_log::log_behavior() const {
  // @@protoc_insertion_point(field_get:NFMsg.db_behavior_log.log_behavior)
  return log_behavior_.GetNoArena();
}
inline void db_behavior_log::set_log_behavior(const ::std::string& value) {
  set_has_log_behavior();
  log_behavior_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.db_behavior_log.log_behavior)
}
#if LANG_CXX11
inline void db_behavior_log::set_log_behavior(::std::string&& value) {
  set_has_log_behavior();
  log_behavior_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.db_behavior_log.log_behavior)
}
#endif
inline void db_behavior_log::set_log_behavior(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_log_behavior();
  log_behavior_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.db_behavior_log.log_behavior)
}
inline void db_behavior_log::set_log_behavior(const char* value, size_t size) {
  set_has_log_behavior();
  log_behavior_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.db_behavior_log.log_behavior)
}
inline ::std::string* db_behavior_log::mutable_log_behavior() {
  set_has_log_behavior();
  // @@protoc_insertion_point(field_mutable:NFMsg.db_behavior_log.log_behavior)
  return log_behavior_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_behavior_log::release_log_behavior() {
  // @@protoc_insertion_point(field_release:NFMsg.db_behavior_log.log_behavior)
  if (!has_log_behavior()) {
    return NULL;
  }
  clear_has_log_behavior();
  return log_behavior_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_behavior_log::set_allocated_log_behavior(::std::string* log_behavior) {
  if (log_behavior != NULL) {
    set_has_log_behavior();
  } else {
    clear_has_log_behavior();
  }
  log_behavior_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_behavior);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.db_behavior_log.log_behavior)
}

// optional .NFMsg.behavior_log_data db_fields = 2;
inline bool db_behavior_log::has_db_fields() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_behavior_log::set_has_db_fields() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_behavior_log::clear_has_db_fields() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_behavior_log::clear_db_fields() {
  if (db_fields_ != NULL) db_fields_->Clear();
  clear_has_db_fields();
}
inline const ::NFMsg::behavior_log_data& db_behavior_log::_internal_db_fields() const {
  return *db_fields_;
}
inline const ::NFMsg::behavior_log_data& db_behavior_log::db_fields() const {
  const ::NFMsg::behavior_log_data* p = db_fields_;
  // @@protoc_insertion_point(field_get:NFMsg.db_behavior_log.db_fields)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::behavior_log_data*>(
      &::NFMsg::_behavior_log_data_default_instance_);
}
inline ::NFMsg::behavior_log_data* db_behavior_log::release_db_fields() {
  // @@protoc_insertion_point(field_release:NFMsg.db_behavior_log.db_fields)
  clear_has_db_fields();
  ::NFMsg::behavior_log_data* temp = db_fields_;
  db_fields_ = NULL;
  return temp;
}
inline ::NFMsg::behavior_log_data* db_behavior_log::mutable_db_fields() {
  set_has_db_fields();
  if (db_fields_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::behavior_log_data>(GetArenaNoVirtual());
    db_fields_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.db_behavior_log.db_fields)
  return db_fields_;
}
inline void db_behavior_log::set_allocated_db_fields(::NFMsg::behavior_log_data* db_fields) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete db_fields_;
  }
  if (db_fields) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      db_fields = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, db_fields, submessage_arena);
    }
    set_has_db_fields();
  } else {
    clear_has_db_fields();
  }
  db_fields_ = db_fields;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.db_behavior_log.db_fields)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_db_5fbehavior_5flog_2eproto
