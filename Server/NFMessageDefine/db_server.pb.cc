// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_server.proto

#include "db_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_db_5fserver_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_db_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_db_server_detail;
}  // namespace protobuf_db_5fserver_2eproto
namespace protobuf_server_5fmsg_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_server_5fmsg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ServerInfoReport;
}  // namespace protobuf_server_5fmsg_2eproto
namespace NFMsg {
class db_query_serverDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_query_server>
      _instance;
} _db_query_server_default_instance_;
class db_server_detailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_server_detail>
      _instance;
} _db_server_detail_default_instance_;
class db_query_server_detailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_query_server_detail>
      _instance;
} _db_query_server_detail_default_instance_;
}  // namespace NFMsg
namespace protobuf_db_5fserver_2eproto {
static void InitDefaultsdb_query_server() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_db_query_server_default_instance_;
    new (ptr) ::NFMsg::db_query_server();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::db_query_server::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_db_query_server =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsdb_query_server}, {
      &protobuf_server_5fmsg_2eproto::scc_info_ServerInfoReport.base,}};

static void InitDefaultsdb_server_detail() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_db_server_detail_default_instance_;
    new (ptr) ::NFMsg::db_server_detail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::db_server_detail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_server_detail =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_server_detail}, {}};

static void InitDefaultsdb_query_server_detail() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_db_query_server_detail_default_instance_;
    new (ptr) ::NFMsg::db_query_server_detail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::db_query_server_detail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_db_query_server_detail =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsdb_query_server_detail}, {
      &protobuf_db_5fserver_2eproto::scc_info_db_server_detail.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_db_query_server.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_server_detail.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_query_server_detail.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::db_query_server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::db_query_server, dy_server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::db_query_server, db_fields_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::db_server_detail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::db_server_detail, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::db_server_detail, server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::db_server_detail, server_cur_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::db_server_detail, server_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::db_server_detail, total_mem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::db_server_detail, free_mem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::db_server_detail, used_mem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::db_server_detail, proc_cpu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::db_server_detail, proc_mem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::db_server_detail, proc_thread_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::db_query_server_detail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::db_query_server_detail, dy_server_detail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::db_query_server_detail, db_fields_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NFMsg::db_query_server)},
  { 7, -1, sizeof(::NFMsg::db_server_detail)},
  { 22, -1, sizeof(::NFMsg::db_query_server_detail)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_db_query_server_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_db_server_detail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_db_query_server_detail_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "db_server.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017db_server.proto\022\005NFMsg\032\020server_msg.pro"
      "to\"P\n\017db_query_server\022\021\n\tdy_server\030\001 \001(\t"
      "\022*\n\tdb_fields\030\002 \001(\0132\027.NFMsg.ServerInfoRe"
      "port\"\322\001\n\020db_server_detail\022\n\n\002id\030\001 \001(\005\022\021\n"
      "\tserver_id\030\002 \001(\005\022\031\n\021server_cur_online\030\003 "
      "\001(\005\022\024\n\014server_state\030\004 \001(\r\022\021\n\ttotal_mem\030\005"
      " \001(\004\022\020\n\010free_mem\030\006 \001(\004\022\020\n\010used_mem\030\007 \001(\004"
      "\022\020\n\010proc_cpu\030\010 \001(\001\022\020\n\010proc_mem\030\t \001(\004\022\023\n\013"
      "proc_thread\030\n \001(\r\"^\n\026db_query_server_det"
      "ail\022\030\n\020dy_server_detail\030\001 \001(\t\022*\n\tdb_fiel"
      "ds\030\002 \001(\0132\027.NFMsg.db_server_detailb\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 441);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "db_server.proto", &protobuf_RegisterTypes);
  ::protobuf_server_5fmsg_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_db_5fserver_2eproto
namespace NFMsg {

// ===================================================================

void db_query_server::InitAsDefaultInstance() {
  ::NFMsg::_db_query_server_default_instance_._instance.get_mutable()->db_fields_ = const_cast< ::NFMsg::ServerInfoReport*>(
      ::NFMsg::ServerInfoReport::internal_default_instance());
}
void db_query_server::clear_db_fields() {
  if (GetArenaNoVirtual() == NULL && db_fields_ != NULL) {
    delete db_fields_;
  }
  db_fields_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_query_server::kDyServerFieldNumber;
const int db_query_server::kDbFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_query_server::db_query_server()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_db_5fserver_2eproto::scc_info_db_query_server.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.db_query_server)
}
db_query_server::db_query_server(const db_query_server& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dy_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dy_server().size() > 0) {
    dy_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dy_server_);
  }
  if (from.has_db_fields()) {
    db_fields_ = new ::NFMsg::ServerInfoReport(*from.db_fields_);
  } else {
    db_fields_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.db_query_server)
}

void db_query_server::SharedCtor() {
  dy_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_fields_ = NULL;
}

db_query_server::~db_query_server() {
  // @@protoc_insertion_point(destructor:NFMsg.db_query_server)
  SharedDtor();
}

void db_query_server::SharedDtor() {
  dy_server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete db_fields_;
}

void db_query_server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* db_query_server::descriptor() {
  ::protobuf_db_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const db_query_server& db_query_server::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_db_5fserver_2eproto::scc_info_db_query_server.base);
  return *internal_default_instance();
}


void db_query_server::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.db_query_server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dy_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && db_fields_ != NULL) {
    delete db_fields_;
  }
  db_fields_ = NULL;
  _internal_metadata_.Clear();
}

bool db_query_server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.db_query_server)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string dy_server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dy_server()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dy_server().data(), static_cast<int>(this->dy_server().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.db_query_server.dy_server"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.ServerInfoReport db_fields = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_db_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.db_query_server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.db_query_server)
  return false;
#undef DO_
}

void db_query_server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.db_query_server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dy_server = 1;
  if (this->dy_server().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dy_server().data(), static_cast<int>(this->dy_server().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.db_query_server.dy_server");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dy_server(), output);
  }

  // .NFMsg.ServerInfoReport db_fields = 2;
  if (this->has_db_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_db_fields(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.db_query_server)
}

::google::protobuf::uint8* db_query_server::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.db_query_server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dy_server = 1;
  if (this->dy_server().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dy_server().data(), static_cast<int>(this->dy_server().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.db_query_server.dy_server");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dy_server(), target);
  }

  // .NFMsg.ServerInfoReport db_fields = 2;
  if (this->has_db_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_db_fields(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.db_query_server)
  return target;
}

size_t db_query_server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.db_query_server)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string dy_server = 1;
  if (this->dy_server().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dy_server());
  }

  // .NFMsg.ServerInfoReport db_fields = 2;
  if (this->has_db_fields()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *db_fields_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_query_server::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.db_query_server)
  GOOGLE_DCHECK_NE(&from, this);
  const db_query_server* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const db_query_server>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.db_query_server)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.db_query_server)
    MergeFrom(*source);
  }
}

void db_query_server::MergeFrom(const db_query_server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.db_query_server)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dy_server().size() > 0) {

    dy_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dy_server_);
  }
  if (from.has_db_fields()) {
    mutable_db_fields()->::NFMsg::ServerInfoReport::MergeFrom(from.db_fields());
  }
}

void db_query_server::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.db_query_server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_server::CopyFrom(const db_query_server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.db_query_server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_server::IsInitialized() const {
  return true;
}

void db_query_server::Swap(db_query_server* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_query_server::InternalSwap(db_query_server* other) {
  using std::swap;
  dy_server_.Swap(&other->dy_server_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(db_fields_, other->db_fields_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata db_query_server::GetMetadata() const {
  protobuf_db_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void db_server_detail::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_server_detail::kIdFieldNumber;
const int db_server_detail::kServerIdFieldNumber;
const int db_server_detail::kServerCurOnlineFieldNumber;
const int db_server_detail::kServerStateFieldNumber;
const int db_server_detail::kTotalMemFieldNumber;
const int db_server_detail::kFreeMemFieldNumber;
const int db_server_detail::kUsedMemFieldNumber;
const int db_server_detail::kProcCpuFieldNumber;
const int db_server_detail::kProcMemFieldNumber;
const int db_server_detail::kProcThreadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_server_detail::db_server_detail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_db_5fserver_2eproto::scc_info_db_server_detail.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.db_server_detail)
}
db_server_detail::db_server_detail(const db_server_detail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&proc_thread_) -
    reinterpret_cast<char*>(&id_)) + sizeof(proc_thread_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.db_server_detail)
}

void db_server_detail::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proc_thread_) -
      reinterpret_cast<char*>(&id_)) + sizeof(proc_thread_));
}

db_server_detail::~db_server_detail() {
  // @@protoc_insertion_point(destructor:NFMsg.db_server_detail)
  SharedDtor();
}

void db_server_detail::SharedDtor() {
}

void db_server_detail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* db_server_detail::descriptor() {
  ::protobuf_db_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const db_server_detail& db_server_detail::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_db_5fserver_2eproto::scc_info_db_server_detail.base);
  return *internal_default_instance();
}


void db_server_detail::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.db_server_detail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proc_thread_) -
      reinterpret_cast<char*>(&id_)) + sizeof(proc_thread_));
  _internal_metadata_.Clear();
}

bool db_server_detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.db_server_detail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_cur_online = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_cur_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 server_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_mem = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_mem_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 free_mem = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &free_mem_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 used_mem = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &used_mem_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double proc_cpu = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &proc_cpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 proc_mem = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proc_mem_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 proc_thread = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_thread_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.db_server_detail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.db_server_detail)
  return false;
#undef DO_
}

void db_server_detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.db_server_detail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 server_id = 2;
  if (this->server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_id(), output);
  }

  // int32 server_cur_online = 3;
  if (this->server_cur_online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->server_cur_online(), output);
  }

  // uint32 server_state = 4;
  if (this->server_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->server_state(), output);
  }

  // uint64 total_mem = 5;
  if (this->total_mem() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->total_mem(), output);
  }

  // uint64 free_mem = 6;
  if (this->free_mem() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->free_mem(), output);
  }

  // uint64 used_mem = 7;
  if (this->used_mem() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->used_mem(), output);
  }

  // double proc_cpu = 8;
  if (this->proc_cpu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->proc_cpu(), output);
  }

  // uint64 proc_mem = 9;
  if (this->proc_mem() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->proc_mem(), output);
  }

  // uint32 proc_thread = 10;
  if (this->proc_thread() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->proc_thread(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.db_server_detail)
}

::google::protobuf::uint8* db_server_detail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.db_server_detail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 server_id = 2;
  if (this->server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server_id(), target);
  }

  // int32 server_cur_online = 3;
  if (this->server_cur_online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->server_cur_online(), target);
  }

  // uint32 server_state = 4;
  if (this->server_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->server_state(), target);
  }

  // uint64 total_mem = 5;
  if (this->total_mem() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->total_mem(), target);
  }

  // uint64 free_mem = 6;
  if (this->free_mem() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->free_mem(), target);
  }

  // uint64 used_mem = 7;
  if (this->used_mem() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->used_mem(), target);
  }

  // double proc_cpu = 8;
  if (this->proc_cpu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->proc_cpu(), target);
  }

  // uint64 proc_mem = 9;
  if (this->proc_mem() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->proc_mem(), target);
  }

  // uint32 proc_thread = 10;
  if (this->proc_thread() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->proc_thread(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.db_server_detail)
  return target;
}

size_t db_server_detail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.db_server_detail)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 server_id = 2;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  // int32 server_cur_online = 3;
  if (this->server_cur_online() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_cur_online());
  }

  // uint32 server_state = 4;
  if (this->server_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_state());
  }

  // uint64 total_mem = 5;
  if (this->total_mem() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_mem());
  }

  // uint64 free_mem = 6;
  if (this->free_mem() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->free_mem());
  }

  // uint64 used_mem = 7;
  if (this->used_mem() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->used_mem());
  }

  // double proc_cpu = 8;
  if (this->proc_cpu() != 0) {
    total_size += 1 + 8;
  }

  // uint64 proc_mem = 9;
  if (this->proc_mem() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->proc_mem());
  }

  // uint32 proc_thread = 10;
  if (this->proc_thread() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->proc_thread());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_server_detail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.db_server_detail)
  GOOGLE_DCHECK_NE(&from, this);
  const db_server_detail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const db_server_detail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.db_server_detail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.db_server_detail)
    MergeFrom(*source);
  }
}

void db_server_detail::MergeFrom(const db_server_detail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.db_server_detail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
  if (from.server_cur_online() != 0) {
    set_server_cur_online(from.server_cur_online());
  }
  if (from.server_state() != 0) {
    set_server_state(from.server_state());
  }
  if (from.total_mem() != 0) {
    set_total_mem(from.total_mem());
  }
  if (from.free_mem() != 0) {
    set_free_mem(from.free_mem());
  }
  if (from.used_mem() != 0) {
    set_used_mem(from.used_mem());
  }
  if (from.proc_cpu() != 0) {
    set_proc_cpu(from.proc_cpu());
  }
  if (from.proc_mem() != 0) {
    set_proc_mem(from.proc_mem());
  }
  if (from.proc_thread() != 0) {
    set_proc_thread(from.proc_thread());
  }
}

void db_server_detail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.db_server_detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_server_detail::CopyFrom(const db_server_detail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.db_server_detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_server_detail::IsInitialized() const {
  return true;
}

void db_server_detail::Swap(db_server_detail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_server_detail::InternalSwap(db_server_detail* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(server_id_, other->server_id_);
  swap(server_cur_online_, other->server_cur_online_);
  swap(server_state_, other->server_state_);
  swap(total_mem_, other->total_mem_);
  swap(free_mem_, other->free_mem_);
  swap(used_mem_, other->used_mem_);
  swap(proc_cpu_, other->proc_cpu_);
  swap(proc_mem_, other->proc_mem_);
  swap(proc_thread_, other->proc_thread_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata db_server_detail::GetMetadata() const {
  protobuf_db_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void db_query_server_detail::InitAsDefaultInstance() {
  ::NFMsg::_db_query_server_detail_default_instance_._instance.get_mutable()->db_fields_ = const_cast< ::NFMsg::db_server_detail*>(
      ::NFMsg::db_server_detail::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_query_server_detail::kDyServerDetailFieldNumber;
const int db_query_server_detail::kDbFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_query_server_detail::db_query_server_detail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_db_5fserver_2eproto::scc_info_db_query_server_detail.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.db_query_server_detail)
}
db_query_server_detail::db_query_server_detail(const db_query_server_detail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dy_server_detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dy_server_detail().size() > 0) {
    dy_server_detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dy_server_detail_);
  }
  if (from.has_db_fields()) {
    db_fields_ = new ::NFMsg::db_server_detail(*from.db_fields_);
  } else {
    db_fields_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.db_query_server_detail)
}

void db_query_server_detail::SharedCtor() {
  dy_server_detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_fields_ = NULL;
}

db_query_server_detail::~db_query_server_detail() {
  // @@protoc_insertion_point(destructor:NFMsg.db_query_server_detail)
  SharedDtor();
}

void db_query_server_detail::SharedDtor() {
  dy_server_detail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete db_fields_;
}

void db_query_server_detail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* db_query_server_detail::descriptor() {
  ::protobuf_db_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const db_query_server_detail& db_query_server_detail::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_db_5fserver_2eproto::scc_info_db_query_server_detail.base);
  return *internal_default_instance();
}


void db_query_server_detail::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.db_query_server_detail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dy_server_detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && db_fields_ != NULL) {
    delete db_fields_;
  }
  db_fields_ = NULL;
  _internal_metadata_.Clear();
}

bool db_query_server_detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.db_query_server_detail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string dy_server_detail = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dy_server_detail()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dy_server_detail().data(), static_cast<int>(this->dy_server_detail().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.db_query_server_detail.dy_server_detail"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.db_server_detail db_fields = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_db_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.db_query_server_detail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.db_query_server_detail)
  return false;
#undef DO_
}

void db_query_server_detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.db_query_server_detail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dy_server_detail = 1;
  if (this->dy_server_detail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dy_server_detail().data(), static_cast<int>(this->dy_server_detail().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.db_query_server_detail.dy_server_detail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dy_server_detail(), output);
  }

  // .NFMsg.db_server_detail db_fields = 2;
  if (this->has_db_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_db_fields(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.db_query_server_detail)
}

::google::protobuf::uint8* db_query_server_detail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.db_query_server_detail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dy_server_detail = 1;
  if (this->dy_server_detail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dy_server_detail().data(), static_cast<int>(this->dy_server_detail().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.db_query_server_detail.dy_server_detail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dy_server_detail(), target);
  }

  // .NFMsg.db_server_detail db_fields = 2;
  if (this->has_db_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_db_fields(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.db_query_server_detail)
  return target;
}

size_t db_query_server_detail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.db_query_server_detail)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string dy_server_detail = 1;
  if (this->dy_server_detail().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dy_server_detail());
  }

  // .NFMsg.db_server_detail db_fields = 2;
  if (this->has_db_fields()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *db_fields_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_query_server_detail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.db_query_server_detail)
  GOOGLE_DCHECK_NE(&from, this);
  const db_query_server_detail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const db_query_server_detail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.db_query_server_detail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.db_query_server_detail)
    MergeFrom(*source);
  }
}

void db_query_server_detail::MergeFrom(const db_query_server_detail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.db_query_server_detail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dy_server_detail().size() > 0) {

    dy_server_detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dy_server_detail_);
  }
  if (from.has_db_fields()) {
    mutable_db_fields()->::NFMsg::db_server_detail::MergeFrom(from.db_fields());
  }
}

void db_query_server_detail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.db_query_server_detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_server_detail::CopyFrom(const db_query_server_detail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.db_query_server_detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_server_detail::IsInitialized() const {
  return true;
}

void db_query_server_detail::Swap(db_query_server_detail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_query_server_detail::InternalSwap(db_query_server_detail* other) {
  using std::swap;
  dy_server_detail_.Swap(&other->dy_server_detail_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(db_fields_, other->db_fields_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata db_query_server_detail::GetMetadata() const {
  protobuf_db_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_db_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NFMsg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::db_query_server* Arena::CreateMaybeMessage< ::NFMsg::db_query_server >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::db_query_server >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::db_server_detail* Arena::CreateMaybeMessage< ::NFMsg::db_server_detail >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::db_server_detail >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::db_query_server_detail* Arena::CreateMaybeMessage< ::NFMsg::db_query_server_detail >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::db_query_server_detail >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
