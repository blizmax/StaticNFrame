// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_human.proto

#ifndef PROTOBUF_INCLUDED_msg_5fhuman_2eproto
#define PROTOBUF_INCLUDED_msg_5fhuman_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_msg_5fhuman_2eproto 

namespace protobuf_msg_5fhuman_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_msg_5fhuman_2eproto
namespace NFMsg {
class accountinfo;
class accountinfoDefaultTypeInternal;
extern accountinfoDefaultTypeInternal _accountinfo_default_instance_;
class cgaccountlogin;
class cgaccountloginDefaultTypeInternal;
extern cgaccountloginDefaultTypeInternal _cgaccountlogin_default_instance_;
class cgentertable;
class cgentertableDefaultTypeInternal;
extern cgentertableDefaultTypeInternal _cgentertable_default_instance_;
class cgheartbeat;
class cgheartbeatDefaultTypeInternal;
extern cgheartbeatDefaultTypeInternal _cgheartbeat_default_instance_;
class cgreconnect;
class cgreconnectDefaultTypeInternal;
extern cgreconnectDefaultTypeInternal _cgreconnect_default_instance_;
class gcaccountlogin;
class gcaccountloginDefaultTypeInternal;
extern gcaccountloginDefaultTypeInternal _gcaccountlogin_default_instance_;
class gcentertable;
class gcentertableDefaultTypeInternal;
extern gcentertableDefaultTypeInternal _gcentertable_default_instance_;
class gcheartbeat;
class gcheartbeatDefaultTypeInternal;
extern gcheartbeatDefaultTypeInternal _gcheartbeat_default_instance_;
class gckitplayer;
class gckitplayerDefaultTypeInternal;
extern gckitplayerDefaultTypeInternal _gckitplayer_default_instance_;
class gcreconnect;
class gcreconnectDefaultTypeInternal;
extern gcreconnectDefaultTypeInternal _gcreconnect_default_instance_;
class playerinfo;
class playerinfoDefaultTypeInternal;
extern playerinfoDefaultTypeInternal _playerinfo_default_instance_;
}  // namespace NFMsg
namespace google {
namespace protobuf {
template<> ::NFMsg::accountinfo* Arena::CreateMaybeMessage<::NFMsg::accountinfo>(Arena*);
template<> ::NFMsg::cgaccountlogin* Arena::CreateMaybeMessage<::NFMsg::cgaccountlogin>(Arena*);
template<> ::NFMsg::cgentertable* Arena::CreateMaybeMessage<::NFMsg::cgentertable>(Arena*);
template<> ::NFMsg::cgheartbeat* Arena::CreateMaybeMessage<::NFMsg::cgheartbeat>(Arena*);
template<> ::NFMsg::cgreconnect* Arena::CreateMaybeMessage<::NFMsg::cgreconnect>(Arena*);
template<> ::NFMsg::gcaccountlogin* Arena::CreateMaybeMessage<::NFMsg::gcaccountlogin>(Arena*);
template<> ::NFMsg::gcentertable* Arena::CreateMaybeMessage<::NFMsg::gcentertable>(Arena*);
template<> ::NFMsg::gcheartbeat* Arena::CreateMaybeMessage<::NFMsg::gcheartbeat>(Arena*);
template<> ::NFMsg::gckitplayer* Arena::CreateMaybeMessage<::NFMsg::gckitplayer>(Arena*);
template<> ::NFMsg::gcreconnect* Arena::CreateMaybeMessage<::NFMsg::gcreconnect>(Arena*);
template<> ::NFMsg::playerinfo* Arena::CreateMaybeMessage<::NFMsg::playerinfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NFMsg {

// ===================================================================

class accountinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.accountinfo) */ {
 public:
  accountinfo();
  virtual ~accountinfo();

  accountinfo(const accountinfo& from);

  inline accountinfo& operator=(const accountinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  accountinfo(accountinfo&& from) noexcept
    : accountinfo() {
    *this = ::std::move(from);
  }

  inline accountinfo& operator=(accountinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const accountinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const accountinfo* internal_default_instance() {
    return reinterpret_cast<const accountinfo*>(
               &_accountinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(accountinfo* other);
  friend void swap(accountinfo& a, accountinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline accountinfo* New() const final {
    return CreateMaybeMessage<accountinfo>(NULL);
  }

  accountinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<accountinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const accountinfo& from);
  void MergeFrom(const accountinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(accountinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string account = 1;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // optional string password = 2;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional uint64 userid = 3;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 3;
  ::google::protobuf::uint64 userid() const;
  void set_userid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:NFMsg.accountinfo)
 private:
  void set_has_account();
  void clear_has_account();
  void set_has_password();
  void clear_has_password();
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::uint64 userid_;
  friend struct ::protobuf_msg_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class playerinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.playerinfo) */ {
 public:
  playerinfo();
  virtual ~playerinfo();

  playerinfo(const playerinfo& from);

  inline playerinfo& operator=(const playerinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  playerinfo(playerinfo&& from) noexcept
    : playerinfo() {
    *this = ::std::move(from);
  }

  inline playerinfo& operator=(playerinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const playerinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const playerinfo* internal_default_instance() {
    return reinterpret_cast<const playerinfo*>(
               &_playerinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(playerinfo* other);
  friend void swap(playerinfo& a, playerinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline playerinfo* New() const final {
    return CreateMaybeMessage<playerinfo>(NULL);
  }

  playerinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<playerinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const playerinfo& from);
  void MergeFrom(const playerinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(playerinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cid = 2;
  bool has_cid() const;
  void clear_cid();
  static const int kCidFieldNumber = 2;
  const ::std::string& cid() const;
  void set_cid(const ::std::string& value);
  #if LANG_CXX11
  void set_cid(::std::string&& value);
  #endif
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  ::std::string* mutable_cid();
  ::std::string* release_cid();
  void set_allocated_cid(::std::string* cid);

  // optional string account = 3;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 3;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // optional string password = 4;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 4;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string nickname = 5;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 5;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string regdate = 7;
  bool has_regdate() const;
  void clear_regdate();
  static const int kRegdateFieldNumber = 7;
  const ::std::string& regdate() const;
  void set_regdate(const ::std::string& value);
  #if LANG_CXX11
  void set_regdate(::std::string&& value);
  #endif
  void set_regdate(const char* value);
  void set_regdate(const char* value, size_t size);
  ::std::string* mutable_regdate();
  ::std::string* release_regdate();
  void set_allocated_regdate(::std::string* regdate);

  // optional string email = 10;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 10;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional string phonenum = 11;
  bool has_phonenum() const;
  void clear_phonenum();
  static const int kPhonenumFieldNumber = 11;
  const ::std::string& phonenum() const;
  void set_phonenum(const ::std::string& value);
  #if LANG_CXX11
  void set_phonenum(::std::string&& value);
  #endif
  void set_phonenum(const char* value);
  void set_phonenum(const char* value, size_t size);
  ::std::string* mutable_phonenum();
  ::std::string* release_phonenum();
  void set_allocated_phonenum(::std::string* phonenum);

  // optional string jetton = 15;
  bool has_jetton() const;
  void clear_jetton();
  static const int kJettonFieldNumber = 15;
  const ::std::string& jetton() const;
  void set_jetton(const ::std::string& value);
  #if LANG_CXX11
  void set_jetton(::std::string&& value);
  #endif
  void set_jetton(const char* value);
  void set_jetton(const char* value, size_t size);
  ::std::string* mutable_jetton();
  ::std::string* release_jetton();
  void set_allocated_jetton(::std::string* jetton);

  // optional string channel = 18;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 18;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // optional string province = 19;
  bool has_province() const;
  void clear_province();
  static const int kProvinceFieldNumber = 19;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  #if LANG_CXX11
  void set_province(::std::string&& value);
  #endif
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // optional string city = 20;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 20;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // optional string bindnick = 24;
  bool has_bindnick() const;
  void clear_bindnick();
  static const int kBindnickFieldNumber = 24;
  const ::std::string& bindnick() const;
  void set_bindnick(const ::std::string& value);
  #if LANG_CXX11
  void set_bindnick(::std::string&& value);
  #endif
  void set_bindnick(const char* value);
  void set_bindnick(const char* value, size_t size);
  ::std::string* mutable_bindnick();
  ::std::string* release_bindnick();
  void set_allocated_bindnick(::std::string* bindnick);

  // optional string platformid = 25;
  bool has_platformid() const;
  void clear_platformid();
  static const int kPlatformidFieldNumber = 25;
  const ::std::string& platformid() const;
  void set_platformid(const ::std::string& value);
  #if LANG_CXX11
  void set_platformid(::std::string&& value);
  #endif
  void set_platformid(const char* value);
  void set_platformid(const char* value, size_t size);
  ::std::string* mutable_platformid();
  ::std::string* release_platformid();
  void set_allocated_platformid(::std::string* platformid);

  // optional string imei = 26;
  bool has_imei() const;
  void clear_imei();
  static const int kImeiFieldNumber = 26;
  const ::std::string& imei() const;
  void set_imei(const ::std::string& value);
  #if LANG_CXX11
  void set_imei(::std::string&& value);
  #endif
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  ::std::string* mutable_imei();
  ::std::string* release_imei();
  void set_allocated_imei(::std::string* imei);

  // optional string devname = 27;
  bool has_devname() const;
  void clear_devname();
  static const int kDevnameFieldNumber = 27;
  const ::std::string& devname() const;
  void set_devname(const ::std::string& value);
  #if LANG_CXX11
  void set_devname(::std::string&& value);
  #endif
  void set_devname(const char* value);
  void set_devname(const char* value, size_t size);
  ::std::string* mutable_devname();
  ::std::string* release_devname();
  void set_allocated_devname(::std::string* devname);

  // optional string ip = 28;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 28;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional string face_1 = 34;
  bool has_face_1() const;
  void clear_face_1();
  static const int kFace1FieldNumber = 34;
  const ::std::string& face_1() const;
  void set_face_1(const ::std::string& value);
  #if LANG_CXX11
  void set_face_1(::std::string&& value);
  #endif
  void set_face_1(const char* value);
  void set_face_1(const char* value, size_t size);
  ::std::string* mutable_face_1();
  ::std::string* release_face_1();
  void set_allocated_face_1(::std::string* face_1);

  // optional string face_2 = 35;
  bool has_face_2() const;
  void clear_face_2();
  static const int kFace2FieldNumber = 35;
  const ::std::string& face_2() const;
  void set_face_2(const ::std::string& value);
  #if LANG_CXX11
  void set_face_2(::std::string&& value);
  #endif
  void set_face_2(const char* value);
  void set_face_2(const char* value, size_t size);
  ::std::string* mutable_face_2();
  ::std::string* release_face_2();
  void set_allocated_face_2(::std::string* face_2);

  // optional string face_3 = 36;
  bool has_face_3() const;
  void clear_face_3();
  static const int kFace3FieldNumber = 36;
  const ::std::string& face_3() const;
  void set_face_3(const ::std::string& value);
  #if LANG_CXX11
  void set_face_3(::std::string&& value);
  #endif
  void set_face_3(const char* value);
  void set_face_3(const char* value, size_t size);
  ::std::string* mutable_face_3();
  ::std::string* release_face_3();
  void set_allocated_face_3(::std::string* face_3);

  // optional string face_4 = 37;
  bool has_face_4() const;
  void clear_face_4();
  static const int kFace4FieldNumber = 37;
  const ::std::string& face_4() const;
  void set_face_4(const ::std::string& value);
  #if LANG_CXX11
  void set_face_4(::std::string&& value);
  #endif
  void set_face_4(const char* value);
  void set_face_4(const char* value, size_t size);
  ::std::string* mutable_face_4();
  ::std::string* release_face_4();
  void set_allocated_face_4(::std::string* face_4);

  // optional string description = 40;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 40;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string location = 41;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 41;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  #if LANG_CXX11
  void set_location(::std::string&& value);
  #endif
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // optional string bankjetton = 42;
  bool has_bankjetton() const;
  void clear_bankjetton();
  static const int kBankjettonFieldNumber = 42;
  const ::std::string& bankjetton() const;
  void set_bankjetton(const ::std::string& value);
  #if LANG_CXX11
  void set_bankjetton(::std::string&& value);
  #endif
  void set_bankjetton(const char* value);
  void set_bankjetton(const char* value, size_t size);
  ::std::string* mutable_bankjetton();
  ::std::string* release_bankjetton();
  void set_allocated_bankjetton(::std::string* bankjetton);

  // optional string title = 43;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 43;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string location_x = 47;
  bool has_location_x() const;
  void clear_location_x();
  static const int kLocationXFieldNumber = 47;
  const ::std::string& location_x() const;
  void set_location_x(const ::std::string& value);
  #if LANG_CXX11
  void set_location_x(::std::string&& value);
  #endif
  void set_location_x(const char* value);
  void set_location_x(const char* value, size_t size);
  ::std::string* mutable_location_x();
  ::std::string* release_location_x();
  void set_allocated_location_x(::std::string* location_x);

  // optional string location_y = 48;
  bool has_location_y() const;
  void clear_location_y();
  static const int kLocationYFieldNumber = 48;
  const ::std::string& location_y() const;
  void set_location_y(const ::std::string& value);
  #if LANG_CXX11
  void set_location_y(::std::string&& value);
  #endif
  void set_location_y(const char* value);
  void set_location_y(const char* value, size_t size);
  ::std::string* mutable_location_y();
  ::std::string* release_location_y();
  void set_allocated_location_y(::std::string* location_y);

  // optional string bank_password = 49;
  bool has_bank_password() const;
  void clear_bank_password();
  static const int kBankPasswordFieldNumber = 49;
  const ::std::string& bank_password() const;
  void set_bank_password(const ::std::string& value);
  #if LANG_CXX11
  void set_bank_password(::std::string&& value);
  #endif
  void set_bank_password(const char* value);
  void set_bank_password(const char* value, size_t size);
  ::std::string* mutable_bank_password();
  ::std::string* release_bank_password();
  void set_allocated_bank_password(::std::string* bank_password);

  // optional string bank_jetton = 50;
  bool has_bank_jetton() const;
  void clear_bank_jetton();
  static const int kBankJettonFieldNumber = 50;
  const ::std::string& bank_jetton() const;
  void set_bank_jetton(const ::std::string& value);
  #if LANG_CXX11
  void set_bank_jetton(::std::string&& value);
  #endif
  void set_bank_jetton(const char* value);
  void set_bank_jetton(const char* value, size_t size);
  ::std::string* mutable_bank_jetton();
  ::std::string* release_bank_jetton();
  void set_allocated_bank_jetton(::std::string* bank_jetton);

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 sex = 8;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 8;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // optional int32 age = 9;
  bool has_age() const;
  void clear_age();
  static const int kAgeFieldNumber = 9;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // optional int32 exp = 12;
  bool has_exp() const;
  void clear_exp();
  static const int kExpFieldNumber = 12;
  ::google::protobuf::int32 exp() const;
  void set_exp(::google::protobuf::int32 value);

  // optional int32 level = 13;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 13;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional int32 viplevel = 14;
  bool has_viplevel() const;
  void clear_viplevel();
  static const int kViplevelFieldNumber = 14;
  ::google::protobuf::int32 viplevel() const;
  void set_viplevel(::google::protobuf::int32 value);

  // optional int32 gold = 16;
  bool has_gold() const;
  void clear_gold();
  static const int kGoldFieldNumber = 16;
  ::google::protobuf::int32 gold() const;
  void set_gold(::google::protobuf::int32 value);

  // optional int32 money = 17;
  bool has_money() const;
  void clear_money();
  static const int kMoneyFieldNumber = 17;
  ::google::protobuf::int32 money() const;
  void set_money(::google::protobuf::int32 value);

  // optional int32 popularity = 21;
  bool has_popularity() const;
  void clear_popularity();
  static const int kPopularityFieldNumber = 21;
  ::google::protobuf::int32 popularity() const;
  void set_popularity(::google::protobuf::int32 value);

  // optional int32 idenstatus = 22;
  bool has_idenstatus() const;
  void clear_idenstatus();
  static const int kIdenstatusFieldNumber = 22;
  ::google::protobuf::int32 idenstatus() const;
  void set_idenstatus(::google::protobuf::int32 value);

  // optional int32 bindtype = 23;
  bool has_bindtype() const;
  void clear_bindtype();
  static const int kBindtypeFieldNumber = 23;
  ::google::protobuf::int32 bindtype() const;
  void set_bindtype(::google::protobuf::int32 value);

  // optional int32 mobiletype = 29;
  bool has_mobiletype() const;
  void clear_mobiletype();
  static const int kMobiletypeFieldNumber = 29;
  ::google::protobuf::int32 mobiletype() const;
  void set_mobiletype(::google::protobuf::int32 value);

  // optional int32 lasttime = 30;
  bool has_lasttime() const;
  void clear_lasttime();
  static const int kLasttimeFieldNumber = 30;
  ::google::protobuf::int32 lasttime() const;
  void set_lasttime(::google::protobuf::int32 value);

  // optional int32 penulttime = 31;
  bool has_penulttime() const;
  void clear_penulttime();
  static const int kPenulttimeFieldNumber = 31;
  ::google::protobuf::int32 penulttime() const;
  void set_penulttime(::google::protobuf::int32 value);

  // optional int32 silent = 32;
  bool has_silent() const;
  void clear_silent();
  static const int kSilentFieldNumber = 32;
  ::google::protobuf::int32 silent() const;
  void set_silent(::google::protobuf::int32 value);

  // optional int32 isban = 33;
  bool has_isban() const;
  void clear_isban();
  static const int kIsbanFieldNumber = 33;
  ::google::protobuf::int32 isban() const;
  void set_isban(::google::protobuf::int32 value);

  // optional int32 isrobot = 38;
  bool has_isrobot() const;
  void clear_isrobot();
  static const int kIsrobotFieldNumber = 38;
  ::google::protobuf::int32 isrobot() const;
  void set_isrobot(::google::protobuf::int32 value);

  // optional int32 playtype = 39;
  bool has_playtype() const;
  void clear_playtype();
  static const int kPlaytypeFieldNumber = 39;
  ::google::protobuf::int32 playtype() const;
  void set_playtype(::google::protobuf::int32 value);

  // optional int32 blacklist = 44;
  bool has_blacklist() const;
  void clear_blacklist();
  static const int kBlacklistFieldNumber = 44;
  ::google::protobuf::int32 blacklist() const;
  void set_blacklist(::google::protobuf::int32 value);

  // optional int32 propertyid = 45;
  bool has_propertyid() const;
  void clear_propertyid();
  static const int kPropertyidFieldNumber = 45;
  ::google::protobuf::int32 propertyid() const;
  void set_propertyid(::google::protobuf::int32 value);

  // optional int32 ticket = 46;
  bool has_ticket() const;
  void clear_ticket();
  static const int kTicketFieldNumber = 46;
  ::google::protobuf::int32 ticket() const;
  void set_ticket(::google::protobuf::int32 value);

  // optional int32 agent1 = 51;
  bool has_agent1() const;
  void clear_agent1();
  static const int kAgent1FieldNumber = 51;
  ::google::protobuf::int32 agent1() const;
  void set_agent1(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.playerinfo)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_cid();
  void clear_has_cid();
  void set_has_account();
  void clear_has_account();
  void set_has_password();
  void clear_has_password();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_regdate();
  void clear_has_regdate();
  void set_has_sex();
  void clear_has_sex();
  void set_has_age();
  void clear_has_age();
  void set_has_email();
  void clear_has_email();
  void set_has_phonenum();
  void clear_has_phonenum();
  void set_has_exp();
  void clear_has_exp();
  void set_has_level();
  void clear_has_level();
  void set_has_viplevel();
  void clear_has_viplevel();
  void set_has_jetton();
  void clear_has_jetton();
  void set_has_gold();
  void clear_has_gold();
  void set_has_money();
  void clear_has_money();
  void set_has_channel();
  void clear_has_channel();
  void set_has_province();
  void clear_has_province();
  void set_has_city();
  void clear_has_city();
  void set_has_popularity();
  void clear_has_popularity();
  void set_has_idenstatus();
  void clear_has_idenstatus();
  void set_has_bindtype();
  void clear_has_bindtype();
  void set_has_bindnick();
  void clear_has_bindnick();
  void set_has_platformid();
  void clear_has_platformid();
  void set_has_imei();
  void clear_has_imei();
  void set_has_devname();
  void clear_has_devname();
  void set_has_ip();
  void clear_has_ip();
  void set_has_mobiletype();
  void clear_has_mobiletype();
  void set_has_lasttime();
  void clear_has_lasttime();
  void set_has_penulttime();
  void clear_has_penulttime();
  void set_has_silent();
  void clear_has_silent();
  void set_has_isban();
  void clear_has_isban();
  void set_has_face_1();
  void clear_has_face_1();
  void set_has_face_2();
  void clear_has_face_2();
  void set_has_face_3();
  void clear_has_face_3();
  void set_has_face_4();
  void clear_has_face_4();
  void set_has_isrobot();
  void clear_has_isrobot();
  void set_has_playtype();
  void clear_has_playtype();
  void set_has_description();
  void clear_has_description();
  void set_has_location();
  void clear_has_location();
  void set_has_bankjetton();
  void clear_has_bankjetton();
  void set_has_title();
  void clear_has_title();
  void set_has_blacklist();
  void clear_has_blacklist();
  void set_has_propertyid();
  void clear_has_propertyid();
  void set_has_ticket();
  void clear_has_ticket();
  void set_has_location_x();
  void clear_has_location_x();
  void set_has_location_y();
  void clear_has_location_y();
  void set_has_bank_password();
  void clear_has_bank_password();
  void set_has_bank_jetton();
  void clear_has_bank_jetton();
  void set_has_agent1();
  void clear_has_agent1();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::internal::ArenaStringPtr cid_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr regdate_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr phonenum_;
  ::google::protobuf::internal::ArenaStringPtr jetton_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  ::google::protobuf::internal::ArenaStringPtr province_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr bindnick_;
  ::google::protobuf::internal::ArenaStringPtr platformid_;
  ::google::protobuf::internal::ArenaStringPtr imei_;
  ::google::protobuf::internal::ArenaStringPtr devname_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr face_1_;
  ::google::protobuf::internal::ArenaStringPtr face_2_;
  ::google::protobuf::internal::ArenaStringPtr face_3_;
  ::google::protobuf::internal::ArenaStringPtr face_4_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::internal::ArenaStringPtr bankjetton_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr location_x_;
  ::google::protobuf::internal::ArenaStringPtr location_y_;
  ::google::protobuf::internal::ArenaStringPtr bank_password_;
  ::google::protobuf::internal::ArenaStringPtr bank_jetton_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 age_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 popularity_;
  ::google::protobuf::int32 idenstatus_;
  ::google::protobuf::int32 bindtype_;
  ::google::protobuf::int32 mobiletype_;
  ::google::protobuf::int32 lasttime_;
  ::google::protobuf::int32 penulttime_;
  ::google::protobuf::int32 silent_;
  ::google::protobuf::int32 isban_;
  ::google::protobuf::int32 isrobot_;
  ::google::protobuf::int32 playtype_;
  ::google::protobuf::int32 blacklist_;
  ::google::protobuf::int32 propertyid_;
  ::google::protobuf::int32 ticket_;
  ::google::protobuf::int32 agent1_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cgaccountlogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.cgaccountlogin) */ {
 public:
  cgaccountlogin();
  virtual ~cgaccountlogin();

  cgaccountlogin(const cgaccountlogin& from);

  inline cgaccountlogin& operator=(const cgaccountlogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cgaccountlogin(cgaccountlogin&& from) noexcept
    : cgaccountlogin() {
    *this = ::std::move(from);
  }

  inline cgaccountlogin& operator=(cgaccountlogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cgaccountlogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cgaccountlogin* internal_default_instance() {
    return reinterpret_cast<const cgaccountlogin*>(
               &_cgaccountlogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(cgaccountlogin* other);
  friend void swap(cgaccountlogin& a, cgaccountlogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cgaccountlogin* New() const final {
    return CreateMaybeMessage<cgaccountlogin>(NULL);
  }

  cgaccountlogin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cgaccountlogin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cgaccountlogin& from);
  void MergeFrom(const cgaccountlogin& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cgaccountlogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string account = 1;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // optional string password = 2;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string imei = 4;
  bool has_imei() const;
  void clear_imei();
  static const int kImeiFieldNumber = 4;
  const ::std::string& imei() const;
  void set_imei(const ::std::string& value);
  #if LANG_CXX11
  void set_imei(::std::string&& value);
  #endif
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  ::std::string* mutable_imei();
  ::std::string* release_imei();
  void set_allocated_imei(::std::string* imei);

  // optional string nickname = 5;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 5;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string devname = 6;
  bool has_devname() const;
  void clear_devname();
  static const int kDevnameFieldNumber = 6;
  const ::std::string& devname() const;
  void set_devname(const ::std::string& value);
  #if LANG_CXX11
  void set_devname(::std::string&& value);
  #endif
  void set_devname(const char* value);
  void set_devname(const char* value, size_t size);
  ::std::string* mutable_devname();
  ::std::string* release_devname();
  void set_allocated_devname(::std::string* devname);

  // optional string macname = 7;
  bool has_macname() const;
  void clear_macname();
  static const int kMacnameFieldNumber = 7;
  const ::std::string& macname() const;
  void set_macname(const ::std::string& value);
  #if LANG_CXX11
  void set_macname(::std::string&& value);
  #endif
  void set_macname(const char* value);
  void set_macname(const char* value, size_t size);
  ::std::string* mutable_macname();
  ::std::string* release_macname();
  void set_allocated_macname(::std::string* macname);

  // optional string channel = 8;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 8;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // optional string province = 9;
  bool has_province() const;
  void clear_province();
  static const int kProvinceFieldNumber = 9;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  #if LANG_CXX11
  void set_province(::std::string&& value);
  #endif
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // optional string city = 10;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 10;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // optional string phonenum = 12;
  bool has_phonenum() const;
  void clear_phonenum();
  static const int kPhonenumFieldNumber = 12;
  const ::std::string& phonenum() const;
  void set_phonenum(const ::std::string& value);
  #if LANG_CXX11
  void set_phonenum(::std::string&& value);
  #endif
  void set_phonenum(const char* value);
  void set_phonenum(const char* value, size_t size);
  ::std::string* mutable_phonenum();
  ::std::string* release_phonenum();
  void set_allocated_phonenum(::std::string* phonenum);

  // optional string cid = 16;
  bool has_cid() const;
  void clear_cid();
  static const int kCidFieldNumber = 16;
  const ::std::string& cid() const;
  void set_cid(const ::std::string& value);
  #if LANG_CXX11
  void set_cid(::std::string&& value);
  #endif
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  ::std::string* mutable_cid();
  ::std::string* release_cid();
  void set_allocated_cid(::std::string* cid);

  // optional string platformid = 17;
  bool has_platformid() const;
  void clear_platformid();
  static const int kPlatformidFieldNumber = 17;
  const ::std::string& platformid() const;
  void set_platformid(const ::std::string& value);
  #if LANG_CXX11
  void set_platformid(::std::string&& value);
  #endif
  void set_platformid(const char* value);
  void set_platformid(const char* value, size_t size);
  ::std::string* mutable_platformid();
  ::std::string* release_platformid();
  void set_allocated_platformid(::std::string* platformid);

  // optional string bindnick = 18;
  bool has_bindnick() const;
  void clear_bindnick();
  static const int kBindnickFieldNumber = 18;
  const ::std::string& bindnick() const;
  void set_bindnick(const ::std::string& value);
  #if LANG_CXX11
  void set_bindnick(::std::string&& value);
  #endif
  void set_bindnick(const char* value);
  void set_bindnick(const char* value, size_t size);
  ::std::string* mutable_bindnick();
  ::std::string* release_bindnick();
  void set_allocated_bindnick(::std::string* bindnick);

  // optional string authcode = 21;
  bool has_authcode() const;
  void clear_authcode();
  static const int kAuthcodeFieldNumber = 21;
  const ::std::string& authcode() const;
  void set_authcode(const ::std::string& value);
  #if LANG_CXX11
  void set_authcode(::std::string&& value);
  #endif
  void set_authcode(const char* value);
  void set_authcode(const char* value, size_t size);
  ::std::string* mutable_authcode();
  ::std::string* release_authcode();
  void set_allocated_authcode(::std::string* authcode);

  // optional string email = 22;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 22;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional int32 mobileid = 11;
  bool has_mobileid() const;
  void clear_mobileid();
  static const int kMobileidFieldNumber = 11;
  ::google::protobuf::int32 mobileid() const;
  void set_mobileid(::google::protobuf::int32 value);

  // optional int32 inviterid = 13;
  bool has_inviterid() const;
  void clear_inviterid();
  static const int kInviteridFieldNumber = 13;
  ::google::protobuf::int32 inviterid() const;
  void set_inviterid(::google::protobuf::int32 value);

  // optional int32 bindtype = 14;
  bool has_bindtype() const;
  void clear_bindtype();
  static const int kBindtypeFieldNumber = 14;
  ::google::protobuf::int32 bindtype() const;
  void set_bindtype(::google::protobuf::int32 value);

  // optional int32 pushtype = 15;
  bool has_pushtype() const;
  void clear_pushtype();
  static const int kPushtypeFieldNumber = 15;
  ::google::protobuf::int32 pushtype() const;
  void set_pushtype(::google::protobuf::int32 value);

  // optional int32 mobiletype = 19;
  bool has_mobiletype() const;
  void clear_mobiletype();
  static const int kMobiletypeFieldNumber = 19;
  ::google::protobuf::int32 mobiletype() const;
  void set_mobiletype(::google::protobuf::int32 value);

  // optional int32 sex = 20;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 20;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.cgaccountlogin)
 private:
  void set_has_account();
  void clear_has_account();
  void set_has_password();
  void clear_has_password();
  void set_has_imei();
  void clear_has_imei();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_devname();
  void clear_has_devname();
  void set_has_macname();
  void clear_has_macname();
  void set_has_channel();
  void clear_has_channel();
  void set_has_province();
  void clear_has_province();
  void set_has_city();
  void clear_has_city();
  void set_has_mobileid();
  void clear_has_mobileid();
  void set_has_phonenum();
  void clear_has_phonenum();
  void set_has_inviterid();
  void clear_has_inviterid();
  void set_has_bindtype();
  void clear_has_bindtype();
  void set_has_pushtype();
  void clear_has_pushtype();
  void set_has_cid();
  void clear_has_cid();
  void set_has_platformid();
  void clear_has_platformid();
  void set_has_bindnick();
  void clear_has_bindnick();
  void set_has_mobiletype();
  void clear_has_mobiletype();
  void set_has_sex();
  void clear_has_sex();
  void set_has_authcode();
  void clear_has_authcode();
  void set_has_email();
  void clear_has_email();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr imei_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr devname_;
  ::google::protobuf::internal::ArenaStringPtr macname_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  ::google::protobuf::internal::ArenaStringPtr province_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr phonenum_;
  ::google::protobuf::internal::ArenaStringPtr cid_;
  ::google::protobuf::internal::ArenaStringPtr platformid_;
  ::google::protobuf::internal::ArenaStringPtr bindnick_;
  ::google::protobuf::internal::ArenaStringPtr authcode_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::int32 mobileid_;
  ::google::protobuf::int32 inviterid_;
  ::google::protobuf::int32 bindtype_;
  ::google::protobuf::int32 pushtype_;
  ::google::protobuf::int32 mobiletype_;
  ::google::protobuf::int32 sex_;
  friend struct ::protobuf_msg_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class gcaccountlogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.gcaccountlogin) */ {
 public:
  gcaccountlogin();
  virtual ~gcaccountlogin();

  gcaccountlogin(const gcaccountlogin& from);

  inline gcaccountlogin& operator=(const gcaccountlogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  gcaccountlogin(gcaccountlogin&& from) noexcept
    : gcaccountlogin() {
    *this = ::std::move(from);
  }

  inline gcaccountlogin& operator=(gcaccountlogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gcaccountlogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gcaccountlogin* internal_default_instance() {
    return reinterpret_cast<const gcaccountlogin*>(
               &_gcaccountlogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(gcaccountlogin* other);
  friend void swap(gcaccountlogin& a, gcaccountlogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline gcaccountlogin* New() const final {
    return CreateMaybeMessage<gcaccountlogin>(NULL);
  }

  gcaccountlogin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<gcaccountlogin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const gcaccountlogin& from);
  void MergeFrom(const gcaccountlogin& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gcaccountlogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .NFMsg.playerinfo pinfo = 2;
  bool has_pinfo() const;
  void clear_pinfo();
  static const int kPinfoFieldNumber = 2;
  private:
  const ::NFMsg::playerinfo& _internal_pinfo() const;
  public:
  const ::NFMsg::playerinfo& pinfo() const;
  ::NFMsg::playerinfo* release_pinfo();
  ::NFMsg::playerinfo* mutable_pinfo();
  void set_allocated_pinfo(::NFMsg::playerinfo* pinfo);

  // optional int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional int32 tableid = 3;
  bool has_tableid() const;
  void clear_tableid();
  static const int kTableidFieldNumber = 3;
  ::google::protobuf::int32 tableid() const;
  void set_tableid(::google::protobuf::int32 value);

  // optional int32 systime = 4;
  bool has_systime() const;
  void clear_systime();
  static const int kSystimeFieldNumber = 4;
  ::google::protobuf::int32 systime() const;
  void set_systime(::google::protobuf::int32 value);

  // optional int32 tabletype = 5;
  bool has_tabletype() const;
  void clear_tabletype();
  static const int kTabletypeFieldNumber = 5;
  ::google::protobuf::int32 tabletype() const;
  void set_tabletype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.gcaccountlogin)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_pinfo();
  void clear_has_pinfo();
  void set_has_tableid();
  void clear_has_tableid();
  void set_has_systime();
  void clear_has_systime();
  void set_has_tabletype();
  void clear_has_tabletype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::NFMsg::playerinfo* pinfo_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 systime_;
  ::google::protobuf::int32 tabletype_;
  friend struct ::protobuf_msg_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cgreconnect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.cgreconnect) */ {
 public:
  cgreconnect();
  virtual ~cgreconnect();

  cgreconnect(const cgreconnect& from);

  inline cgreconnect& operator=(const cgreconnect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cgreconnect(cgreconnect&& from) noexcept
    : cgreconnect() {
    *this = ::std::move(from);
  }

  inline cgreconnect& operator=(cgreconnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cgreconnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cgreconnect* internal_default_instance() {
    return reinterpret_cast<const cgreconnect*>(
               &_cgreconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(cgreconnect* other);
  friend void swap(cgreconnect& a, cgreconnect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cgreconnect* New() const final {
    return CreateMaybeMessage<cgreconnect>(NULL);
  }

  cgreconnect* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cgreconnect>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cgreconnect& from);
  void MergeFrom(const cgreconnect& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cgreconnect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.cgreconnect)
 private:
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 userid_;
  friend struct ::protobuf_msg_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class gcreconnect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.gcreconnect) */ {
 public:
  gcreconnect();
  virtual ~gcreconnect();

  gcreconnect(const gcreconnect& from);

  inline gcreconnect& operator=(const gcreconnect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  gcreconnect(gcreconnect&& from) noexcept
    : gcreconnect() {
    *this = ::std::move(from);
  }

  inline gcreconnect& operator=(gcreconnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gcreconnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gcreconnect* internal_default_instance() {
    return reinterpret_cast<const gcreconnect*>(
               &_gcreconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(gcreconnect* other);
  friend void swap(gcreconnect& a, gcreconnect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline gcreconnect* New() const final {
    return CreateMaybeMessage<gcreconnect>(NULL);
  }

  gcreconnect* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<gcreconnect>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const gcreconnect& from);
  void MergeFrom(const gcreconnect& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gcreconnect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgbegin = 2;
  bool has_msgbegin() const;
  void clear_msgbegin();
  static const int kMsgbeginFieldNumber = 2;
  const ::std::string& msgbegin() const;
  void set_msgbegin(const ::std::string& value);
  #if LANG_CXX11
  void set_msgbegin(::std::string&& value);
  #endif
  void set_msgbegin(const char* value);
  void set_msgbegin(const char* value, size_t size);
  ::std::string* mutable_msgbegin();
  ::std::string* release_msgbegin();
  void set_allocated_msgbegin(::std::string* msgbegin);

  // optional int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional int32 tableid = 3;
  bool has_tableid() const;
  void clear_tableid();
  static const int kTableidFieldNumber = 3;
  ::google::protobuf::int32 tableid() const;
  void set_tableid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.gcreconnect)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_msgbegin();
  void clear_has_msgbegin();
  void set_has_tableid();
  void clear_has_tableid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msgbegin_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 tableid_;
  friend struct ::protobuf_msg_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cgheartbeat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.cgheartbeat) */ {
 public:
  cgheartbeat();
  virtual ~cgheartbeat();

  cgheartbeat(const cgheartbeat& from);

  inline cgheartbeat& operator=(const cgheartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cgheartbeat(cgheartbeat&& from) noexcept
    : cgheartbeat() {
    *this = ::std::move(from);
  }

  inline cgheartbeat& operator=(cgheartbeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cgheartbeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cgheartbeat* internal_default_instance() {
    return reinterpret_cast<const cgheartbeat*>(
               &_cgheartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(cgheartbeat* other);
  friend void swap(cgheartbeat& a, cgheartbeat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cgheartbeat* New() const final {
    return CreateMaybeMessage<cgheartbeat>(NULL);
  }

  cgheartbeat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cgheartbeat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cgheartbeat& from);
  void MergeFrom(const cgheartbeat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cgheartbeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.cgheartbeat)
 private:
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 userid_;
  friend struct ::protobuf_msg_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class gcheartbeat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.gcheartbeat) */ {
 public:
  gcheartbeat();
  virtual ~gcheartbeat();

  gcheartbeat(const gcheartbeat& from);

  inline gcheartbeat& operator=(const gcheartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  gcheartbeat(gcheartbeat&& from) noexcept
    : gcheartbeat() {
    *this = ::std::move(from);
  }

  inline gcheartbeat& operator=(gcheartbeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gcheartbeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gcheartbeat* internal_default_instance() {
    return reinterpret_cast<const gcheartbeat*>(
               &_gcheartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(gcheartbeat* other);
  friend void swap(gcheartbeat& a, gcheartbeat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline gcheartbeat* New() const final {
    return CreateMaybeMessage<gcheartbeat>(NULL);
  }

  gcheartbeat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<gcheartbeat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const gcheartbeat& from);
  void MergeFrom(const gcheartbeat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gcheartbeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.gcheartbeat)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_msg_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class gckitplayer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.gckitplayer) */ {
 public:
  gckitplayer();
  virtual ~gckitplayer();

  gckitplayer(const gckitplayer& from);

  inline gckitplayer& operator=(const gckitplayer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  gckitplayer(gckitplayer&& from) noexcept
    : gckitplayer() {
    *this = ::std::move(from);
  }

  inline gckitplayer& operator=(gckitplayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gckitplayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gckitplayer* internal_default_instance() {
    return reinterpret_cast<const gckitplayer*>(
               &_gckitplayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(gckitplayer* other);
  friend void swap(gckitplayer& a, gckitplayer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline gckitplayer* New() const final {
    return CreateMaybeMessage<gckitplayer>(NULL);
  }

  gckitplayer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<gckitplayer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const gckitplayer& from);
  void MergeFrom(const gckitplayer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gckitplayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 3;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional int32 kittype = 2;
  bool has_kittype() const;
  void clear_kittype();
  static const int kKittypeFieldNumber = 2;
  ::google::protobuf::int32 kittype() const;
  void set_kittype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.gckitplayer)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_kittype();
  void clear_has_kittype();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 kittype_;
  friend struct ::protobuf_msg_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cgentertable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.cgentertable) */ {
 public:
  cgentertable();
  virtual ~cgentertable();

  cgentertable(const cgentertable& from);

  inline cgentertable& operator=(const cgentertable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cgentertable(cgentertable&& from) noexcept
    : cgentertable() {
    *this = ::std::move(from);
  }

  inline cgentertable& operator=(cgentertable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cgentertable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cgentertable* internal_default_instance() {
    return reinterpret_cast<const cgentertable*>(
               &_cgentertable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(cgentertable* other);
  friend void swap(cgentertable& a, cgentertable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cgentertable* New() const final {
    return CreateMaybeMessage<cgentertable>(NULL);
  }

  cgentertable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cgentertable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cgentertable& from);
  void MergeFrom(const cgentertable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cgentertable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string password = 3;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 tableid = 2;
  bool has_tableid() const;
  void clear_tableid();
  static const int kTableidFieldNumber = 2;
  ::google::protobuf::int32 tableid() const;
  void set_tableid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.cgentertable)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_tableid();
  void clear_has_tableid();
  void set_has_password();
  void clear_has_password();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 tableid_;
  friend struct ::protobuf_msg_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class gcentertable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.gcentertable) */ {
 public:
  gcentertable();
  virtual ~gcentertable();

  gcentertable(const gcentertable& from);

  inline gcentertable& operator=(const gcentertable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  gcentertable(gcentertable&& from) noexcept
    : gcentertable() {
    *this = ::std::move(from);
  }

  inline gcentertable& operator=(gcentertable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gcentertable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gcentertable* internal_default_instance() {
    return reinterpret_cast<const gcentertable*>(
               &_gcentertable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(gcentertable* other);
  friend void swap(gcentertable& a, gcentertable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline gcentertable* New() const final {
    return CreateMaybeMessage<gcentertable>(NULL);
  }

  gcentertable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<gcentertable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const gcentertable& from);
  void MergeFrom(const gcentertable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gcentertable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.gcentertable)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_msg_5fhuman_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// accountinfo

// optional string account = 1;
inline bool accountinfo::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void accountinfo::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void accountinfo::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void accountinfo::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& accountinfo::account() const {
  // @@protoc_insertion_point(field_get:NFMsg.accountinfo.account)
  return account_.GetNoArena();
}
inline void accountinfo::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.accountinfo.account)
}
#if LANG_CXX11
inline void accountinfo::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.accountinfo.account)
}
#endif
inline void accountinfo::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.accountinfo.account)
}
inline void accountinfo::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.accountinfo.account)
}
inline ::std::string* accountinfo::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:NFMsg.accountinfo.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* accountinfo::release_account() {
  // @@protoc_insertion_point(field_release:NFMsg.accountinfo.account)
  if (!has_account()) {
    return NULL;
  }
  clear_has_account();
  return account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void accountinfo::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.accountinfo.account)
}

// optional string password = 2;
inline bool accountinfo::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void accountinfo::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void accountinfo::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void accountinfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& accountinfo::password() const {
  // @@protoc_insertion_point(field_get:NFMsg.accountinfo.password)
  return password_.GetNoArena();
}
inline void accountinfo::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.accountinfo.password)
}
#if LANG_CXX11
inline void accountinfo::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.accountinfo.password)
}
#endif
inline void accountinfo::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.accountinfo.password)
}
inline void accountinfo::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.accountinfo.password)
}
inline ::std::string* accountinfo::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:NFMsg.accountinfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* accountinfo::release_password() {
  // @@protoc_insertion_point(field_release:NFMsg.accountinfo.password)
  if (!has_password()) {
    return NULL;
  }
  clear_has_password();
  return password_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void accountinfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.accountinfo.password)
}

// optional uint64 userid = 3;
inline bool accountinfo::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void accountinfo::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void accountinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void accountinfo::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 accountinfo::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.accountinfo.userid)
  return userid_;
}
inline void accountinfo::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.accountinfo.userid)
}

// -------------------------------------------------------------------

// playerinfo

// optional int32 userid = 1;
inline bool playerinfo::has_userid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void playerinfo::set_has_userid() {
  _has_bits_[0] |= 0x10000000u;
}
inline void playerinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void playerinfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 playerinfo::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.userid)
  return userid_;
}
inline void playerinfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.userid)
}

// optional string cid = 2;
inline bool playerinfo::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void playerinfo::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void playerinfo::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void playerinfo::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cid();
}
inline const ::std::string& playerinfo::cid() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.cid)
  return cid_.GetNoArena();
}
inline void playerinfo::set_cid(const ::std::string& value) {
  set_has_cid();
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.cid)
}
#if LANG_CXX11
inline void playerinfo::set_cid(::std::string&& value) {
  set_has_cid();
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.cid)
}
#endif
inline void playerinfo::set_cid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cid();
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.cid)
}
inline void playerinfo::set_cid(const char* value, size_t size) {
  set_has_cid();
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.cid)
}
inline ::std::string* playerinfo::mutable_cid() {
  set_has_cid();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_cid() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.cid)
  if (!has_cid()) {
    return NULL;
  }
  clear_has_cid();
  return cid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    set_has_cid();
  } else {
    clear_has_cid();
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.cid)
}

// optional string account = 3;
inline bool playerinfo::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void playerinfo::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void playerinfo::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void playerinfo::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& playerinfo::account() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.account)
  return account_.GetNoArena();
}
inline void playerinfo::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.account)
}
#if LANG_CXX11
inline void playerinfo::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.account)
}
#endif
inline void playerinfo::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.account)
}
inline void playerinfo::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.account)
}
inline ::std::string* playerinfo::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_account() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.account)
  if (!has_account()) {
    return NULL;
  }
  clear_has_account();
  return account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.account)
}

// optional string password = 4;
inline bool playerinfo::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void playerinfo::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void playerinfo::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void playerinfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& playerinfo::password() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.password)
  return password_.GetNoArena();
}
inline void playerinfo::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.password)
}
#if LANG_CXX11
inline void playerinfo::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.password)
}
#endif
inline void playerinfo::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.password)
}
inline void playerinfo::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.password)
}
inline ::std::string* playerinfo::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_password() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.password)
  if (!has_password()) {
    return NULL;
  }
  clear_has_password();
  return password_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.password)
}

// optional string nickname = 5;
inline bool playerinfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void playerinfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void playerinfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void playerinfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& playerinfo::nickname() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.nickname)
  return nickname_.GetNoArena();
}
inline void playerinfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.nickname)
}
#if LANG_CXX11
inline void playerinfo::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.nickname)
}
#endif
inline void playerinfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.nickname)
}
inline void playerinfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.nickname)
}
inline ::std::string* playerinfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_nickname() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.nickname)
  if (!has_nickname()) {
    return NULL;
  }
  clear_has_nickname();
  return nickname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.nickname)
}

// optional string regdate = 7;
inline bool playerinfo::has_regdate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void playerinfo::set_has_regdate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void playerinfo::clear_has_regdate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void playerinfo::clear_regdate() {
  regdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_regdate();
}
inline const ::std::string& playerinfo::regdate() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.regdate)
  return regdate_.GetNoArena();
}
inline void playerinfo::set_regdate(const ::std::string& value) {
  set_has_regdate();
  regdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.regdate)
}
#if LANG_CXX11
inline void playerinfo::set_regdate(::std::string&& value) {
  set_has_regdate();
  regdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.regdate)
}
#endif
inline void playerinfo::set_regdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_regdate();
  regdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.regdate)
}
inline void playerinfo::set_regdate(const char* value, size_t size) {
  set_has_regdate();
  regdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.regdate)
}
inline ::std::string* playerinfo::mutable_regdate() {
  set_has_regdate();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.regdate)
  return regdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_regdate() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.regdate)
  if (!has_regdate()) {
    return NULL;
  }
  clear_has_regdate();
  return regdate_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_regdate(::std::string* regdate) {
  if (regdate != NULL) {
    set_has_regdate();
  } else {
    clear_has_regdate();
  }
  regdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regdate);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.regdate)
}

// optional int32 sex = 8;
inline bool playerinfo::has_sex() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void playerinfo::set_has_sex() {
  _has_bits_[0] |= 0x20000000u;
}
inline void playerinfo::clear_has_sex() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void playerinfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 playerinfo::sex() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.sex)
  return sex_;
}
inline void playerinfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.sex)
}

// optional int32 age = 9;
inline bool playerinfo::has_age() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void playerinfo::set_has_age() {
  _has_bits_[0] |= 0x40000000u;
}
inline void playerinfo::clear_has_age() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void playerinfo::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 playerinfo::age() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.age)
  return age_;
}
inline void playerinfo::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.age)
}

// optional string email = 10;
inline bool playerinfo::has_email() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void playerinfo::set_has_email() {
  _has_bits_[0] |= 0x00000020u;
}
inline void playerinfo::clear_has_email() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void playerinfo::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& playerinfo::email() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.email)
  return email_.GetNoArena();
}
inline void playerinfo::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.email)
}
#if LANG_CXX11
inline void playerinfo::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.email)
}
#endif
inline void playerinfo::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.email)
}
inline void playerinfo::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.email)
}
inline ::std::string* playerinfo::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_email() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.email)
  if (!has_email()) {
    return NULL;
  }
  clear_has_email();
  return email_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.email)
}

// optional string phonenum = 11;
inline bool playerinfo::has_phonenum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void playerinfo::set_has_phonenum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void playerinfo::clear_has_phonenum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void playerinfo::clear_phonenum() {
  phonenum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phonenum();
}
inline const ::std::string& playerinfo::phonenum() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.phonenum)
  return phonenum_.GetNoArena();
}
inline void playerinfo::set_phonenum(const ::std::string& value) {
  set_has_phonenum();
  phonenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.phonenum)
}
#if LANG_CXX11
inline void playerinfo::set_phonenum(::std::string&& value) {
  set_has_phonenum();
  phonenum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.phonenum)
}
#endif
inline void playerinfo::set_phonenum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phonenum();
  phonenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.phonenum)
}
inline void playerinfo::set_phonenum(const char* value, size_t size) {
  set_has_phonenum();
  phonenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.phonenum)
}
inline ::std::string* playerinfo::mutable_phonenum() {
  set_has_phonenum();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.phonenum)
  return phonenum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_phonenum() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.phonenum)
  if (!has_phonenum()) {
    return NULL;
  }
  clear_has_phonenum();
  return phonenum_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_phonenum(::std::string* phonenum) {
  if (phonenum != NULL) {
    set_has_phonenum();
  } else {
    clear_has_phonenum();
  }
  phonenum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phonenum);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.phonenum)
}

// optional int32 exp = 12;
inline bool playerinfo::has_exp() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void playerinfo::set_has_exp() {
  _has_bits_[0] |= 0x80000000u;
}
inline void playerinfo::clear_has_exp() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void playerinfo::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 playerinfo::exp() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.exp)
  return exp_;
}
inline void playerinfo::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.exp)
}

// optional int32 level = 13;
inline bool playerinfo::has_level() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void playerinfo::set_has_level() {
  _has_bits_[1] |= 0x00000001u;
}
inline void playerinfo::clear_has_level() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void playerinfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 playerinfo::level() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.level)
  return level_;
}
inline void playerinfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.level)
}

// optional int32 viplevel = 14;
inline bool playerinfo::has_viplevel() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void playerinfo::set_has_viplevel() {
  _has_bits_[1] |= 0x00000002u;
}
inline void playerinfo::clear_has_viplevel() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void playerinfo::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 playerinfo::viplevel() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.viplevel)
  return viplevel_;
}
inline void playerinfo::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.viplevel)
}

// optional string jetton = 15;
inline bool playerinfo::has_jetton() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void playerinfo::set_has_jetton() {
  _has_bits_[0] |= 0x00000080u;
}
inline void playerinfo::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void playerinfo::clear_jetton() {
  jetton_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_jetton();
}
inline const ::std::string& playerinfo::jetton() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.jetton)
  return jetton_.GetNoArena();
}
inline void playerinfo::set_jetton(const ::std::string& value) {
  set_has_jetton();
  jetton_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.jetton)
}
#if LANG_CXX11
inline void playerinfo::set_jetton(::std::string&& value) {
  set_has_jetton();
  jetton_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.jetton)
}
#endif
inline void playerinfo::set_jetton(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_jetton();
  jetton_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.jetton)
}
inline void playerinfo::set_jetton(const char* value, size_t size) {
  set_has_jetton();
  jetton_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.jetton)
}
inline ::std::string* playerinfo::mutable_jetton() {
  set_has_jetton();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.jetton)
  return jetton_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_jetton() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.jetton)
  if (!has_jetton()) {
    return NULL;
  }
  clear_has_jetton();
  return jetton_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_jetton(::std::string* jetton) {
  if (jetton != NULL) {
    set_has_jetton();
  } else {
    clear_has_jetton();
  }
  jetton_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jetton);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.jetton)
}

// optional int32 gold = 16;
inline bool playerinfo::has_gold() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void playerinfo::set_has_gold() {
  _has_bits_[1] |= 0x00000004u;
}
inline void playerinfo::clear_has_gold() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void playerinfo::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 playerinfo::gold() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.gold)
  return gold_;
}
inline void playerinfo::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.gold)
}

// optional int32 money = 17;
inline bool playerinfo::has_money() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void playerinfo::set_has_money() {
  _has_bits_[1] |= 0x00000008u;
}
inline void playerinfo::clear_has_money() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void playerinfo::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 playerinfo::money() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.money)
  return money_;
}
inline void playerinfo::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.money)
}

// optional string channel = 18;
inline bool playerinfo::has_channel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void playerinfo::set_has_channel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void playerinfo::clear_has_channel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void playerinfo::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel();
}
inline const ::std::string& playerinfo::channel() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.channel)
  return channel_.GetNoArena();
}
inline void playerinfo::set_channel(const ::std::string& value) {
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.channel)
}
#if LANG_CXX11
inline void playerinfo::set_channel(::std::string&& value) {
  set_has_channel();
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.channel)
}
#endif
inline void playerinfo::set_channel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.channel)
}
inline void playerinfo::set_channel(const char* value, size_t size) {
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.channel)
}
inline ::std::string* playerinfo::mutable_channel() {
  set_has_channel();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_channel() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.channel)
  if (!has_channel()) {
    return NULL;
  }
  clear_has_channel();
  return channel_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_channel(::std::string* channel) {
  if (channel != NULL) {
    set_has_channel();
  } else {
    clear_has_channel();
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.channel)
}

// optional string province = 19;
inline bool playerinfo::has_province() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void playerinfo::set_has_province() {
  _has_bits_[0] |= 0x00000200u;
}
inline void playerinfo::clear_has_province() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void playerinfo::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
inline const ::std::string& playerinfo::province() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.province)
  return province_.GetNoArena();
}
inline void playerinfo::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.province)
}
#if LANG_CXX11
inline void playerinfo::set_province(::std::string&& value) {
  set_has_province();
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.province)
}
#endif
inline void playerinfo::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.province)
}
inline void playerinfo::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.province)
}
inline ::std::string* playerinfo::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_province() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.province)
  if (!has_province()) {
    return NULL;
  }
  clear_has_province();
  return province_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.province)
}

// optional string city = 20;
inline bool playerinfo::has_city() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void playerinfo::set_has_city() {
  _has_bits_[0] |= 0x00000400u;
}
inline void playerinfo::clear_has_city() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void playerinfo::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
inline const ::std::string& playerinfo::city() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.city)
  return city_.GetNoArena();
}
inline void playerinfo::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.city)
}
#if LANG_CXX11
inline void playerinfo::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.city)
}
#endif
inline void playerinfo::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.city)
}
inline void playerinfo::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.city)
}
inline ::std::string* playerinfo::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_city() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.city)
  if (!has_city()) {
    return NULL;
  }
  clear_has_city();
  return city_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.city)
}

// optional int32 popularity = 21;
inline bool playerinfo::has_popularity() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void playerinfo::set_has_popularity() {
  _has_bits_[1] |= 0x00000010u;
}
inline void playerinfo::clear_has_popularity() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void playerinfo::clear_popularity() {
  popularity_ = 0;
  clear_has_popularity();
}
inline ::google::protobuf::int32 playerinfo::popularity() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.popularity)
  return popularity_;
}
inline void playerinfo::set_popularity(::google::protobuf::int32 value) {
  set_has_popularity();
  popularity_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.popularity)
}

// optional int32 idenstatus = 22;
inline bool playerinfo::has_idenstatus() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void playerinfo::set_has_idenstatus() {
  _has_bits_[1] |= 0x00000020u;
}
inline void playerinfo::clear_has_idenstatus() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void playerinfo::clear_idenstatus() {
  idenstatus_ = 0;
  clear_has_idenstatus();
}
inline ::google::protobuf::int32 playerinfo::idenstatus() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.idenstatus)
  return idenstatus_;
}
inline void playerinfo::set_idenstatus(::google::protobuf::int32 value) {
  set_has_idenstatus();
  idenstatus_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.idenstatus)
}

// optional int32 bindtype = 23;
inline bool playerinfo::has_bindtype() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void playerinfo::set_has_bindtype() {
  _has_bits_[1] |= 0x00000040u;
}
inline void playerinfo::clear_has_bindtype() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void playerinfo::clear_bindtype() {
  bindtype_ = 0;
  clear_has_bindtype();
}
inline ::google::protobuf::int32 playerinfo::bindtype() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.bindtype)
  return bindtype_;
}
inline void playerinfo::set_bindtype(::google::protobuf::int32 value) {
  set_has_bindtype();
  bindtype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.bindtype)
}

// optional string bindnick = 24;
inline bool playerinfo::has_bindnick() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void playerinfo::set_has_bindnick() {
  _has_bits_[0] |= 0x00000800u;
}
inline void playerinfo::clear_has_bindnick() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void playerinfo::clear_bindnick() {
  bindnick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bindnick();
}
inline const ::std::string& playerinfo::bindnick() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.bindnick)
  return bindnick_.GetNoArena();
}
inline void playerinfo::set_bindnick(const ::std::string& value) {
  set_has_bindnick();
  bindnick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.bindnick)
}
#if LANG_CXX11
inline void playerinfo::set_bindnick(::std::string&& value) {
  set_has_bindnick();
  bindnick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.bindnick)
}
#endif
inline void playerinfo::set_bindnick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bindnick();
  bindnick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.bindnick)
}
inline void playerinfo::set_bindnick(const char* value, size_t size) {
  set_has_bindnick();
  bindnick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.bindnick)
}
inline ::std::string* playerinfo::mutable_bindnick() {
  set_has_bindnick();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.bindnick)
  return bindnick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_bindnick() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.bindnick)
  if (!has_bindnick()) {
    return NULL;
  }
  clear_has_bindnick();
  return bindnick_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_bindnick(::std::string* bindnick) {
  if (bindnick != NULL) {
    set_has_bindnick();
  } else {
    clear_has_bindnick();
  }
  bindnick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindnick);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.bindnick)
}

// optional string platformid = 25;
inline bool playerinfo::has_platformid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void playerinfo::set_has_platformid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void playerinfo::clear_has_platformid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void playerinfo::clear_platformid() {
  platformid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platformid();
}
inline const ::std::string& playerinfo::platformid() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.platformid)
  return platformid_.GetNoArena();
}
inline void playerinfo::set_platformid(const ::std::string& value) {
  set_has_platformid();
  platformid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.platformid)
}
#if LANG_CXX11
inline void playerinfo::set_platformid(::std::string&& value) {
  set_has_platformid();
  platformid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.platformid)
}
#endif
inline void playerinfo::set_platformid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_platformid();
  platformid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.platformid)
}
inline void playerinfo::set_platformid(const char* value, size_t size) {
  set_has_platformid();
  platformid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.platformid)
}
inline ::std::string* playerinfo::mutable_platformid() {
  set_has_platformid();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.platformid)
  return platformid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_platformid() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.platformid)
  if (!has_platformid()) {
    return NULL;
  }
  clear_has_platformid();
  return platformid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_platformid(::std::string* platformid) {
  if (platformid != NULL) {
    set_has_platformid();
  } else {
    clear_has_platformid();
  }
  platformid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platformid);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.platformid)
}

// optional string imei = 26;
inline bool playerinfo::has_imei() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void playerinfo::set_has_imei() {
  _has_bits_[0] |= 0x00002000u;
}
inline void playerinfo::clear_has_imei() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void playerinfo::clear_imei() {
  imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imei();
}
inline const ::std::string& playerinfo::imei() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.imei)
  return imei_.GetNoArena();
}
inline void playerinfo::set_imei(const ::std::string& value) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.imei)
}
#if LANG_CXX11
inline void playerinfo::set_imei(::std::string&& value) {
  set_has_imei();
  imei_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.imei)
}
#endif
inline void playerinfo::set_imei(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.imei)
}
inline void playerinfo::set_imei(const char* value, size_t size) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.imei)
}
inline ::std::string* playerinfo::mutable_imei() {
  set_has_imei();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.imei)
  return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_imei() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.imei)
  if (!has_imei()) {
    return NULL;
  }
  clear_has_imei();
  return imei_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_imei(::std::string* imei) {
  if (imei != NULL) {
    set_has_imei();
  } else {
    clear_has_imei();
  }
  imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.imei)
}

// optional string devname = 27;
inline bool playerinfo::has_devname() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void playerinfo::set_has_devname() {
  _has_bits_[0] |= 0x00004000u;
}
inline void playerinfo::clear_has_devname() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void playerinfo::clear_devname() {
  devname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devname();
}
inline const ::std::string& playerinfo::devname() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.devname)
  return devname_.GetNoArena();
}
inline void playerinfo::set_devname(const ::std::string& value) {
  set_has_devname();
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.devname)
}
#if LANG_CXX11
inline void playerinfo::set_devname(::std::string&& value) {
  set_has_devname();
  devname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.devname)
}
#endif
inline void playerinfo::set_devname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devname();
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.devname)
}
inline void playerinfo::set_devname(const char* value, size_t size) {
  set_has_devname();
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.devname)
}
inline ::std::string* playerinfo::mutable_devname() {
  set_has_devname();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.devname)
  return devname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_devname() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.devname)
  if (!has_devname()) {
    return NULL;
  }
  clear_has_devname();
  return devname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_devname(::std::string* devname) {
  if (devname != NULL) {
    set_has_devname();
  } else {
    clear_has_devname();
  }
  devname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devname);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.devname)
}

// optional string ip = 28;
inline bool playerinfo::has_ip() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void playerinfo::set_has_ip() {
  _has_bits_[0] |= 0x00008000u;
}
inline void playerinfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void playerinfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& playerinfo::ip() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.ip)
  return ip_.GetNoArena();
}
inline void playerinfo::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.ip)
}
#if LANG_CXX11
inline void playerinfo::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.ip)
}
#endif
inline void playerinfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.ip)
}
inline void playerinfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.ip)
}
inline ::std::string* playerinfo::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_ip() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.ip)
  if (!has_ip()) {
    return NULL;
  }
  clear_has_ip();
  return ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.ip)
}

// optional int32 mobiletype = 29;
inline bool playerinfo::has_mobiletype() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void playerinfo::set_has_mobiletype() {
  _has_bits_[1] |= 0x00000080u;
}
inline void playerinfo::clear_has_mobiletype() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void playerinfo::clear_mobiletype() {
  mobiletype_ = 0;
  clear_has_mobiletype();
}
inline ::google::protobuf::int32 playerinfo::mobiletype() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.mobiletype)
  return mobiletype_;
}
inline void playerinfo::set_mobiletype(::google::protobuf::int32 value) {
  set_has_mobiletype();
  mobiletype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.mobiletype)
}

// optional int32 lasttime = 30;
inline bool playerinfo::has_lasttime() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void playerinfo::set_has_lasttime() {
  _has_bits_[1] |= 0x00000100u;
}
inline void playerinfo::clear_has_lasttime() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void playerinfo::clear_lasttime() {
  lasttime_ = 0;
  clear_has_lasttime();
}
inline ::google::protobuf::int32 playerinfo::lasttime() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.lasttime)
  return lasttime_;
}
inline void playerinfo::set_lasttime(::google::protobuf::int32 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.lasttime)
}

// optional int32 penulttime = 31;
inline bool playerinfo::has_penulttime() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void playerinfo::set_has_penulttime() {
  _has_bits_[1] |= 0x00000200u;
}
inline void playerinfo::clear_has_penulttime() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void playerinfo::clear_penulttime() {
  penulttime_ = 0;
  clear_has_penulttime();
}
inline ::google::protobuf::int32 playerinfo::penulttime() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.penulttime)
  return penulttime_;
}
inline void playerinfo::set_penulttime(::google::protobuf::int32 value) {
  set_has_penulttime();
  penulttime_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.penulttime)
}

// optional int32 silent = 32;
inline bool playerinfo::has_silent() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void playerinfo::set_has_silent() {
  _has_bits_[1] |= 0x00000400u;
}
inline void playerinfo::clear_has_silent() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void playerinfo::clear_silent() {
  silent_ = 0;
  clear_has_silent();
}
inline ::google::protobuf::int32 playerinfo::silent() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.silent)
  return silent_;
}
inline void playerinfo::set_silent(::google::protobuf::int32 value) {
  set_has_silent();
  silent_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.silent)
}

// optional int32 isban = 33;
inline bool playerinfo::has_isban() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void playerinfo::set_has_isban() {
  _has_bits_[1] |= 0x00000800u;
}
inline void playerinfo::clear_has_isban() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void playerinfo::clear_isban() {
  isban_ = 0;
  clear_has_isban();
}
inline ::google::protobuf::int32 playerinfo::isban() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.isban)
  return isban_;
}
inline void playerinfo::set_isban(::google::protobuf::int32 value) {
  set_has_isban();
  isban_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.isban)
}

// optional string face_1 = 34;
inline bool playerinfo::has_face_1() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void playerinfo::set_has_face_1() {
  _has_bits_[0] |= 0x00010000u;
}
inline void playerinfo::clear_has_face_1() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void playerinfo::clear_face_1() {
  face_1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_face_1();
}
inline const ::std::string& playerinfo::face_1() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.face_1)
  return face_1_.GetNoArena();
}
inline void playerinfo::set_face_1(const ::std::string& value) {
  set_has_face_1();
  face_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.face_1)
}
#if LANG_CXX11
inline void playerinfo::set_face_1(::std::string&& value) {
  set_has_face_1();
  face_1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.face_1)
}
#endif
inline void playerinfo::set_face_1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_face_1();
  face_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.face_1)
}
inline void playerinfo::set_face_1(const char* value, size_t size) {
  set_has_face_1();
  face_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.face_1)
}
inline ::std::string* playerinfo::mutable_face_1() {
  set_has_face_1();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.face_1)
  return face_1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_face_1() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.face_1)
  if (!has_face_1()) {
    return NULL;
  }
  clear_has_face_1();
  return face_1_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_face_1(::std::string* face_1) {
  if (face_1 != NULL) {
    set_has_face_1();
  } else {
    clear_has_face_1();
  }
  face_1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), face_1);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.face_1)
}

// optional string face_2 = 35;
inline bool playerinfo::has_face_2() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void playerinfo::set_has_face_2() {
  _has_bits_[0] |= 0x00020000u;
}
inline void playerinfo::clear_has_face_2() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void playerinfo::clear_face_2() {
  face_2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_face_2();
}
inline const ::std::string& playerinfo::face_2() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.face_2)
  return face_2_.GetNoArena();
}
inline void playerinfo::set_face_2(const ::std::string& value) {
  set_has_face_2();
  face_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.face_2)
}
#if LANG_CXX11
inline void playerinfo::set_face_2(::std::string&& value) {
  set_has_face_2();
  face_2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.face_2)
}
#endif
inline void playerinfo::set_face_2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_face_2();
  face_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.face_2)
}
inline void playerinfo::set_face_2(const char* value, size_t size) {
  set_has_face_2();
  face_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.face_2)
}
inline ::std::string* playerinfo::mutable_face_2() {
  set_has_face_2();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.face_2)
  return face_2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_face_2() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.face_2)
  if (!has_face_2()) {
    return NULL;
  }
  clear_has_face_2();
  return face_2_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_face_2(::std::string* face_2) {
  if (face_2 != NULL) {
    set_has_face_2();
  } else {
    clear_has_face_2();
  }
  face_2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), face_2);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.face_2)
}

// optional string face_3 = 36;
inline bool playerinfo::has_face_3() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void playerinfo::set_has_face_3() {
  _has_bits_[0] |= 0x00040000u;
}
inline void playerinfo::clear_has_face_3() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void playerinfo::clear_face_3() {
  face_3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_face_3();
}
inline const ::std::string& playerinfo::face_3() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.face_3)
  return face_3_.GetNoArena();
}
inline void playerinfo::set_face_3(const ::std::string& value) {
  set_has_face_3();
  face_3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.face_3)
}
#if LANG_CXX11
inline void playerinfo::set_face_3(::std::string&& value) {
  set_has_face_3();
  face_3_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.face_3)
}
#endif
inline void playerinfo::set_face_3(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_face_3();
  face_3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.face_3)
}
inline void playerinfo::set_face_3(const char* value, size_t size) {
  set_has_face_3();
  face_3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.face_3)
}
inline ::std::string* playerinfo::mutable_face_3() {
  set_has_face_3();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.face_3)
  return face_3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_face_3() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.face_3)
  if (!has_face_3()) {
    return NULL;
  }
  clear_has_face_3();
  return face_3_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_face_3(::std::string* face_3) {
  if (face_3 != NULL) {
    set_has_face_3();
  } else {
    clear_has_face_3();
  }
  face_3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), face_3);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.face_3)
}

// optional string face_4 = 37;
inline bool playerinfo::has_face_4() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void playerinfo::set_has_face_4() {
  _has_bits_[0] |= 0x00080000u;
}
inline void playerinfo::clear_has_face_4() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void playerinfo::clear_face_4() {
  face_4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_face_4();
}
inline const ::std::string& playerinfo::face_4() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.face_4)
  return face_4_.GetNoArena();
}
inline void playerinfo::set_face_4(const ::std::string& value) {
  set_has_face_4();
  face_4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.face_4)
}
#if LANG_CXX11
inline void playerinfo::set_face_4(::std::string&& value) {
  set_has_face_4();
  face_4_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.face_4)
}
#endif
inline void playerinfo::set_face_4(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_face_4();
  face_4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.face_4)
}
inline void playerinfo::set_face_4(const char* value, size_t size) {
  set_has_face_4();
  face_4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.face_4)
}
inline ::std::string* playerinfo::mutable_face_4() {
  set_has_face_4();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.face_4)
  return face_4_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_face_4() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.face_4)
  if (!has_face_4()) {
    return NULL;
  }
  clear_has_face_4();
  return face_4_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_face_4(::std::string* face_4) {
  if (face_4 != NULL) {
    set_has_face_4();
  } else {
    clear_has_face_4();
  }
  face_4_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), face_4);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.face_4)
}

// optional int32 isrobot = 38;
inline bool playerinfo::has_isrobot() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void playerinfo::set_has_isrobot() {
  _has_bits_[1] |= 0x00001000u;
}
inline void playerinfo::clear_has_isrobot() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void playerinfo::clear_isrobot() {
  isrobot_ = 0;
  clear_has_isrobot();
}
inline ::google::protobuf::int32 playerinfo::isrobot() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.isrobot)
  return isrobot_;
}
inline void playerinfo::set_isrobot(::google::protobuf::int32 value) {
  set_has_isrobot();
  isrobot_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.isrobot)
}

// optional int32 playtype = 39;
inline bool playerinfo::has_playtype() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void playerinfo::set_has_playtype() {
  _has_bits_[1] |= 0x00002000u;
}
inline void playerinfo::clear_has_playtype() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void playerinfo::clear_playtype() {
  playtype_ = 0;
  clear_has_playtype();
}
inline ::google::protobuf::int32 playerinfo::playtype() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.playtype)
  return playtype_;
}
inline void playerinfo::set_playtype(::google::protobuf::int32 value) {
  set_has_playtype();
  playtype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.playtype)
}

// optional string description = 40;
inline bool playerinfo::has_description() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void playerinfo::set_has_description() {
  _has_bits_[0] |= 0x00100000u;
}
inline void playerinfo::clear_has_description() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void playerinfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& playerinfo::description() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.description)
  return description_.GetNoArena();
}
inline void playerinfo::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.description)
}
#if LANG_CXX11
inline void playerinfo::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.description)
}
#endif
inline void playerinfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.description)
}
inline void playerinfo::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.description)
}
inline ::std::string* playerinfo::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_description() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.description)
  if (!has_description()) {
    return NULL;
  }
  clear_has_description();
  return description_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.description)
}

// optional string location = 41;
inline bool playerinfo::has_location() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void playerinfo::set_has_location() {
  _has_bits_[0] |= 0x00200000u;
}
inline void playerinfo::clear_has_location() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void playerinfo::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_location();
}
inline const ::std::string& playerinfo::location() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.location)
  return location_.GetNoArena();
}
inline void playerinfo::set_location(const ::std::string& value) {
  set_has_location();
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.location)
}
#if LANG_CXX11
inline void playerinfo::set_location(::std::string&& value) {
  set_has_location();
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.location)
}
#endif
inline void playerinfo::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_location();
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.location)
}
inline void playerinfo::set_location(const char* value, size_t size) {
  set_has_location();
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.location)
}
inline ::std::string* playerinfo::mutable_location() {
  set_has_location();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_location() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.location)
  if (!has_location()) {
    return NULL;
  }
  clear_has_location();
  return location_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    set_has_location();
  } else {
    clear_has_location();
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.location)
}

// optional string bankjetton = 42;
inline bool playerinfo::has_bankjetton() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void playerinfo::set_has_bankjetton() {
  _has_bits_[0] |= 0x00400000u;
}
inline void playerinfo::clear_has_bankjetton() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void playerinfo::clear_bankjetton() {
  bankjetton_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bankjetton();
}
inline const ::std::string& playerinfo::bankjetton() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.bankjetton)
  return bankjetton_.GetNoArena();
}
inline void playerinfo::set_bankjetton(const ::std::string& value) {
  set_has_bankjetton();
  bankjetton_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.bankjetton)
}
#if LANG_CXX11
inline void playerinfo::set_bankjetton(::std::string&& value) {
  set_has_bankjetton();
  bankjetton_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.bankjetton)
}
#endif
inline void playerinfo::set_bankjetton(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bankjetton();
  bankjetton_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.bankjetton)
}
inline void playerinfo::set_bankjetton(const char* value, size_t size) {
  set_has_bankjetton();
  bankjetton_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.bankjetton)
}
inline ::std::string* playerinfo::mutable_bankjetton() {
  set_has_bankjetton();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.bankjetton)
  return bankjetton_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_bankjetton() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.bankjetton)
  if (!has_bankjetton()) {
    return NULL;
  }
  clear_has_bankjetton();
  return bankjetton_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_bankjetton(::std::string* bankjetton) {
  if (bankjetton != NULL) {
    set_has_bankjetton();
  } else {
    clear_has_bankjetton();
  }
  bankjetton_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bankjetton);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.bankjetton)
}

// optional string title = 43;
inline bool playerinfo::has_title() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void playerinfo::set_has_title() {
  _has_bits_[0] |= 0x00800000u;
}
inline void playerinfo::clear_has_title() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void playerinfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& playerinfo::title() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.title)
  return title_.GetNoArena();
}
inline void playerinfo::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.title)
}
#if LANG_CXX11
inline void playerinfo::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.title)
}
#endif
inline void playerinfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.title)
}
inline void playerinfo::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.title)
}
inline ::std::string* playerinfo::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_title() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.title)
  if (!has_title()) {
    return NULL;
  }
  clear_has_title();
  return title_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.title)
}

// optional int32 blacklist = 44;
inline bool playerinfo::has_blacklist() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void playerinfo::set_has_blacklist() {
  _has_bits_[1] |= 0x00004000u;
}
inline void playerinfo::clear_has_blacklist() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void playerinfo::clear_blacklist() {
  blacklist_ = 0;
  clear_has_blacklist();
}
inline ::google::protobuf::int32 playerinfo::blacklist() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.blacklist)
  return blacklist_;
}
inline void playerinfo::set_blacklist(::google::protobuf::int32 value) {
  set_has_blacklist();
  blacklist_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.blacklist)
}

// optional int32 propertyid = 45;
inline bool playerinfo::has_propertyid() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void playerinfo::set_has_propertyid() {
  _has_bits_[1] |= 0x00008000u;
}
inline void playerinfo::clear_has_propertyid() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void playerinfo::clear_propertyid() {
  propertyid_ = 0;
  clear_has_propertyid();
}
inline ::google::protobuf::int32 playerinfo::propertyid() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.propertyid)
  return propertyid_;
}
inline void playerinfo::set_propertyid(::google::protobuf::int32 value) {
  set_has_propertyid();
  propertyid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.propertyid)
}

// optional int32 ticket = 46;
inline bool playerinfo::has_ticket() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void playerinfo::set_has_ticket() {
  _has_bits_[1] |= 0x00010000u;
}
inline void playerinfo::clear_has_ticket() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void playerinfo::clear_ticket() {
  ticket_ = 0;
  clear_has_ticket();
}
inline ::google::protobuf::int32 playerinfo::ticket() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.ticket)
  return ticket_;
}
inline void playerinfo::set_ticket(::google::protobuf::int32 value) {
  set_has_ticket();
  ticket_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.ticket)
}

// optional string location_x = 47;
inline bool playerinfo::has_location_x() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void playerinfo::set_has_location_x() {
  _has_bits_[0] |= 0x01000000u;
}
inline void playerinfo::clear_has_location_x() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void playerinfo::clear_location_x() {
  location_x_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_location_x();
}
inline const ::std::string& playerinfo::location_x() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.location_x)
  return location_x_.GetNoArena();
}
inline void playerinfo::set_location_x(const ::std::string& value) {
  set_has_location_x();
  location_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.location_x)
}
#if LANG_CXX11
inline void playerinfo::set_location_x(::std::string&& value) {
  set_has_location_x();
  location_x_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.location_x)
}
#endif
inline void playerinfo::set_location_x(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_location_x();
  location_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.location_x)
}
inline void playerinfo::set_location_x(const char* value, size_t size) {
  set_has_location_x();
  location_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.location_x)
}
inline ::std::string* playerinfo::mutable_location_x() {
  set_has_location_x();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.location_x)
  return location_x_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_location_x() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.location_x)
  if (!has_location_x()) {
    return NULL;
  }
  clear_has_location_x();
  return location_x_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_location_x(::std::string* location_x) {
  if (location_x != NULL) {
    set_has_location_x();
  } else {
    clear_has_location_x();
  }
  location_x_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location_x);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.location_x)
}

// optional string location_y = 48;
inline bool playerinfo::has_location_y() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void playerinfo::set_has_location_y() {
  _has_bits_[0] |= 0x02000000u;
}
inline void playerinfo::clear_has_location_y() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void playerinfo::clear_location_y() {
  location_y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_location_y();
}
inline const ::std::string& playerinfo::location_y() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.location_y)
  return location_y_.GetNoArena();
}
inline void playerinfo::set_location_y(const ::std::string& value) {
  set_has_location_y();
  location_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.location_y)
}
#if LANG_CXX11
inline void playerinfo::set_location_y(::std::string&& value) {
  set_has_location_y();
  location_y_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.location_y)
}
#endif
inline void playerinfo::set_location_y(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_location_y();
  location_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.location_y)
}
inline void playerinfo::set_location_y(const char* value, size_t size) {
  set_has_location_y();
  location_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.location_y)
}
inline ::std::string* playerinfo::mutable_location_y() {
  set_has_location_y();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.location_y)
  return location_y_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_location_y() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.location_y)
  if (!has_location_y()) {
    return NULL;
  }
  clear_has_location_y();
  return location_y_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_location_y(::std::string* location_y) {
  if (location_y != NULL) {
    set_has_location_y();
  } else {
    clear_has_location_y();
  }
  location_y_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location_y);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.location_y)
}

// optional string bank_password = 49;
inline bool playerinfo::has_bank_password() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void playerinfo::set_has_bank_password() {
  _has_bits_[0] |= 0x04000000u;
}
inline void playerinfo::clear_has_bank_password() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void playerinfo::clear_bank_password() {
  bank_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bank_password();
}
inline const ::std::string& playerinfo::bank_password() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.bank_password)
  return bank_password_.GetNoArena();
}
inline void playerinfo::set_bank_password(const ::std::string& value) {
  set_has_bank_password();
  bank_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.bank_password)
}
#if LANG_CXX11
inline void playerinfo::set_bank_password(::std::string&& value) {
  set_has_bank_password();
  bank_password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.bank_password)
}
#endif
inline void playerinfo::set_bank_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bank_password();
  bank_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.bank_password)
}
inline void playerinfo::set_bank_password(const char* value, size_t size) {
  set_has_bank_password();
  bank_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.bank_password)
}
inline ::std::string* playerinfo::mutable_bank_password() {
  set_has_bank_password();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.bank_password)
  return bank_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_bank_password() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.bank_password)
  if (!has_bank_password()) {
    return NULL;
  }
  clear_has_bank_password();
  return bank_password_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_bank_password(::std::string* bank_password) {
  if (bank_password != NULL) {
    set_has_bank_password();
  } else {
    clear_has_bank_password();
  }
  bank_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bank_password);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.bank_password)
}

// optional string bank_jetton = 50;
inline bool playerinfo::has_bank_jetton() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void playerinfo::set_has_bank_jetton() {
  _has_bits_[0] |= 0x08000000u;
}
inline void playerinfo::clear_has_bank_jetton() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void playerinfo::clear_bank_jetton() {
  bank_jetton_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bank_jetton();
}
inline const ::std::string& playerinfo::bank_jetton() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.bank_jetton)
  return bank_jetton_.GetNoArena();
}
inline void playerinfo::set_bank_jetton(const ::std::string& value) {
  set_has_bank_jetton();
  bank_jetton_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.bank_jetton)
}
#if LANG_CXX11
inline void playerinfo::set_bank_jetton(::std::string&& value) {
  set_has_bank_jetton();
  bank_jetton_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.bank_jetton)
}
#endif
inline void playerinfo::set_bank_jetton(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bank_jetton();
  bank_jetton_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.bank_jetton)
}
inline void playerinfo::set_bank_jetton(const char* value, size_t size) {
  set_has_bank_jetton();
  bank_jetton_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.bank_jetton)
}
inline ::std::string* playerinfo::mutable_bank_jetton() {
  set_has_bank_jetton();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.bank_jetton)
  return bank_jetton_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_bank_jetton() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.bank_jetton)
  if (!has_bank_jetton()) {
    return NULL;
  }
  clear_has_bank_jetton();
  return bank_jetton_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_bank_jetton(::std::string* bank_jetton) {
  if (bank_jetton != NULL) {
    set_has_bank_jetton();
  } else {
    clear_has_bank_jetton();
  }
  bank_jetton_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bank_jetton);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.bank_jetton)
}

// optional int32 agent1 = 51;
inline bool playerinfo::has_agent1() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void playerinfo::set_has_agent1() {
  _has_bits_[1] |= 0x00020000u;
}
inline void playerinfo::clear_has_agent1() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void playerinfo::clear_agent1() {
  agent1_ = 0;
  clear_has_agent1();
}
inline ::google::protobuf::int32 playerinfo::agent1() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.agent1)
  return agent1_;
}
inline void playerinfo::set_agent1(::google::protobuf::int32 value) {
  set_has_agent1();
  agent1_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.agent1)
}

// -------------------------------------------------------------------

// cgaccountlogin

// optional string account = 1;
inline bool cgaccountlogin::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cgaccountlogin::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cgaccountlogin::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cgaccountlogin::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& cgaccountlogin::account() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgaccountlogin.account)
  return account_.GetNoArena();
}
inline void cgaccountlogin::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.cgaccountlogin.account)
}
#if LANG_CXX11
inline void cgaccountlogin::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.cgaccountlogin.account)
}
#endif
inline void cgaccountlogin::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.cgaccountlogin.account)
}
inline void cgaccountlogin::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.cgaccountlogin.account)
}
inline ::std::string* cgaccountlogin::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:NFMsg.cgaccountlogin.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cgaccountlogin::release_account() {
  // @@protoc_insertion_point(field_release:NFMsg.cgaccountlogin.account)
  if (!has_account()) {
    return NULL;
  }
  clear_has_account();
  return account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cgaccountlogin::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.cgaccountlogin.account)
}

// optional string password = 2;
inline bool cgaccountlogin::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cgaccountlogin::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cgaccountlogin::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cgaccountlogin::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& cgaccountlogin::password() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgaccountlogin.password)
  return password_.GetNoArena();
}
inline void cgaccountlogin::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.cgaccountlogin.password)
}
#if LANG_CXX11
inline void cgaccountlogin::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.cgaccountlogin.password)
}
#endif
inline void cgaccountlogin::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.cgaccountlogin.password)
}
inline void cgaccountlogin::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.cgaccountlogin.password)
}
inline ::std::string* cgaccountlogin::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:NFMsg.cgaccountlogin.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cgaccountlogin::release_password() {
  // @@protoc_insertion_point(field_release:NFMsg.cgaccountlogin.password)
  if (!has_password()) {
    return NULL;
  }
  clear_has_password();
  return password_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cgaccountlogin::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.cgaccountlogin.password)
}

// optional string imei = 4;
inline bool cgaccountlogin::has_imei() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cgaccountlogin::set_has_imei() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cgaccountlogin::clear_has_imei() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cgaccountlogin::clear_imei() {
  imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imei();
}
inline const ::std::string& cgaccountlogin::imei() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgaccountlogin.imei)
  return imei_.GetNoArena();
}
inline void cgaccountlogin::set_imei(const ::std::string& value) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.cgaccountlogin.imei)
}
#if LANG_CXX11
inline void cgaccountlogin::set_imei(::std::string&& value) {
  set_has_imei();
  imei_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.cgaccountlogin.imei)
}
#endif
inline void cgaccountlogin::set_imei(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.cgaccountlogin.imei)
}
inline void cgaccountlogin::set_imei(const char* value, size_t size) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.cgaccountlogin.imei)
}
inline ::std::string* cgaccountlogin::mutable_imei() {
  set_has_imei();
  // @@protoc_insertion_point(field_mutable:NFMsg.cgaccountlogin.imei)
  return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cgaccountlogin::release_imei() {
  // @@protoc_insertion_point(field_release:NFMsg.cgaccountlogin.imei)
  if (!has_imei()) {
    return NULL;
  }
  clear_has_imei();
  return imei_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cgaccountlogin::set_allocated_imei(::std::string* imei) {
  if (imei != NULL) {
    set_has_imei();
  } else {
    clear_has_imei();
  }
  imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.cgaccountlogin.imei)
}

// optional string nickname = 5;
inline bool cgaccountlogin::has_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cgaccountlogin::set_has_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cgaccountlogin::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cgaccountlogin::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& cgaccountlogin::nickname() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgaccountlogin.nickname)
  return nickname_.GetNoArena();
}
inline void cgaccountlogin::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.cgaccountlogin.nickname)
}
#if LANG_CXX11
inline void cgaccountlogin::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.cgaccountlogin.nickname)
}
#endif
inline void cgaccountlogin::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.cgaccountlogin.nickname)
}
inline void cgaccountlogin::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.cgaccountlogin.nickname)
}
inline ::std::string* cgaccountlogin::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:NFMsg.cgaccountlogin.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cgaccountlogin::release_nickname() {
  // @@protoc_insertion_point(field_release:NFMsg.cgaccountlogin.nickname)
  if (!has_nickname()) {
    return NULL;
  }
  clear_has_nickname();
  return nickname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cgaccountlogin::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.cgaccountlogin.nickname)
}

// optional string devname = 6;
inline bool cgaccountlogin::has_devname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cgaccountlogin::set_has_devname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cgaccountlogin::clear_has_devname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cgaccountlogin::clear_devname() {
  devname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devname();
}
inline const ::std::string& cgaccountlogin::devname() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgaccountlogin.devname)
  return devname_.GetNoArena();
}
inline void cgaccountlogin::set_devname(const ::std::string& value) {
  set_has_devname();
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.cgaccountlogin.devname)
}
#if LANG_CXX11
inline void cgaccountlogin::set_devname(::std::string&& value) {
  set_has_devname();
  devname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.cgaccountlogin.devname)
}
#endif
inline void cgaccountlogin::set_devname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devname();
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.cgaccountlogin.devname)
}
inline void cgaccountlogin::set_devname(const char* value, size_t size) {
  set_has_devname();
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.cgaccountlogin.devname)
}
inline ::std::string* cgaccountlogin::mutable_devname() {
  set_has_devname();
  // @@protoc_insertion_point(field_mutable:NFMsg.cgaccountlogin.devname)
  return devname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cgaccountlogin::release_devname() {
  // @@protoc_insertion_point(field_release:NFMsg.cgaccountlogin.devname)
  if (!has_devname()) {
    return NULL;
  }
  clear_has_devname();
  return devname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cgaccountlogin::set_allocated_devname(::std::string* devname) {
  if (devname != NULL) {
    set_has_devname();
  } else {
    clear_has_devname();
  }
  devname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devname);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.cgaccountlogin.devname)
}

// optional string macname = 7;
inline bool cgaccountlogin::has_macname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void cgaccountlogin::set_has_macname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void cgaccountlogin::clear_has_macname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void cgaccountlogin::clear_macname() {
  macname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_macname();
}
inline const ::std::string& cgaccountlogin::macname() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgaccountlogin.macname)
  return macname_.GetNoArena();
}
inline void cgaccountlogin::set_macname(const ::std::string& value) {
  set_has_macname();
  macname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.cgaccountlogin.macname)
}
#if LANG_CXX11
inline void cgaccountlogin::set_macname(::std::string&& value) {
  set_has_macname();
  macname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.cgaccountlogin.macname)
}
#endif
inline void cgaccountlogin::set_macname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_macname();
  macname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.cgaccountlogin.macname)
}
inline void cgaccountlogin::set_macname(const char* value, size_t size) {
  set_has_macname();
  macname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.cgaccountlogin.macname)
}
inline ::std::string* cgaccountlogin::mutable_macname() {
  set_has_macname();
  // @@protoc_insertion_point(field_mutable:NFMsg.cgaccountlogin.macname)
  return macname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cgaccountlogin::release_macname() {
  // @@protoc_insertion_point(field_release:NFMsg.cgaccountlogin.macname)
  if (!has_macname()) {
    return NULL;
  }
  clear_has_macname();
  return macname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cgaccountlogin::set_allocated_macname(::std::string* macname) {
  if (macname != NULL) {
    set_has_macname();
  } else {
    clear_has_macname();
  }
  macname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macname);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.cgaccountlogin.macname)
}

// optional string channel = 8;
inline bool cgaccountlogin::has_channel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void cgaccountlogin::set_has_channel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void cgaccountlogin::clear_has_channel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void cgaccountlogin::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel();
}
inline const ::std::string& cgaccountlogin::channel() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgaccountlogin.channel)
  return channel_.GetNoArena();
}
inline void cgaccountlogin::set_channel(const ::std::string& value) {
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.cgaccountlogin.channel)
}
#if LANG_CXX11
inline void cgaccountlogin::set_channel(::std::string&& value) {
  set_has_channel();
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.cgaccountlogin.channel)
}
#endif
inline void cgaccountlogin::set_channel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.cgaccountlogin.channel)
}
inline void cgaccountlogin::set_channel(const char* value, size_t size) {
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.cgaccountlogin.channel)
}
inline ::std::string* cgaccountlogin::mutable_channel() {
  set_has_channel();
  // @@protoc_insertion_point(field_mutable:NFMsg.cgaccountlogin.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cgaccountlogin::release_channel() {
  // @@protoc_insertion_point(field_release:NFMsg.cgaccountlogin.channel)
  if (!has_channel()) {
    return NULL;
  }
  clear_has_channel();
  return channel_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cgaccountlogin::set_allocated_channel(::std::string* channel) {
  if (channel != NULL) {
    set_has_channel();
  } else {
    clear_has_channel();
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.cgaccountlogin.channel)
}

// optional string province = 9;
inline bool cgaccountlogin::has_province() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void cgaccountlogin::set_has_province() {
  _has_bits_[0] |= 0x00000080u;
}
inline void cgaccountlogin::clear_has_province() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void cgaccountlogin::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
inline const ::std::string& cgaccountlogin::province() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgaccountlogin.province)
  return province_.GetNoArena();
}
inline void cgaccountlogin::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.cgaccountlogin.province)
}
#if LANG_CXX11
inline void cgaccountlogin::set_province(::std::string&& value) {
  set_has_province();
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.cgaccountlogin.province)
}
#endif
inline void cgaccountlogin::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.cgaccountlogin.province)
}
inline void cgaccountlogin::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.cgaccountlogin.province)
}
inline ::std::string* cgaccountlogin::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:NFMsg.cgaccountlogin.province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cgaccountlogin::release_province() {
  // @@protoc_insertion_point(field_release:NFMsg.cgaccountlogin.province)
  if (!has_province()) {
    return NULL;
  }
  clear_has_province();
  return province_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cgaccountlogin::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.cgaccountlogin.province)
}

// optional string city = 10;
inline bool cgaccountlogin::has_city() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void cgaccountlogin::set_has_city() {
  _has_bits_[0] |= 0x00000100u;
}
inline void cgaccountlogin::clear_has_city() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void cgaccountlogin::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
inline const ::std::string& cgaccountlogin::city() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgaccountlogin.city)
  return city_.GetNoArena();
}
inline void cgaccountlogin::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.cgaccountlogin.city)
}
#if LANG_CXX11
inline void cgaccountlogin::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.cgaccountlogin.city)
}
#endif
inline void cgaccountlogin::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.cgaccountlogin.city)
}
inline void cgaccountlogin::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.cgaccountlogin.city)
}
inline ::std::string* cgaccountlogin::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:NFMsg.cgaccountlogin.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cgaccountlogin::release_city() {
  // @@protoc_insertion_point(field_release:NFMsg.cgaccountlogin.city)
  if (!has_city()) {
    return NULL;
  }
  clear_has_city();
  return city_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cgaccountlogin::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.cgaccountlogin.city)
}

// optional int32 mobileid = 11;
inline bool cgaccountlogin::has_mobileid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void cgaccountlogin::set_has_mobileid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void cgaccountlogin::clear_has_mobileid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void cgaccountlogin::clear_mobileid() {
  mobileid_ = 0;
  clear_has_mobileid();
}
inline ::google::protobuf::int32 cgaccountlogin::mobileid() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgaccountlogin.mobileid)
  return mobileid_;
}
inline void cgaccountlogin::set_mobileid(::google::protobuf::int32 value) {
  set_has_mobileid();
  mobileid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cgaccountlogin.mobileid)
}

// optional string phonenum = 12;
inline bool cgaccountlogin::has_phonenum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void cgaccountlogin::set_has_phonenum() {
  _has_bits_[0] |= 0x00000200u;
}
inline void cgaccountlogin::clear_has_phonenum() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void cgaccountlogin::clear_phonenum() {
  phonenum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phonenum();
}
inline const ::std::string& cgaccountlogin::phonenum() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgaccountlogin.phonenum)
  return phonenum_.GetNoArena();
}
inline void cgaccountlogin::set_phonenum(const ::std::string& value) {
  set_has_phonenum();
  phonenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.cgaccountlogin.phonenum)
}
#if LANG_CXX11
inline void cgaccountlogin::set_phonenum(::std::string&& value) {
  set_has_phonenum();
  phonenum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.cgaccountlogin.phonenum)
}
#endif
inline void cgaccountlogin::set_phonenum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phonenum();
  phonenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.cgaccountlogin.phonenum)
}
inline void cgaccountlogin::set_phonenum(const char* value, size_t size) {
  set_has_phonenum();
  phonenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.cgaccountlogin.phonenum)
}
inline ::std::string* cgaccountlogin::mutable_phonenum() {
  set_has_phonenum();
  // @@protoc_insertion_point(field_mutable:NFMsg.cgaccountlogin.phonenum)
  return phonenum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cgaccountlogin::release_phonenum() {
  // @@protoc_insertion_point(field_release:NFMsg.cgaccountlogin.phonenum)
  if (!has_phonenum()) {
    return NULL;
  }
  clear_has_phonenum();
  return phonenum_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cgaccountlogin::set_allocated_phonenum(::std::string* phonenum) {
  if (phonenum != NULL) {
    set_has_phonenum();
  } else {
    clear_has_phonenum();
  }
  phonenum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phonenum);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.cgaccountlogin.phonenum)
}

// optional int32 inviterid = 13;
inline bool cgaccountlogin::has_inviterid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void cgaccountlogin::set_has_inviterid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void cgaccountlogin::clear_has_inviterid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void cgaccountlogin::clear_inviterid() {
  inviterid_ = 0;
  clear_has_inviterid();
}
inline ::google::protobuf::int32 cgaccountlogin::inviterid() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgaccountlogin.inviterid)
  return inviterid_;
}
inline void cgaccountlogin::set_inviterid(::google::protobuf::int32 value) {
  set_has_inviterid();
  inviterid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cgaccountlogin.inviterid)
}

// optional int32 bindtype = 14;
inline bool cgaccountlogin::has_bindtype() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void cgaccountlogin::set_has_bindtype() {
  _has_bits_[0] |= 0x00020000u;
}
inline void cgaccountlogin::clear_has_bindtype() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void cgaccountlogin::clear_bindtype() {
  bindtype_ = 0;
  clear_has_bindtype();
}
inline ::google::protobuf::int32 cgaccountlogin::bindtype() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgaccountlogin.bindtype)
  return bindtype_;
}
inline void cgaccountlogin::set_bindtype(::google::protobuf::int32 value) {
  set_has_bindtype();
  bindtype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cgaccountlogin.bindtype)
}

// optional int32 pushtype = 15;
inline bool cgaccountlogin::has_pushtype() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void cgaccountlogin::set_has_pushtype() {
  _has_bits_[0] |= 0x00040000u;
}
inline void cgaccountlogin::clear_has_pushtype() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void cgaccountlogin::clear_pushtype() {
  pushtype_ = 0;
  clear_has_pushtype();
}
inline ::google::protobuf::int32 cgaccountlogin::pushtype() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgaccountlogin.pushtype)
  return pushtype_;
}
inline void cgaccountlogin::set_pushtype(::google::protobuf::int32 value) {
  set_has_pushtype();
  pushtype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cgaccountlogin.pushtype)
}

// optional string cid = 16;
inline bool cgaccountlogin::has_cid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void cgaccountlogin::set_has_cid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void cgaccountlogin::clear_has_cid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void cgaccountlogin::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cid();
}
inline const ::std::string& cgaccountlogin::cid() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgaccountlogin.cid)
  return cid_.GetNoArena();
}
inline void cgaccountlogin::set_cid(const ::std::string& value) {
  set_has_cid();
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.cgaccountlogin.cid)
}
#if LANG_CXX11
inline void cgaccountlogin::set_cid(::std::string&& value) {
  set_has_cid();
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.cgaccountlogin.cid)
}
#endif
inline void cgaccountlogin::set_cid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cid();
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.cgaccountlogin.cid)
}
inline void cgaccountlogin::set_cid(const char* value, size_t size) {
  set_has_cid();
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.cgaccountlogin.cid)
}
inline ::std::string* cgaccountlogin::mutable_cid() {
  set_has_cid();
  // @@protoc_insertion_point(field_mutable:NFMsg.cgaccountlogin.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cgaccountlogin::release_cid() {
  // @@protoc_insertion_point(field_release:NFMsg.cgaccountlogin.cid)
  if (!has_cid()) {
    return NULL;
  }
  clear_has_cid();
  return cid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cgaccountlogin::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    set_has_cid();
  } else {
    clear_has_cid();
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.cgaccountlogin.cid)
}

// optional string platformid = 17;
inline bool cgaccountlogin::has_platformid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void cgaccountlogin::set_has_platformid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void cgaccountlogin::clear_has_platformid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void cgaccountlogin::clear_platformid() {
  platformid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platformid();
}
inline const ::std::string& cgaccountlogin::platformid() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgaccountlogin.platformid)
  return platformid_.GetNoArena();
}
inline void cgaccountlogin::set_platformid(const ::std::string& value) {
  set_has_platformid();
  platformid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.cgaccountlogin.platformid)
}
#if LANG_CXX11
inline void cgaccountlogin::set_platformid(::std::string&& value) {
  set_has_platformid();
  platformid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.cgaccountlogin.platformid)
}
#endif
inline void cgaccountlogin::set_platformid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_platformid();
  platformid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.cgaccountlogin.platformid)
}
inline void cgaccountlogin::set_platformid(const char* value, size_t size) {
  set_has_platformid();
  platformid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.cgaccountlogin.platformid)
}
inline ::std::string* cgaccountlogin::mutable_platformid() {
  set_has_platformid();
  // @@protoc_insertion_point(field_mutable:NFMsg.cgaccountlogin.platformid)
  return platformid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cgaccountlogin::release_platformid() {
  // @@protoc_insertion_point(field_release:NFMsg.cgaccountlogin.platformid)
  if (!has_platformid()) {
    return NULL;
  }
  clear_has_platformid();
  return platformid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cgaccountlogin::set_allocated_platformid(::std::string* platformid) {
  if (platformid != NULL) {
    set_has_platformid();
  } else {
    clear_has_platformid();
  }
  platformid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platformid);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.cgaccountlogin.platformid)
}

// optional string bindnick = 18;
inline bool cgaccountlogin::has_bindnick() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void cgaccountlogin::set_has_bindnick() {
  _has_bits_[0] |= 0x00001000u;
}
inline void cgaccountlogin::clear_has_bindnick() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void cgaccountlogin::clear_bindnick() {
  bindnick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bindnick();
}
inline const ::std::string& cgaccountlogin::bindnick() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgaccountlogin.bindnick)
  return bindnick_.GetNoArena();
}
inline void cgaccountlogin::set_bindnick(const ::std::string& value) {
  set_has_bindnick();
  bindnick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.cgaccountlogin.bindnick)
}
#if LANG_CXX11
inline void cgaccountlogin::set_bindnick(::std::string&& value) {
  set_has_bindnick();
  bindnick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.cgaccountlogin.bindnick)
}
#endif
inline void cgaccountlogin::set_bindnick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bindnick();
  bindnick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.cgaccountlogin.bindnick)
}
inline void cgaccountlogin::set_bindnick(const char* value, size_t size) {
  set_has_bindnick();
  bindnick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.cgaccountlogin.bindnick)
}
inline ::std::string* cgaccountlogin::mutable_bindnick() {
  set_has_bindnick();
  // @@protoc_insertion_point(field_mutable:NFMsg.cgaccountlogin.bindnick)
  return bindnick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cgaccountlogin::release_bindnick() {
  // @@protoc_insertion_point(field_release:NFMsg.cgaccountlogin.bindnick)
  if (!has_bindnick()) {
    return NULL;
  }
  clear_has_bindnick();
  return bindnick_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cgaccountlogin::set_allocated_bindnick(::std::string* bindnick) {
  if (bindnick != NULL) {
    set_has_bindnick();
  } else {
    clear_has_bindnick();
  }
  bindnick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindnick);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.cgaccountlogin.bindnick)
}

// optional int32 mobiletype = 19;
inline bool cgaccountlogin::has_mobiletype() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void cgaccountlogin::set_has_mobiletype() {
  _has_bits_[0] |= 0x00080000u;
}
inline void cgaccountlogin::clear_has_mobiletype() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void cgaccountlogin::clear_mobiletype() {
  mobiletype_ = 0;
  clear_has_mobiletype();
}
inline ::google::protobuf::int32 cgaccountlogin::mobiletype() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgaccountlogin.mobiletype)
  return mobiletype_;
}
inline void cgaccountlogin::set_mobiletype(::google::protobuf::int32 value) {
  set_has_mobiletype();
  mobiletype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cgaccountlogin.mobiletype)
}

// optional int32 sex = 20;
inline bool cgaccountlogin::has_sex() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void cgaccountlogin::set_has_sex() {
  _has_bits_[0] |= 0x00100000u;
}
inline void cgaccountlogin::clear_has_sex() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void cgaccountlogin::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 cgaccountlogin::sex() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgaccountlogin.sex)
  return sex_;
}
inline void cgaccountlogin::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cgaccountlogin.sex)
}

// optional string authcode = 21;
inline bool cgaccountlogin::has_authcode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void cgaccountlogin::set_has_authcode() {
  _has_bits_[0] |= 0x00002000u;
}
inline void cgaccountlogin::clear_has_authcode() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void cgaccountlogin::clear_authcode() {
  authcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authcode();
}
inline const ::std::string& cgaccountlogin::authcode() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgaccountlogin.authcode)
  return authcode_.GetNoArena();
}
inline void cgaccountlogin::set_authcode(const ::std::string& value) {
  set_has_authcode();
  authcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.cgaccountlogin.authcode)
}
#if LANG_CXX11
inline void cgaccountlogin::set_authcode(::std::string&& value) {
  set_has_authcode();
  authcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.cgaccountlogin.authcode)
}
#endif
inline void cgaccountlogin::set_authcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_authcode();
  authcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.cgaccountlogin.authcode)
}
inline void cgaccountlogin::set_authcode(const char* value, size_t size) {
  set_has_authcode();
  authcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.cgaccountlogin.authcode)
}
inline ::std::string* cgaccountlogin::mutable_authcode() {
  set_has_authcode();
  // @@protoc_insertion_point(field_mutable:NFMsg.cgaccountlogin.authcode)
  return authcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cgaccountlogin::release_authcode() {
  // @@protoc_insertion_point(field_release:NFMsg.cgaccountlogin.authcode)
  if (!has_authcode()) {
    return NULL;
  }
  clear_has_authcode();
  return authcode_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cgaccountlogin::set_allocated_authcode(::std::string* authcode) {
  if (authcode != NULL) {
    set_has_authcode();
  } else {
    clear_has_authcode();
  }
  authcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authcode);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.cgaccountlogin.authcode)
}

// optional string email = 22;
inline bool cgaccountlogin::has_email() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void cgaccountlogin::set_has_email() {
  _has_bits_[0] |= 0x00004000u;
}
inline void cgaccountlogin::clear_has_email() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void cgaccountlogin::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& cgaccountlogin::email() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgaccountlogin.email)
  return email_.GetNoArena();
}
inline void cgaccountlogin::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.cgaccountlogin.email)
}
#if LANG_CXX11
inline void cgaccountlogin::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.cgaccountlogin.email)
}
#endif
inline void cgaccountlogin::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.cgaccountlogin.email)
}
inline void cgaccountlogin::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.cgaccountlogin.email)
}
inline ::std::string* cgaccountlogin::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:NFMsg.cgaccountlogin.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cgaccountlogin::release_email() {
  // @@protoc_insertion_point(field_release:NFMsg.cgaccountlogin.email)
  if (!has_email()) {
    return NULL;
  }
  clear_has_email();
  return email_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cgaccountlogin::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.cgaccountlogin.email)
}

// -------------------------------------------------------------------

// gcaccountlogin

// optional int32 result = 1;
inline bool gcaccountlogin::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gcaccountlogin::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gcaccountlogin::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gcaccountlogin::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gcaccountlogin::result() const {
  // @@protoc_insertion_point(field_get:NFMsg.gcaccountlogin.result)
  return result_;
}
inline void gcaccountlogin::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gcaccountlogin.result)
}

// optional .NFMsg.playerinfo pinfo = 2;
inline bool gcaccountlogin::has_pinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gcaccountlogin::set_has_pinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gcaccountlogin::clear_has_pinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gcaccountlogin::clear_pinfo() {
  if (pinfo_ != NULL) pinfo_->Clear();
  clear_has_pinfo();
}
inline const ::NFMsg::playerinfo& gcaccountlogin::_internal_pinfo() const {
  return *pinfo_;
}
inline const ::NFMsg::playerinfo& gcaccountlogin::pinfo() const {
  const ::NFMsg::playerinfo* p = pinfo_;
  // @@protoc_insertion_point(field_get:NFMsg.gcaccountlogin.pinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::playerinfo*>(
      &::NFMsg::_playerinfo_default_instance_);
}
inline ::NFMsg::playerinfo* gcaccountlogin::release_pinfo() {
  // @@protoc_insertion_point(field_release:NFMsg.gcaccountlogin.pinfo)
  clear_has_pinfo();
  ::NFMsg::playerinfo* temp = pinfo_;
  pinfo_ = NULL;
  return temp;
}
inline ::NFMsg::playerinfo* gcaccountlogin::mutable_pinfo() {
  set_has_pinfo();
  if (pinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::playerinfo>(GetArenaNoVirtual());
    pinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.gcaccountlogin.pinfo)
  return pinfo_;
}
inline void gcaccountlogin::set_allocated_pinfo(::NFMsg::playerinfo* pinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pinfo_;
  }
  if (pinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pinfo, submessage_arena);
    }
    set_has_pinfo();
  } else {
    clear_has_pinfo();
  }
  pinfo_ = pinfo;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.gcaccountlogin.pinfo)
}

// optional int32 tableid = 3;
inline bool gcaccountlogin::has_tableid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gcaccountlogin::set_has_tableid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gcaccountlogin::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gcaccountlogin::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 gcaccountlogin::tableid() const {
  // @@protoc_insertion_point(field_get:NFMsg.gcaccountlogin.tableid)
  return tableid_;
}
inline void gcaccountlogin::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gcaccountlogin.tableid)
}

// optional int32 systime = 4;
inline bool gcaccountlogin::has_systime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gcaccountlogin::set_has_systime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gcaccountlogin::clear_has_systime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gcaccountlogin::clear_systime() {
  systime_ = 0;
  clear_has_systime();
}
inline ::google::protobuf::int32 gcaccountlogin::systime() const {
  // @@protoc_insertion_point(field_get:NFMsg.gcaccountlogin.systime)
  return systime_;
}
inline void gcaccountlogin::set_systime(::google::protobuf::int32 value) {
  set_has_systime();
  systime_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gcaccountlogin.systime)
}

// optional int32 tabletype = 5;
inline bool gcaccountlogin::has_tabletype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gcaccountlogin::set_has_tabletype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gcaccountlogin::clear_has_tabletype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gcaccountlogin::clear_tabletype() {
  tabletype_ = 0;
  clear_has_tabletype();
}
inline ::google::protobuf::int32 gcaccountlogin::tabletype() const {
  // @@protoc_insertion_point(field_get:NFMsg.gcaccountlogin.tabletype)
  return tabletype_;
}
inline void gcaccountlogin::set_tabletype(::google::protobuf::int32 value) {
  set_has_tabletype();
  tabletype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gcaccountlogin.tabletype)
}

// -------------------------------------------------------------------

// cgreconnect

// optional int32 userid = 1;
inline bool cgreconnect::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cgreconnect::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cgreconnect::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cgreconnect::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 cgreconnect::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgreconnect.userid)
  return userid_;
}
inline void cgreconnect::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cgreconnect.userid)
}

// -------------------------------------------------------------------

// gcreconnect

// optional int32 result = 1;
inline bool gcreconnect::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gcreconnect::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gcreconnect::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gcreconnect::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gcreconnect::result() const {
  // @@protoc_insertion_point(field_get:NFMsg.gcreconnect.result)
  return result_;
}
inline void gcreconnect::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gcreconnect.result)
}

// optional string msgbegin = 2;
inline bool gcreconnect::has_msgbegin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gcreconnect::set_has_msgbegin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gcreconnect::clear_has_msgbegin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gcreconnect::clear_msgbegin() {
  msgbegin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgbegin();
}
inline const ::std::string& gcreconnect::msgbegin() const {
  // @@protoc_insertion_point(field_get:NFMsg.gcreconnect.msgbegin)
  return msgbegin_.GetNoArena();
}
inline void gcreconnect::set_msgbegin(const ::std::string& value) {
  set_has_msgbegin();
  msgbegin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.gcreconnect.msgbegin)
}
#if LANG_CXX11
inline void gcreconnect::set_msgbegin(::std::string&& value) {
  set_has_msgbegin();
  msgbegin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.gcreconnect.msgbegin)
}
#endif
inline void gcreconnect::set_msgbegin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgbegin();
  msgbegin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.gcreconnect.msgbegin)
}
inline void gcreconnect::set_msgbegin(const char* value, size_t size) {
  set_has_msgbegin();
  msgbegin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.gcreconnect.msgbegin)
}
inline ::std::string* gcreconnect::mutable_msgbegin() {
  set_has_msgbegin();
  // @@protoc_insertion_point(field_mutable:NFMsg.gcreconnect.msgbegin)
  return msgbegin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* gcreconnect::release_msgbegin() {
  // @@protoc_insertion_point(field_release:NFMsg.gcreconnect.msgbegin)
  if (!has_msgbegin()) {
    return NULL;
  }
  clear_has_msgbegin();
  return msgbegin_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void gcreconnect::set_allocated_msgbegin(::std::string* msgbegin) {
  if (msgbegin != NULL) {
    set_has_msgbegin();
  } else {
    clear_has_msgbegin();
  }
  msgbegin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgbegin);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.gcreconnect.msgbegin)
}

// optional int32 tableid = 3;
inline bool gcreconnect::has_tableid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gcreconnect::set_has_tableid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gcreconnect::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gcreconnect::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 gcreconnect::tableid() const {
  // @@protoc_insertion_point(field_get:NFMsg.gcreconnect.tableid)
  return tableid_;
}
inline void gcreconnect::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gcreconnect.tableid)
}

// -------------------------------------------------------------------

// cgheartbeat

// optional int32 userid = 1;
inline bool cgheartbeat::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cgheartbeat::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cgheartbeat::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cgheartbeat::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 cgheartbeat::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgheartbeat.userid)
  return userid_;
}
inline void cgheartbeat::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cgheartbeat.userid)
}

// -------------------------------------------------------------------

// gcheartbeat

// optional int32 result = 1;
inline bool gcheartbeat::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gcheartbeat::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gcheartbeat::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gcheartbeat::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gcheartbeat::result() const {
  // @@protoc_insertion_point(field_get:NFMsg.gcheartbeat.result)
  return result_;
}
inline void gcheartbeat::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gcheartbeat.result)
}

// -------------------------------------------------------------------

// gckitplayer

// optional int32 result = 1;
inline bool gckitplayer::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gckitplayer::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gckitplayer::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gckitplayer::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gckitplayer::result() const {
  // @@protoc_insertion_point(field_get:NFMsg.gckitplayer.result)
  return result_;
}
inline void gckitplayer::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gckitplayer.result)
}

// optional int32 kittype = 2;
inline bool gckitplayer::has_kittype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gckitplayer::set_has_kittype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gckitplayer::clear_has_kittype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gckitplayer::clear_kittype() {
  kittype_ = 0;
  clear_has_kittype();
}
inline ::google::protobuf::int32 gckitplayer::kittype() const {
  // @@protoc_insertion_point(field_get:NFMsg.gckitplayer.kittype)
  return kittype_;
}
inline void gckitplayer::set_kittype(::google::protobuf::int32 value) {
  set_has_kittype();
  kittype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gckitplayer.kittype)
}

// optional string msg = 3;
inline bool gckitplayer::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gckitplayer::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gckitplayer::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gckitplayer::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& gckitplayer::msg() const {
  // @@protoc_insertion_point(field_get:NFMsg.gckitplayer.msg)
  return msg_.GetNoArena();
}
inline void gckitplayer::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.gckitplayer.msg)
}
#if LANG_CXX11
inline void gckitplayer::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.gckitplayer.msg)
}
#endif
inline void gckitplayer::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.gckitplayer.msg)
}
inline void gckitplayer::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.gckitplayer.msg)
}
inline ::std::string* gckitplayer::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:NFMsg.gckitplayer.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* gckitplayer::release_msg() {
  // @@protoc_insertion_point(field_release:NFMsg.gckitplayer.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void gckitplayer::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.gckitplayer.msg)
}

// -------------------------------------------------------------------

// cgentertable

// optional int32 userid = 1;
inline bool cgentertable::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cgentertable::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cgentertable::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cgentertable::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 cgentertable::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgentertable.userid)
  return userid_;
}
inline void cgentertable::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cgentertable.userid)
}

// optional int32 tableid = 2;
inline bool cgentertable::has_tableid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cgentertable::set_has_tableid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cgentertable::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cgentertable::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 cgentertable::tableid() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgentertable.tableid)
  return tableid_;
}
inline void cgentertable::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cgentertable.tableid)
}

// optional string password = 3;
inline bool cgentertable::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cgentertable::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cgentertable::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cgentertable::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& cgentertable::password() const {
  // @@protoc_insertion_point(field_get:NFMsg.cgentertable.password)
  return password_.GetNoArena();
}
inline void cgentertable::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.cgentertable.password)
}
#if LANG_CXX11
inline void cgentertable::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.cgentertable.password)
}
#endif
inline void cgentertable::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.cgentertable.password)
}
inline void cgentertable::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.cgentertable.password)
}
inline ::std::string* cgentertable::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:NFMsg.cgentertable.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cgentertable::release_password() {
  // @@protoc_insertion_point(field_release:NFMsg.cgentertable.password)
  if (!has_password()) {
    return NULL;
  }
  clear_has_password();
  return password_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cgentertable::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.cgentertable.password)
}

// -------------------------------------------------------------------

// gcentertable

// optional int32 result = 1;
inline bool gcentertable::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gcentertable::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gcentertable::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gcentertable::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gcentertable::result() const {
  // @@protoc_insertion_point(field_get:NFMsg.gcentertable.result)
  return result_;
}
inline void gcentertable::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gcentertable.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_msg_5fhuman_2eproto
