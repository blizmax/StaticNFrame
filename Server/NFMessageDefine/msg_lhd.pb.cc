// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_lhd.proto

#include "msg_lhd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_st_5flhd_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_st_5flhd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_lhd_areainfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_st_5flhd_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_lhd_gamecount;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_st_5flhd_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_lhd_tableconfiginfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_st_5flhd_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_lhd_userinfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_st_5flhd_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_lhd_tableinfo;
}  // namespace protobuf_st_5flhd_2eproto
namespace NFMsg {
class cglhdcreatetableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cglhdcreatetable>
      _instance;
} _cglhdcreatetable_default_instance_;
class gclhdcreatetableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<gclhdcreatetable>
      _instance;
} _gclhdcreatetable_default_instance_;
class cglhdenterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cglhdenter>
      _instance;
} _cglhdenter_default_instance_;
class gclhdenterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<gclhdenter>
      _instance;
} _gclhdenter_default_instance_;
class cglhdsitdownDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cglhdsitdown>
      _instance;
} _cglhdsitdown_default_instance_;
class gclhdsitdownDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<gclhdsitdown>
      _instance;
} _gclhdsitdown_default_instance_;
class cglhdreadyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cglhdready>
      _instance;
} _cglhdready_default_instance_;
class gclhdreadyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<gclhdready>
      _instance;
} _gclhdready_default_instance_;
class cglhdstartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cglhdstart>
      _instance;
} _cglhdstart_default_instance_;
class gclhdstartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<gclhdstart>
      _instance;
} _gclhdstart_default_instance_;
class cglhdrushbankDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cglhdrushbank>
      _instance;
} _cglhdrushbank_default_instance_;
class gclhdrushbankDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<gclhdrushbank>
      _instance;
} _gclhdrushbank_default_instance_;
class gclhdcommitbankDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<gclhdcommitbank>
      _instance;
} _gclhdcommitbank_default_instance_;
class gclhdcheststartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<gclhdcheststart>
      _instance;
} _gclhdcheststart_default_instance_;
class cglhdchestareaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cglhdchestarea>
      _instance;
} _cglhdchestarea_default_instance_;
class gclhdchestareaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<gclhdchestarea>
      _instance;
} _gclhdchestarea_default_instance_;
class cglhdplayerpourDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cglhdplayerpour>
      _instance;
} _cglhdplayerpour_default_instance_;
class gclhdplayerpourDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<gclhdplayerpour>
      _instance;
} _gclhdplayerpour_default_instance_;
class gclhdblightcardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<gclhdblightcard>
      _instance;
} _gclhdblightcard_default_instance_;
class gclhdgamecountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<gclhdgamecount>
      _instance;
} _gclhdgamecount_default_instance_;
class gclhdgamefinishDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<gclhdgamefinish>
      _instance;
} _gclhdgamefinish_default_instance_;
}  // namespace NFMsg
namespace protobuf_msg_5flhd_2eproto {
static void InitDefaultscglhdcreatetable() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_cglhdcreatetable_default_instance_;
    new (ptr) ::NFMsg::cglhdcreatetable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::cglhdcreatetable::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_cglhdcreatetable =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultscglhdcreatetable}, {
      &protobuf_st_5flhd_2eproto::scc_info_lhd_tableconfiginfo.base,}};

static void InitDefaultsgclhdcreatetable() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_gclhdcreatetable_default_instance_;
    new (ptr) ::NFMsg::gclhdcreatetable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::gclhdcreatetable::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_gclhdcreatetable =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsgclhdcreatetable}, {}};

static void InitDefaultscglhdenter() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_cglhdenter_default_instance_;
    new (ptr) ::NFMsg::cglhdenter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::cglhdenter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_cglhdenter =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscglhdenter}, {}};

static void InitDefaultsgclhdenter() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_gclhdenter_default_instance_;
    new (ptr) ::NFMsg::gclhdenter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::gclhdenter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_gclhdenter =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsgclhdenter}, {
      &protobuf_st_5flhd_2eproto::scc_info_lhd_tableinfo.base,}};

static void InitDefaultscglhdsitdown() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_cglhdsitdown_default_instance_;
    new (ptr) ::NFMsg::cglhdsitdown();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::cglhdsitdown::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_cglhdsitdown =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscglhdsitdown}, {}};

static void InitDefaultsgclhdsitdown() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_gclhdsitdown_default_instance_;
    new (ptr) ::NFMsg::gclhdsitdown();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::gclhdsitdown::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_gclhdsitdown =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsgclhdsitdown}, {
      &protobuf_st_5flhd_2eproto::scc_info_lhd_userinfo.base,}};

static void InitDefaultscglhdready() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_cglhdready_default_instance_;
    new (ptr) ::NFMsg::cglhdready();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::cglhdready::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_cglhdready =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscglhdready}, {}};

static void InitDefaultsgclhdready() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_gclhdready_default_instance_;
    new (ptr) ::NFMsg::gclhdready();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::gclhdready::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_gclhdready =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsgclhdready}, {}};

static void InitDefaultscglhdstart() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_cglhdstart_default_instance_;
    new (ptr) ::NFMsg::cglhdstart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::cglhdstart::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_cglhdstart =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscglhdstart}, {}};

static void InitDefaultsgclhdstart() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_gclhdstart_default_instance_;
    new (ptr) ::NFMsg::gclhdstart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::gclhdstart::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_gclhdstart =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsgclhdstart}, {}};

static void InitDefaultscglhdrushbank() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_cglhdrushbank_default_instance_;
    new (ptr) ::NFMsg::cglhdrushbank();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::cglhdrushbank::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_cglhdrushbank =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscglhdrushbank}, {}};

static void InitDefaultsgclhdrushbank() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_gclhdrushbank_default_instance_;
    new (ptr) ::NFMsg::gclhdrushbank();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::gclhdrushbank::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_gclhdrushbank =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsgclhdrushbank}, {}};

static void InitDefaultsgclhdcommitbank() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_gclhdcommitbank_default_instance_;
    new (ptr) ::NFMsg::gclhdcommitbank();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::gclhdcommitbank::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_gclhdcommitbank =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsgclhdcommitbank}, {}};

static void InitDefaultsgclhdcheststart() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_gclhdcheststart_default_instance_;
    new (ptr) ::NFMsg::gclhdcheststart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::gclhdcheststart::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_gclhdcheststart =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsgclhdcheststart}, {}};

static void InitDefaultscglhdchestarea() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_cglhdchestarea_default_instance_;
    new (ptr) ::NFMsg::cglhdchestarea();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::cglhdchestarea::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_cglhdchestarea =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscglhdchestarea}, {}};

static void InitDefaultsgclhdchestarea() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_gclhdchestarea_default_instance_;
    new (ptr) ::NFMsg::gclhdchestarea();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::gclhdchestarea::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_gclhdchestarea =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsgclhdchestarea}, {}};

static void InitDefaultscglhdplayerpour() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_cglhdplayerpour_default_instance_;
    new (ptr) ::NFMsg::cglhdplayerpour();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::cglhdplayerpour::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_cglhdplayerpour =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscglhdplayerpour}, {}};

static void InitDefaultsgclhdplayerpour() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_gclhdplayerpour_default_instance_;
    new (ptr) ::NFMsg::gclhdplayerpour();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::gclhdplayerpour::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_gclhdplayerpour =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsgclhdplayerpour}, {}};

static void InitDefaultsgclhdblightcard() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_gclhdblightcard_default_instance_;
    new (ptr) ::NFMsg::gclhdblightcard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::gclhdblightcard::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_gclhdblightcard =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsgclhdblightcard}, {
      &protobuf_st_5flhd_2eproto::scc_info_lhd_areainfo.base,}};

static void InitDefaultsgclhdgamecount() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_gclhdgamecount_default_instance_;
    new (ptr) ::NFMsg::gclhdgamecount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::gclhdgamecount::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_gclhdgamecount =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsgclhdgamecount}, {
      &protobuf_st_5flhd_2eproto::scc_info_lhd_gamecount.base,}};

static void InitDefaultsgclhdgamefinish() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_gclhdgamefinish_default_instance_;
    new (ptr) ::NFMsg::gclhdgamefinish();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::gclhdgamefinish::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_gclhdgamefinish =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsgclhdgamefinish}, {
      &protobuf_st_5flhd_2eproto::scc_info_lhd_gamecount.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_cglhdcreatetable.base);
  ::google::protobuf::internal::InitSCC(&scc_info_gclhdcreatetable.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cglhdenter.base);
  ::google::protobuf::internal::InitSCC(&scc_info_gclhdenter.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cglhdsitdown.base);
  ::google::protobuf::internal::InitSCC(&scc_info_gclhdsitdown.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cglhdready.base);
  ::google::protobuf::internal::InitSCC(&scc_info_gclhdready.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cglhdstart.base);
  ::google::protobuf::internal::InitSCC(&scc_info_gclhdstart.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cglhdrushbank.base);
  ::google::protobuf::internal::InitSCC(&scc_info_gclhdrushbank.base);
  ::google::protobuf::internal::InitSCC(&scc_info_gclhdcommitbank.base);
  ::google::protobuf::internal::InitSCC(&scc_info_gclhdcheststart.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cglhdchestarea.base);
  ::google::protobuf::internal::InitSCC(&scc_info_gclhdchestarea.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cglhdplayerpour.base);
  ::google::protobuf::internal::InitSCC(&scc_info_gclhdplayerpour.base);
  ::google::protobuf::internal::InitSCC(&scc_info_gclhdblightcard.base);
  ::google::protobuf::internal::InitSCC(&scc_info_gclhdgamecount.base);
  ::google::protobuf::internal::InitSCC(&scc_info_gclhdgamefinish.base);
}

::google::protobuf::Metadata file_level_metadata[21];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdcreatetable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdcreatetable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdcreatetable, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdcreatetable, conf_info_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdcreatetable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdcreatetable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdcreatetable, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdcreatetable, tableid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdcreatetable, frameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdcreatetable, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdcreatetable, timemark_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdenter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdenter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdenter, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdenter, tableid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdenter, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdenter, tabletype_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdenter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdenter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdenter, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdenter, tableinfo_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdsitdown, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdsitdown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdsitdown, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdsitdown, tableid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdsitdown, chairid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdsitdown, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdsitdown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdsitdown, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdsitdown, userinfo_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdready, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdready, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdready, userid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdready, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdready, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdready, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdready, userid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdstart, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdstart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdstart, userid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdstart, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdstart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdstart, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdstart, tableid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdstart, frameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdstart, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdstart, timemark_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdrushbank, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdrushbank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdrushbank, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdrushbank, operatetype_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdrushbank, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdrushbank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdrushbank, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdrushbank, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdrushbank, operatetype_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdcommitbank, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdcommitbank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdcommitbank, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdcommitbank, bankid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdcheststart, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdcheststart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdcheststart, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdcheststart, bankid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdcheststart, tableid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdcheststart, frameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdcheststart, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdcheststart, timemark_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdchestarea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdchestarea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdchestarea, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdchestarea, chestarea_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdchestarea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdchestarea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdchestarea, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdchestarea, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdchestarea, chestarea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdchestarea, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdchestarea, timemark_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdplayerpour, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdplayerpour, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdplayerpour, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdplayerpour, pourarea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::cglhdplayerpour, pourscore_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdplayerpour, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdplayerpour, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdplayerpour, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdplayerpour, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdplayerpour, pourarea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdplayerpour, pourscore_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdblightcard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdblightcard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdblightcard, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdblightcard, area_info_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdgamecount, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdgamecount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdgamecount, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdgamecount, count_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdgamefinish, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdgamefinish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdgamefinish, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdgamefinish, starttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdgamefinish, endtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::gclhdgamefinish, gamecount_),
  0,
  1,
  2,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::NFMsg::cglhdcreatetable)},
  { 9, 19, sizeof(::NFMsg::gclhdcreatetable)},
  { 24, 33, sizeof(::NFMsg::cglhdenter)},
  { 37, 44, sizeof(::NFMsg::gclhdenter)},
  { 46, 54, sizeof(::NFMsg::cglhdsitdown)},
  { 57, 64, sizeof(::NFMsg::gclhdsitdown)},
  { 66, 72, sizeof(::NFMsg::cglhdready)},
  { 73, 80, sizeof(::NFMsg::gclhdready)},
  { 82, 88, sizeof(::NFMsg::cglhdstart)},
  { 89, 99, sizeof(::NFMsg::gclhdstart)},
  { 104, 111, sizeof(::NFMsg::cglhdrushbank)},
  { 113, 121, sizeof(::NFMsg::gclhdrushbank)},
  { 124, 131, sizeof(::NFMsg::gclhdcommitbank)},
  { 133, 144, sizeof(::NFMsg::gclhdcheststart)},
  { 150, 157, sizeof(::NFMsg::cglhdchestarea)},
  { 159, 169, sizeof(::NFMsg::gclhdchestarea)},
  { 174, 182, sizeof(::NFMsg::cglhdplayerpour)},
  { 185, 194, sizeof(::NFMsg::gclhdplayerpour)},
  { 198, 205, sizeof(::NFMsg::gclhdblightcard)},
  { 207, 214, sizeof(::NFMsg::gclhdgamecount)},
  { 216, 225, sizeof(::NFMsg::gclhdgamefinish)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_cglhdcreatetable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_gclhdcreatetable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_cglhdenter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_gclhdenter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_cglhdsitdown_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_gclhdsitdown_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_cglhdready_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_gclhdready_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_cglhdstart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_gclhdstart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_cglhdrushbank_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_gclhdrushbank_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_gclhdcommitbank_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_gclhdcheststart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_cglhdchestarea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_gclhdchestarea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_cglhdplayerpour_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_gclhdplayerpour_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_gclhdblightcard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_gclhdgamecount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_gclhdgamefinish_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "msg_lhd.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 21);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rmsg_lhd.proto\022\005NFMsg\032\014st_lhd.proto\"Q\n\020"
      "cglhdcreatetable\022\016\n\006userid\030\001 \001(\005\022-\n\tconf"
      "_info\030\002 \001(\0132\032.NFMsg.lhd_tableconfiginfo\""
      "e\n\020gclhdcreatetable\022\016\n\006result\030\001 \001(\005\022\017\n\007t"
      "ableid\030\002 \001(\005\022\017\n\007frameid\030\003 \001(\005\022\r\n\005state\030\004"
      " \001(\005\022\020\n\010timemark\030\005 \001(\005\"R\n\ncglhdenter\022\016\n\006"
      "userid\030\001 \001(\005\022\017\n\007tableid\030\002 \001(\005\022\020\n\010passwor"
      "d\030\003 \001(\t\022\021\n\ttabletype\030\004 \001(\005\"E\n\ngclhdenter"
      "\022\016\n\006result\030\001 \001(\005\022\'\n\ttableinfo\030\002 \001(\0132\024.NF"
      "Msg.lhd_tableinfo\"@\n\014cglhdsitdown\022\016\n\006use"
      "rid\030\001 \001(\005\022\017\n\007tableid\030\002 \001(\005\022\017\n\007chairid\030\003 "
      "\001(\005\"E\n\014gclhdsitdown\022\016\n\006result\030\001 \001(\005\022%\n\010u"
      "serinfo\030\002 \001(\0132\023.NFMsg.lhd_userinfo\"\034\n\ncg"
      "lhdready\022\016\n\006userid\030\001 \001(\005\",\n\ngclhdready\022\016"
      "\n\006result\030\001 \001(\005\022\016\n\006userid\030\002 \001(\005\"\034\n\ncglhds"
      "tart\022\016\n\006userid\030\001 \001(\005\"_\n\ngclhdstart\022\016\n\006re"
      "sult\030\001 \001(\005\022\017\n\007tableid\030\002 \001(\005\022\017\n\007frameid\030\003"
      " \001(\005\022\r\n\005state\030\004 \001(\005\022\020\n\010timemark\030\005 \001(\005\"4\n"
      "\rcglhdrushbank\022\016\n\006userid\030\001 \001(\005\022\023\n\013operat"
      "etype\030\002 \001(\005\"D\n\rgclhdrushbank\022\016\n\006result\030\001"
      " \001(\005\022\016\n\006userid\030\002 \001(\005\022\023\n\013operatetype\030\003 \001("
      "\005\"1\n\017gclhdcommitbank\022\016\n\006result\030\001 \001(\005\022\016\n\006"
      "bankid\030\002 \001(\005\"t\n\017gclhdcheststart\022\016\n\006resul"
      "t\030\001 \001(\005\022\016\n\006bankid\030\002 \001(\005\022\017\n\007tableid\030\003 \001(\005"
      "\022\017\n\007frameid\030\004 \001(\005\022\r\n\005state\030\005 \001(\005\022\020\n\010time"
      "mark\030\006 \001(\005\"3\n\016cglhdchestarea\022\016\n\006userid\030\001"
      " \001(\005\022\021\n\tchestarea\030\002 \001(\005\"d\n\016gclhdchestare"
      "a\022\016\n\006result\030\001 \001(\005\022\016\n\006userid\030\002 \001(\005\022\021\n\tche"
      "starea\030\003 \001(\005\022\r\n\005state\030\005 \001(\005\022\020\n\010timemark\030"
      "\006 \001(\005\"F\n\017cglhdplayerpour\022\016\n\006userid\030\001 \001(\005"
      "\022\020\n\010pourarea\030\002 \001(\005\022\021\n\tpourscore\030\003 \001(\005\"V\n"
      "\017gclhdplayerpour\022\016\n\006result\030\001 \001(\005\022\016\n\006user"
      "id\030\002 \001(\005\022\020\n\010pourarea\030\003 \001(\005\022\021\n\tpourscore\030"
      "\004 \001(\005\"I\n\017gclhdblightcard\022\016\n\006result\030\001 \001(\005"
      "\022&\n\tarea_info\030\002 \003(\0132\023.NFMsg.lhd_areainfo"
      "\"E\n\016gclhdgamecount\022\016\n\006result\030\001 \001(\005\022#\n\005co"
      "unt\030\002 \001(\0132\024.NFMsg.lhd_gamecount\"n\n\017gclhd"
      "gamefinish\022\016\n\006result\030\001 \001(\005\022\021\n\tstarttime\030"
      "\002 \001(\005\022\017\n\007endtime\030\003 \001(\005\022\'\n\tgamecount\030\004 \003("
      "\0132\024.NFMsg.lhd_gamecount"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1583);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_lhd.proto", &protobuf_RegisterTypes);
  ::protobuf_st_5flhd_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_msg_5flhd_2eproto
namespace NFMsg {

// ===================================================================

void cglhdcreatetable::InitAsDefaultInstance() {
  ::NFMsg::_cglhdcreatetable_default_instance_._instance.get_mutable()->conf_info_ = const_cast< ::NFMsg::lhd_tableconfiginfo*>(
      ::NFMsg::lhd_tableconfiginfo::internal_default_instance());
}
void cglhdcreatetable::clear_conf_info() {
  if (conf_info_ != NULL) conf_info_->Clear();
  clear_has_conf_info();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cglhdcreatetable::kUseridFieldNumber;
const int cglhdcreatetable::kConfInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cglhdcreatetable::cglhdcreatetable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5flhd_2eproto::scc_info_cglhdcreatetable.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.cglhdcreatetable)
}
cglhdcreatetable::cglhdcreatetable(const cglhdcreatetable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_conf_info()) {
    conf_info_ = new ::NFMsg::lhd_tableconfiginfo(*from.conf_info_);
  } else {
    conf_info_ = NULL;
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.cglhdcreatetable)
}

void cglhdcreatetable::SharedCtor() {
  ::memset(&conf_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&conf_info_)) + sizeof(userid_));
}

cglhdcreatetable::~cglhdcreatetable() {
  // @@protoc_insertion_point(destructor:NFMsg.cglhdcreatetable)
  SharedDtor();
}

void cglhdcreatetable::SharedDtor() {
  if (this != internal_default_instance()) delete conf_info_;
}

void cglhdcreatetable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cglhdcreatetable::descriptor() {
  ::protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cglhdcreatetable& cglhdcreatetable::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5flhd_2eproto::scc_info_cglhdcreatetable.base);
  return *internal_default_instance();
}


void cglhdcreatetable::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.cglhdcreatetable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(conf_info_ != NULL);
    conf_info_->Clear();
  }
  userid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool cglhdcreatetable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.cglhdcreatetable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .NFMsg.lhd_tableconfiginfo conf_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_conf_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.cglhdcreatetable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.cglhdcreatetable)
  return false;
#undef DO_
}

void cglhdcreatetable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.cglhdcreatetable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional .NFMsg.lhd_tableconfiginfo conf_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_conf_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.cglhdcreatetable)
}

::google::protobuf::uint8* cglhdcreatetable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.cglhdcreatetable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional .NFMsg.lhd_tableconfiginfo conf_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_conf_info(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.cglhdcreatetable)
  return target;
}

size_t cglhdcreatetable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.cglhdcreatetable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .NFMsg.lhd_tableconfiginfo conf_info = 2;
    if (has_conf_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *conf_info_);
    }

    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cglhdcreatetable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.cglhdcreatetable)
  GOOGLE_DCHECK_NE(&from, this);
  const cglhdcreatetable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cglhdcreatetable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.cglhdcreatetable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.cglhdcreatetable)
    MergeFrom(*source);
  }
}

void cglhdcreatetable::MergeFrom(const cglhdcreatetable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.cglhdcreatetable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_conf_info()->::NFMsg::lhd_tableconfiginfo::MergeFrom(from.conf_info());
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void cglhdcreatetable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.cglhdcreatetable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cglhdcreatetable::CopyFrom(const cglhdcreatetable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.cglhdcreatetable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cglhdcreatetable::IsInitialized() const {
  return true;
}

void cglhdcreatetable::Swap(cglhdcreatetable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cglhdcreatetable::InternalSwap(cglhdcreatetable* other) {
  using std::swap;
  swap(conf_info_, other->conf_info_);
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cglhdcreatetable::GetMetadata() const {
  protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void gclhdcreatetable::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int gclhdcreatetable::kResultFieldNumber;
const int gclhdcreatetable::kTableidFieldNumber;
const int gclhdcreatetable::kFrameidFieldNumber;
const int gclhdcreatetable::kStateFieldNumber;
const int gclhdcreatetable::kTimemarkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

gclhdcreatetable::gclhdcreatetable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5flhd_2eproto::scc_info_gclhdcreatetable.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.gclhdcreatetable)
}
gclhdcreatetable::gclhdcreatetable(const gclhdcreatetable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&timemark_) -
    reinterpret_cast<char*>(&result_)) + sizeof(timemark_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.gclhdcreatetable)
}

void gclhdcreatetable::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timemark_) -
      reinterpret_cast<char*>(&result_)) + sizeof(timemark_));
}

gclhdcreatetable::~gclhdcreatetable() {
  // @@protoc_insertion_point(destructor:NFMsg.gclhdcreatetable)
  SharedDtor();
}

void gclhdcreatetable::SharedDtor() {
}

void gclhdcreatetable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* gclhdcreatetable::descriptor() {
  ::protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const gclhdcreatetable& gclhdcreatetable::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5flhd_2eproto::scc_info_gclhdcreatetable.base);
  return *internal_default_instance();
}


void gclhdcreatetable::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.gclhdcreatetable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timemark_) -
        reinterpret_cast<char*>(&result_)) + sizeof(timemark_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool gclhdcreatetable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.gclhdcreatetable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tableid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tableid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 frameid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_frameid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 timemark = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_timemark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.gclhdcreatetable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.gclhdcreatetable)
  return false;
#undef DO_
}

void gclhdcreatetable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.gclhdcreatetable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 tableid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  // optional int32 frameid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frameid(), output);
  }

  // optional int32 state = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // optional int32 timemark = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timemark(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.gclhdcreatetable)
}

::google::protobuf::uint8* gclhdcreatetable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.gclhdcreatetable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 tableid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  // optional int32 frameid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->frameid(), target);
  }

  // optional int32 state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // optional int32 timemark = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timemark(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.gclhdcreatetable)
  return target;
}

size_t gclhdcreatetable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.gclhdcreatetable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 tableid = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 frameid = 3;
    if (has_frameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameid());
    }

    // optional int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 5;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gclhdcreatetable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.gclhdcreatetable)
  GOOGLE_DCHECK_NE(&from, this);
  const gclhdcreatetable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const gclhdcreatetable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.gclhdcreatetable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.gclhdcreatetable)
    MergeFrom(*source);
  }
}

void gclhdcreatetable::MergeFrom(const gclhdcreatetable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.gclhdcreatetable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      tableid_ = from.tableid_;
    }
    if (cached_has_bits & 0x00000004u) {
      frameid_ = from.frameid_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000010u) {
      timemark_ = from.timemark_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void gclhdcreatetable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.gclhdcreatetable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gclhdcreatetable::CopyFrom(const gclhdcreatetable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.gclhdcreatetable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gclhdcreatetable::IsInitialized() const {
  return true;
}

void gclhdcreatetable::Swap(gclhdcreatetable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void gclhdcreatetable::InternalSwap(gclhdcreatetable* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(tableid_, other->tableid_);
  swap(frameid_, other->frameid_);
  swap(state_, other->state_);
  swap(timemark_, other->timemark_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata gclhdcreatetable::GetMetadata() const {
  protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cglhdenter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cglhdenter::kUseridFieldNumber;
const int cglhdenter::kTableidFieldNumber;
const int cglhdenter::kPasswordFieldNumber;
const int cglhdenter::kTabletypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cglhdenter::cglhdenter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5flhd_2eproto::scc_info_cglhdenter.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.cglhdenter)
}
cglhdenter::cglhdenter(const cglhdenter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tabletype_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(tabletype_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.cglhdenter)
}

void cglhdenter::SharedCtor() {
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tabletype_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(tabletype_));
}

cglhdenter::~cglhdenter() {
  // @@protoc_insertion_point(destructor:NFMsg.cglhdenter)
  SharedDtor();
}

void cglhdenter::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void cglhdenter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cglhdenter::descriptor() {
  ::protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cglhdenter& cglhdenter::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5flhd_2eproto::scc_info_cglhdenter.base);
  return *internal_default_instance();
}


void cglhdenter::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.cglhdenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    password_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tabletype_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(tabletype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool cglhdenter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.cglhdenter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tableid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tableid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NFMsg.cglhdenter.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tabletype = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_tabletype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.cglhdenter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.cglhdenter)
  return false;
#undef DO_
}

void cglhdenter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.cglhdenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 tableid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.cglhdenter.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional int32 tabletype = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tabletype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.cglhdenter)
}

::google::protobuf::uint8* cglhdenter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.cglhdenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 tableid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.cglhdenter.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional int32 tabletype = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tabletype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.cglhdenter)
  return target;
}

size_t cglhdenter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.cglhdenter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 tableid = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 tabletype = 4;
    if (has_tabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cglhdenter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.cglhdenter)
  GOOGLE_DCHECK_NE(&from, this);
  const cglhdenter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cglhdenter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.cglhdenter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.cglhdenter)
    MergeFrom(*source);
  }
}

void cglhdenter::MergeFrom(const cglhdenter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.cglhdenter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      tableid_ = from.tableid_;
    }
    if (cached_has_bits & 0x00000008u) {
      tabletype_ = from.tabletype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void cglhdenter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.cglhdenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cglhdenter::CopyFrom(const cglhdenter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.cglhdenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cglhdenter::IsInitialized() const {
  return true;
}

void cglhdenter::Swap(cglhdenter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cglhdenter::InternalSwap(cglhdenter* other) {
  using std::swap;
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(tableid_, other->tableid_);
  swap(tabletype_, other->tabletype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cglhdenter::GetMetadata() const {
  protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void gclhdenter::InitAsDefaultInstance() {
  ::NFMsg::_gclhdenter_default_instance_._instance.get_mutable()->tableinfo_ = const_cast< ::NFMsg::lhd_tableinfo*>(
      ::NFMsg::lhd_tableinfo::internal_default_instance());
}
void gclhdenter::clear_tableinfo() {
  if (tableinfo_ != NULL) tableinfo_->Clear();
  clear_has_tableinfo();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int gclhdenter::kResultFieldNumber;
const int gclhdenter::kTableinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

gclhdenter::gclhdenter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5flhd_2eproto::scc_info_gclhdenter.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.gclhdenter)
}
gclhdenter::gclhdenter(const gclhdenter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tableinfo()) {
    tableinfo_ = new ::NFMsg::lhd_tableinfo(*from.tableinfo_);
  } else {
    tableinfo_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.gclhdenter)
}

void gclhdenter::SharedCtor() {
  ::memset(&tableinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&tableinfo_)) + sizeof(result_));
}

gclhdenter::~gclhdenter() {
  // @@protoc_insertion_point(destructor:NFMsg.gclhdenter)
  SharedDtor();
}

void gclhdenter::SharedDtor() {
  if (this != internal_default_instance()) delete tableinfo_;
}

void gclhdenter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* gclhdenter::descriptor() {
  ::protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const gclhdenter& gclhdenter::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5flhd_2eproto::scc_info_gclhdenter.base);
  return *internal_default_instance();
}


void gclhdenter::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.gclhdenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tableinfo_ != NULL);
    tableinfo_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool gclhdenter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.gclhdenter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .NFMsg.lhd_tableinfo tableinfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tableinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.gclhdenter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.gclhdenter)
  return false;
#undef DO_
}

void gclhdenter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.gclhdenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .NFMsg.lhd_tableinfo tableinfo = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_tableinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.gclhdenter)
}

::google::protobuf::uint8* gclhdenter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.gclhdenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .NFMsg.lhd_tableinfo tableinfo = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_tableinfo(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.gclhdenter)
  return target;
}

size_t gclhdenter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.gclhdenter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .NFMsg.lhd_tableinfo tableinfo = 2;
    if (has_tableinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tableinfo_);
    }

    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gclhdenter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.gclhdenter)
  GOOGLE_DCHECK_NE(&from, this);
  const gclhdenter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const gclhdenter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.gclhdenter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.gclhdenter)
    MergeFrom(*source);
  }
}

void gclhdenter::MergeFrom(const gclhdenter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.gclhdenter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_tableinfo()->::NFMsg::lhd_tableinfo::MergeFrom(from.tableinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void gclhdenter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.gclhdenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gclhdenter::CopyFrom(const gclhdenter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.gclhdenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gclhdenter::IsInitialized() const {
  return true;
}

void gclhdenter::Swap(gclhdenter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void gclhdenter::InternalSwap(gclhdenter* other) {
  using std::swap;
  swap(tableinfo_, other->tableinfo_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata gclhdenter::GetMetadata() const {
  protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cglhdsitdown::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cglhdsitdown::kUseridFieldNumber;
const int cglhdsitdown::kTableidFieldNumber;
const int cglhdsitdown::kChairidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cglhdsitdown::cglhdsitdown()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5flhd_2eproto::scc_info_cglhdsitdown.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.cglhdsitdown)
}
cglhdsitdown::cglhdsitdown(const cglhdsitdown& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&chairid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(chairid_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.cglhdsitdown)
}

void cglhdsitdown::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chairid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(chairid_));
}

cglhdsitdown::~cglhdsitdown() {
  // @@protoc_insertion_point(destructor:NFMsg.cglhdsitdown)
  SharedDtor();
}

void cglhdsitdown::SharedDtor() {
}

void cglhdsitdown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cglhdsitdown::descriptor() {
  ::protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cglhdsitdown& cglhdsitdown::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5flhd_2eproto::scc_info_cglhdsitdown.base);
  return *internal_default_instance();
}


void cglhdsitdown::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.cglhdsitdown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chairid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(chairid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool cglhdsitdown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.cglhdsitdown)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tableid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tableid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chairid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_chairid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.cglhdsitdown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.cglhdsitdown)
  return false;
#undef DO_
}

void cglhdsitdown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.cglhdsitdown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 tableid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  // optional int32 chairid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chairid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.cglhdsitdown)
}

::google::protobuf::uint8* cglhdsitdown::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.cglhdsitdown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 tableid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  // optional int32 chairid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chairid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.cglhdsitdown)
  return target;
}

size_t cglhdsitdown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.cglhdsitdown)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 tableid = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 chairid = 3;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cglhdsitdown::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.cglhdsitdown)
  GOOGLE_DCHECK_NE(&from, this);
  const cglhdsitdown* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cglhdsitdown>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.cglhdsitdown)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.cglhdsitdown)
    MergeFrom(*source);
  }
}

void cglhdsitdown::MergeFrom(const cglhdsitdown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.cglhdsitdown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      tableid_ = from.tableid_;
    }
    if (cached_has_bits & 0x00000004u) {
      chairid_ = from.chairid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void cglhdsitdown::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.cglhdsitdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cglhdsitdown::CopyFrom(const cglhdsitdown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.cglhdsitdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cglhdsitdown::IsInitialized() const {
  return true;
}

void cglhdsitdown::Swap(cglhdsitdown* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cglhdsitdown::InternalSwap(cglhdsitdown* other) {
  using std::swap;
  swap(userid_, other->userid_);
  swap(tableid_, other->tableid_);
  swap(chairid_, other->chairid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cglhdsitdown::GetMetadata() const {
  protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void gclhdsitdown::InitAsDefaultInstance() {
  ::NFMsg::_gclhdsitdown_default_instance_._instance.get_mutable()->userinfo_ = const_cast< ::NFMsg::lhd_userinfo*>(
      ::NFMsg::lhd_userinfo::internal_default_instance());
}
void gclhdsitdown::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->Clear();
  clear_has_userinfo();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int gclhdsitdown::kResultFieldNumber;
const int gclhdsitdown::kUserinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

gclhdsitdown::gclhdsitdown()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5flhd_2eproto::scc_info_gclhdsitdown.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.gclhdsitdown)
}
gclhdsitdown::gclhdsitdown(const gclhdsitdown& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_userinfo()) {
    userinfo_ = new ::NFMsg::lhd_userinfo(*from.userinfo_);
  } else {
    userinfo_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.gclhdsitdown)
}

void gclhdsitdown::SharedCtor() {
  ::memset(&userinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&userinfo_)) + sizeof(result_));
}

gclhdsitdown::~gclhdsitdown() {
  // @@protoc_insertion_point(destructor:NFMsg.gclhdsitdown)
  SharedDtor();
}

void gclhdsitdown::SharedDtor() {
  if (this != internal_default_instance()) delete userinfo_;
}

void gclhdsitdown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* gclhdsitdown::descriptor() {
  ::protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const gclhdsitdown& gclhdsitdown::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5flhd_2eproto::scc_info_gclhdsitdown.base);
  return *internal_default_instance();
}


void gclhdsitdown::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.gclhdsitdown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(userinfo_ != NULL);
    userinfo_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool gclhdsitdown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.gclhdsitdown)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .NFMsg.lhd_userinfo userinfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.gclhdsitdown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.gclhdsitdown)
  return false;
#undef DO_
}

void gclhdsitdown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.gclhdsitdown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .NFMsg.lhd_userinfo userinfo = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_userinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.gclhdsitdown)
}

::google::protobuf::uint8* gclhdsitdown::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.gclhdsitdown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .NFMsg.lhd_userinfo userinfo = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_userinfo(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.gclhdsitdown)
  return target;
}

size_t gclhdsitdown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.gclhdsitdown)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .NFMsg.lhd_userinfo userinfo = 2;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *userinfo_);
    }

    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gclhdsitdown::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.gclhdsitdown)
  GOOGLE_DCHECK_NE(&from, this);
  const gclhdsitdown* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const gclhdsitdown>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.gclhdsitdown)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.gclhdsitdown)
    MergeFrom(*source);
  }
}

void gclhdsitdown::MergeFrom(const gclhdsitdown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.gclhdsitdown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_userinfo()->::NFMsg::lhd_userinfo::MergeFrom(from.userinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void gclhdsitdown::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.gclhdsitdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gclhdsitdown::CopyFrom(const gclhdsitdown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.gclhdsitdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gclhdsitdown::IsInitialized() const {
  return true;
}

void gclhdsitdown::Swap(gclhdsitdown* other) {
  if (other == this) return;
  InternalSwap(other);
}
void gclhdsitdown::InternalSwap(gclhdsitdown* other) {
  using std::swap;
  swap(userinfo_, other->userinfo_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata gclhdsitdown::GetMetadata() const {
  protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cglhdready::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cglhdready::kUseridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cglhdready::cglhdready()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5flhd_2eproto::scc_info_cglhdready.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.cglhdready)
}
cglhdready::cglhdready(const cglhdready& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.cglhdready)
}

void cglhdready::SharedCtor() {
  userid_ = 0;
}

cglhdready::~cglhdready() {
  // @@protoc_insertion_point(destructor:NFMsg.cglhdready)
  SharedDtor();
}

void cglhdready::SharedDtor() {
}

void cglhdready::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cglhdready::descriptor() {
  ::protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cglhdready& cglhdready::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5flhd_2eproto::scc_info_cglhdready.base);
  return *internal_default_instance();
}


void cglhdready::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.cglhdready)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool cglhdready::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.cglhdready)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.cglhdready)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.cglhdready)
  return false;
#undef DO_
}

void cglhdready::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.cglhdready)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.cglhdready)
}

::google::protobuf::uint8* cglhdready::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.cglhdready)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.cglhdready)
  return target;
}

size_t cglhdready::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.cglhdready)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 userid = 1;
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cglhdready::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.cglhdready)
  GOOGLE_DCHECK_NE(&from, this);
  const cglhdready* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cglhdready>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.cglhdready)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.cglhdready)
    MergeFrom(*source);
  }
}

void cglhdready::MergeFrom(const cglhdready& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.cglhdready)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_userid()) {
    set_userid(from.userid());
  }
}

void cglhdready::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.cglhdready)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cglhdready::CopyFrom(const cglhdready& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.cglhdready)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cglhdready::IsInitialized() const {
  return true;
}

void cglhdready::Swap(cglhdready* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cglhdready::InternalSwap(cglhdready* other) {
  using std::swap;
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cglhdready::GetMetadata() const {
  protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void gclhdready::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int gclhdready::kResultFieldNumber;
const int gclhdready::kUseridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

gclhdready::gclhdready()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5flhd_2eproto::scc_info_gclhdready.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.gclhdready)
}
gclhdready::gclhdready(const gclhdready& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.gclhdready)
}

void gclhdready::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(userid_));
}

gclhdready::~gclhdready() {
  // @@protoc_insertion_point(destructor:NFMsg.gclhdready)
  SharedDtor();
}

void gclhdready::SharedDtor() {
}

void gclhdready::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* gclhdready::descriptor() {
  ::protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const gclhdready& gclhdready::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5flhd_2eproto::scc_info_gclhdready.base);
  return *internal_default_instance();
}


void gclhdready::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.gclhdready)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&userid_) -
        reinterpret_cast<char*>(&result_)) + sizeof(userid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool gclhdready::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.gclhdready)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 userid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.gclhdready)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.gclhdready)
  return false;
#undef DO_
}

void gclhdready::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.gclhdready)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 userid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.gclhdready)
}

::google::protobuf::uint8* gclhdready::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.gclhdready)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 userid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.gclhdready)
  return target;
}

size_t gclhdready::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.gclhdready)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gclhdready::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.gclhdready)
  GOOGLE_DCHECK_NE(&from, this);
  const gclhdready* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const gclhdready>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.gclhdready)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.gclhdready)
    MergeFrom(*source);
  }
}

void gclhdready::MergeFrom(const gclhdready& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.gclhdready)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void gclhdready::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.gclhdready)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gclhdready::CopyFrom(const gclhdready& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.gclhdready)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gclhdready::IsInitialized() const {
  return true;
}

void gclhdready::Swap(gclhdready* other) {
  if (other == this) return;
  InternalSwap(other);
}
void gclhdready::InternalSwap(gclhdready* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata gclhdready::GetMetadata() const {
  protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cglhdstart::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cglhdstart::kUseridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cglhdstart::cglhdstart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5flhd_2eproto::scc_info_cglhdstart.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.cglhdstart)
}
cglhdstart::cglhdstart(const cglhdstart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.cglhdstart)
}

void cglhdstart::SharedCtor() {
  userid_ = 0;
}

cglhdstart::~cglhdstart() {
  // @@protoc_insertion_point(destructor:NFMsg.cglhdstart)
  SharedDtor();
}

void cglhdstart::SharedDtor() {
}

void cglhdstart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cglhdstart::descriptor() {
  ::protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cglhdstart& cglhdstart::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5flhd_2eproto::scc_info_cglhdstart.base);
  return *internal_default_instance();
}


void cglhdstart::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.cglhdstart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool cglhdstart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.cglhdstart)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.cglhdstart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.cglhdstart)
  return false;
#undef DO_
}

void cglhdstart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.cglhdstart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.cglhdstart)
}

::google::protobuf::uint8* cglhdstart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.cglhdstart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.cglhdstart)
  return target;
}

size_t cglhdstart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.cglhdstart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 userid = 1;
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cglhdstart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.cglhdstart)
  GOOGLE_DCHECK_NE(&from, this);
  const cglhdstart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cglhdstart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.cglhdstart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.cglhdstart)
    MergeFrom(*source);
  }
}

void cglhdstart::MergeFrom(const cglhdstart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.cglhdstart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_userid()) {
    set_userid(from.userid());
  }
}

void cglhdstart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.cglhdstart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cglhdstart::CopyFrom(const cglhdstart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.cglhdstart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cglhdstart::IsInitialized() const {
  return true;
}

void cglhdstart::Swap(cglhdstart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cglhdstart::InternalSwap(cglhdstart* other) {
  using std::swap;
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cglhdstart::GetMetadata() const {
  protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void gclhdstart::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int gclhdstart::kResultFieldNumber;
const int gclhdstart::kTableidFieldNumber;
const int gclhdstart::kFrameidFieldNumber;
const int gclhdstart::kStateFieldNumber;
const int gclhdstart::kTimemarkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

gclhdstart::gclhdstart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5flhd_2eproto::scc_info_gclhdstart.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.gclhdstart)
}
gclhdstart::gclhdstart(const gclhdstart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&timemark_) -
    reinterpret_cast<char*>(&result_)) + sizeof(timemark_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.gclhdstart)
}

void gclhdstart::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timemark_) -
      reinterpret_cast<char*>(&result_)) + sizeof(timemark_));
}

gclhdstart::~gclhdstart() {
  // @@protoc_insertion_point(destructor:NFMsg.gclhdstart)
  SharedDtor();
}

void gclhdstart::SharedDtor() {
}

void gclhdstart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* gclhdstart::descriptor() {
  ::protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const gclhdstart& gclhdstart::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5flhd_2eproto::scc_info_gclhdstart.base);
  return *internal_default_instance();
}


void gclhdstart::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.gclhdstart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timemark_) -
        reinterpret_cast<char*>(&result_)) + sizeof(timemark_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool gclhdstart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.gclhdstart)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tableid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tableid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 frameid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_frameid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 timemark = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_timemark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.gclhdstart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.gclhdstart)
  return false;
#undef DO_
}

void gclhdstart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.gclhdstart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 tableid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  // optional int32 frameid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frameid(), output);
  }

  // optional int32 state = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // optional int32 timemark = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timemark(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.gclhdstart)
}

::google::protobuf::uint8* gclhdstart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.gclhdstart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 tableid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  // optional int32 frameid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->frameid(), target);
  }

  // optional int32 state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // optional int32 timemark = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timemark(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.gclhdstart)
  return target;
}

size_t gclhdstart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.gclhdstart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 tableid = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 frameid = 3;
    if (has_frameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameid());
    }

    // optional int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 5;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gclhdstart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.gclhdstart)
  GOOGLE_DCHECK_NE(&from, this);
  const gclhdstart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const gclhdstart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.gclhdstart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.gclhdstart)
    MergeFrom(*source);
  }
}

void gclhdstart::MergeFrom(const gclhdstart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.gclhdstart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      tableid_ = from.tableid_;
    }
    if (cached_has_bits & 0x00000004u) {
      frameid_ = from.frameid_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000010u) {
      timemark_ = from.timemark_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void gclhdstart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.gclhdstart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gclhdstart::CopyFrom(const gclhdstart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.gclhdstart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gclhdstart::IsInitialized() const {
  return true;
}

void gclhdstart::Swap(gclhdstart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void gclhdstart::InternalSwap(gclhdstart* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(tableid_, other->tableid_);
  swap(frameid_, other->frameid_);
  swap(state_, other->state_);
  swap(timemark_, other->timemark_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata gclhdstart::GetMetadata() const {
  protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cglhdrushbank::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cglhdrushbank::kUseridFieldNumber;
const int cglhdrushbank::kOperatetypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cglhdrushbank::cglhdrushbank()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5flhd_2eproto::scc_info_cglhdrushbank.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.cglhdrushbank)
}
cglhdrushbank::cglhdrushbank(const cglhdrushbank& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&operatetype_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(operatetype_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.cglhdrushbank)
}

void cglhdrushbank::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operatetype_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(operatetype_));
}

cglhdrushbank::~cglhdrushbank() {
  // @@protoc_insertion_point(destructor:NFMsg.cglhdrushbank)
  SharedDtor();
}

void cglhdrushbank::SharedDtor() {
}

void cglhdrushbank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cglhdrushbank::descriptor() {
  ::protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cglhdrushbank& cglhdrushbank::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5flhd_2eproto::scc_info_cglhdrushbank.base);
  return *internal_default_instance();
}


void cglhdrushbank::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.cglhdrushbank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&operatetype_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(operatetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool cglhdrushbank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.cglhdrushbank)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 operatetype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_operatetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operatetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.cglhdrushbank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.cglhdrushbank)
  return false;
#undef DO_
}

void cglhdrushbank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.cglhdrushbank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 operatetype = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operatetype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.cglhdrushbank)
}

::google::protobuf::uint8* cglhdrushbank::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.cglhdrushbank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 operatetype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operatetype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.cglhdrushbank)
  return target;
}

size_t cglhdrushbank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.cglhdrushbank)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 operatetype = 2;
    if (has_operatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operatetype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cglhdrushbank::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.cglhdrushbank)
  GOOGLE_DCHECK_NE(&from, this);
  const cglhdrushbank* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cglhdrushbank>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.cglhdrushbank)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.cglhdrushbank)
    MergeFrom(*source);
  }
}

void cglhdrushbank::MergeFrom(const cglhdrushbank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.cglhdrushbank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      operatetype_ = from.operatetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void cglhdrushbank::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.cglhdrushbank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cglhdrushbank::CopyFrom(const cglhdrushbank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.cglhdrushbank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cglhdrushbank::IsInitialized() const {
  return true;
}

void cglhdrushbank::Swap(cglhdrushbank* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cglhdrushbank::InternalSwap(cglhdrushbank* other) {
  using std::swap;
  swap(userid_, other->userid_);
  swap(operatetype_, other->operatetype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cglhdrushbank::GetMetadata() const {
  protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void gclhdrushbank::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int gclhdrushbank::kResultFieldNumber;
const int gclhdrushbank::kUseridFieldNumber;
const int gclhdrushbank::kOperatetypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

gclhdrushbank::gclhdrushbank()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5flhd_2eproto::scc_info_gclhdrushbank.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.gclhdrushbank)
}
gclhdrushbank::gclhdrushbank(const gclhdrushbank& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&operatetype_) -
    reinterpret_cast<char*>(&result_)) + sizeof(operatetype_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.gclhdrushbank)
}

void gclhdrushbank::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operatetype_) -
      reinterpret_cast<char*>(&result_)) + sizeof(operatetype_));
}

gclhdrushbank::~gclhdrushbank() {
  // @@protoc_insertion_point(destructor:NFMsg.gclhdrushbank)
  SharedDtor();
}

void gclhdrushbank::SharedDtor() {
}

void gclhdrushbank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* gclhdrushbank::descriptor() {
  ::protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const gclhdrushbank& gclhdrushbank::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5flhd_2eproto::scc_info_gclhdrushbank.base);
  return *internal_default_instance();
}


void gclhdrushbank::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.gclhdrushbank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&operatetype_) -
        reinterpret_cast<char*>(&result_)) + sizeof(operatetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool gclhdrushbank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.gclhdrushbank)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 userid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 operatetype = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_operatetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operatetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.gclhdrushbank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.gclhdrushbank)
  return false;
#undef DO_
}

void gclhdrushbank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.gclhdrushbank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 userid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional int32 operatetype = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->operatetype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.gclhdrushbank)
}

::google::protobuf::uint8* gclhdrushbank::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.gclhdrushbank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 userid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // optional int32 operatetype = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->operatetype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.gclhdrushbank)
  return target;
}

size_t gclhdrushbank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.gclhdrushbank)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 operatetype = 3;
    if (has_operatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operatetype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gclhdrushbank::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.gclhdrushbank)
  GOOGLE_DCHECK_NE(&from, this);
  const gclhdrushbank* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const gclhdrushbank>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.gclhdrushbank)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.gclhdrushbank)
    MergeFrom(*source);
  }
}

void gclhdrushbank::MergeFrom(const gclhdrushbank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.gclhdrushbank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      operatetype_ = from.operatetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void gclhdrushbank::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.gclhdrushbank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gclhdrushbank::CopyFrom(const gclhdrushbank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.gclhdrushbank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gclhdrushbank::IsInitialized() const {
  return true;
}

void gclhdrushbank::Swap(gclhdrushbank* other) {
  if (other == this) return;
  InternalSwap(other);
}
void gclhdrushbank::InternalSwap(gclhdrushbank* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(userid_, other->userid_);
  swap(operatetype_, other->operatetype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata gclhdrushbank::GetMetadata() const {
  protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void gclhdcommitbank::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int gclhdcommitbank::kResultFieldNumber;
const int gclhdcommitbank::kBankidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

gclhdcommitbank::gclhdcommitbank()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5flhd_2eproto::scc_info_gclhdcommitbank.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.gclhdcommitbank)
}
gclhdcommitbank::gclhdcommitbank(const gclhdcommitbank& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&bankid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(bankid_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.gclhdcommitbank)
}

void gclhdcommitbank::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bankid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(bankid_));
}

gclhdcommitbank::~gclhdcommitbank() {
  // @@protoc_insertion_point(destructor:NFMsg.gclhdcommitbank)
  SharedDtor();
}

void gclhdcommitbank::SharedDtor() {
}

void gclhdcommitbank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* gclhdcommitbank::descriptor() {
  ::protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const gclhdcommitbank& gclhdcommitbank::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5flhd_2eproto::scc_info_gclhdcommitbank.base);
  return *internal_default_instance();
}


void gclhdcommitbank::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.gclhdcommitbank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bankid_) -
        reinterpret_cast<char*>(&result_)) + sizeof(bankid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool gclhdcommitbank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.gclhdcommitbank)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bankid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bankid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.gclhdcommitbank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.gclhdcommitbank)
  return false;
#undef DO_
}

void gclhdcommitbank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.gclhdcommitbank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 bankid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bankid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.gclhdcommitbank)
}

::google::protobuf::uint8* gclhdcommitbank::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.gclhdcommitbank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 bankid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bankid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.gclhdcommitbank)
  return target;
}

size_t gclhdcommitbank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.gclhdcommitbank)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 bankid = 2;
    if (has_bankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gclhdcommitbank::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.gclhdcommitbank)
  GOOGLE_DCHECK_NE(&from, this);
  const gclhdcommitbank* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const gclhdcommitbank>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.gclhdcommitbank)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.gclhdcommitbank)
    MergeFrom(*source);
  }
}

void gclhdcommitbank::MergeFrom(const gclhdcommitbank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.gclhdcommitbank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      bankid_ = from.bankid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void gclhdcommitbank::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.gclhdcommitbank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gclhdcommitbank::CopyFrom(const gclhdcommitbank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.gclhdcommitbank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gclhdcommitbank::IsInitialized() const {
  return true;
}

void gclhdcommitbank::Swap(gclhdcommitbank* other) {
  if (other == this) return;
  InternalSwap(other);
}
void gclhdcommitbank::InternalSwap(gclhdcommitbank* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(bankid_, other->bankid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata gclhdcommitbank::GetMetadata() const {
  protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void gclhdcheststart::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int gclhdcheststart::kResultFieldNumber;
const int gclhdcheststart::kBankidFieldNumber;
const int gclhdcheststart::kTableidFieldNumber;
const int gclhdcheststart::kFrameidFieldNumber;
const int gclhdcheststart::kStateFieldNumber;
const int gclhdcheststart::kTimemarkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

gclhdcheststart::gclhdcheststart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5flhd_2eproto::scc_info_gclhdcheststart.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.gclhdcheststart)
}
gclhdcheststart::gclhdcheststart(const gclhdcheststart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&timemark_) -
    reinterpret_cast<char*>(&result_)) + sizeof(timemark_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.gclhdcheststart)
}

void gclhdcheststart::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timemark_) -
      reinterpret_cast<char*>(&result_)) + sizeof(timemark_));
}

gclhdcheststart::~gclhdcheststart() {
  // @@protoc_insertion_point(destructor:NFMsg.gclhdcheststart)
  SharedDtor();
}

void gclhdcheststart::SharedDtor() {
}

void gclhdcheststart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* gclhdcheststart::descriptor() {
  ::protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const gclhdcheststart& gclhdcheststart::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5flhd_2eproto::scc_info_gclhdcheststart.base);
  return *internal_default_instance();
}


void gclhdcheststart::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.gclhdcheststart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timemark_) -
        reinterpret_cast<char*>(&result_)) + sizeof(timemark_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool gclhdcheststart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.gclhdcheststart)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bankid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bankid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tableid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_tableid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 frameid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_frameid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 timemark = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_timemark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.gclhdcheststart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.gclhdcheststart)
  return false;
#undef DO_
}

void gclhdcheststart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.gclhdcheststart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 bankid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bankid(), output);
  }

  // optional int32 tableid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tableid(), output);
  }

  // optional int32 frameid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->frameid(), output);
  }

  // optional int32 state = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }

  // optional int32 timemark = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->timemark(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.gclhdcheststart)
}

::google::protobuf::uint8* gclhdcheststart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.gclhdcheststart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 bankid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bankid(), target);
  }

  // optional int32 tableid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tableid(), target);
  }

  // optional int32 frameid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->frameid(), target);
  }

  // optional int32 state = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state(), target);
  }

  // optional int32 timemark = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->timemark(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.gclhdcheststart)
  return target;
}

size_t gclhdcheststart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.gclhdcheststart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 bankid = 2;
    if (has_bankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankid());
    }

    // optional int32 tableid = 3;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 frameid = 4;
    if (has_frameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameid());
    }

    // optional int32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 6;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gclhdcheststart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.gclhdcheststart)
  GOOGLE_DCHECK_NE(&from, this);
  const gclhdcheststart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const gclhdcheststart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.gclhdcheststart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.gclhdcheststart)
    MergeFrom(*source);
  }
}

void gclhdcheststart::MergeFrom(const gclhdcheststart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.gclhdcheststart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      bankid_ = from.bankid_;
    }
    if (cached_has_bits & 0x00000004u) {
      tableid_ = from.tableid_;
    }
    if (cached_has_bits & 0x00000008u) {
      frameid_ = from.frameid_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000020u) {
      timemark_ = from.timemark_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void gclhdcheststart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.gclhdcheststart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gclhdcheststart::CopyFrom(const gclhdcheststart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.gclhdcheststart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gclhdcheststart::IsInitialized() const {
  return true;
}

void gclhdcheststart::Swap(gclhdcheststart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void gclhdcheststart::InternalSwap(gclhdcheststart* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(bankid_, other->bankid_);
  swap(tableid_, other->tableid_);
  swap(frameid_, other->frameid_);
  swap(state_, other->state_);
  swap(timemark_, other->timemark_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata gclhdcheststart::GetMetadata() const {
  protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cglhdchestarea::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cglhdchestarea::kUseridFieldNumber;
const int cglhdchestarea::kChestareaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cglhdchestarea::cglhdchestarea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5flhd_2eproto::scc_info_cglhdchestarea.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.cglhdchestarea)
}
cglhdchestarea::cglhdchestarea(const cglhdchestarea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&chestarea_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(chestarea_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.cglhdchestarea)
}

void cglhdchestarea::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chestarea_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(chestarea_));
}

cglhdchestarea::~cglhdchestarea() {
  // @@protoc_insertion_point(destructor:NFMsg.cglhdchestarea)
  SharedDtor();
}

void cglhdchestarea::SharedDtor() {
}

void cglhdchestarea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cglhdchestarea::descriptor() {
  ::protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cglhdchestarea& cglhdchestarea::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5flhd_2eproto::scc_info_cglhdchestarea.base);
  return *internal_default_instance();
}


void cglhdchestarea::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.cglhdchestarea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chestarea_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(chestarea_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool cglhdchestarea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.cglhdchestarea)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chestarea = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_chestarea();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chestarea_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.cglhdchestarea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.cglhdchestarea)
  return false;
#undef DO_
}

void cglhdchestarea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.cglhdchestarea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 chestarea = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chestarea(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.cglhdchestarea)
}

::google::protobuf::uint8* cglhdchestarea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.cglhdchestarea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 chestarea = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chestarea(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.cglhdchestarea)
  return target;
}

size_t cglhdchestarea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.cglhdchestarea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 chestarea = 2;
    if (has_chestarea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chestarea());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cglhdchestarea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.cglhdchestarea)
  GOOGLE_DCHECK_NE(&from, this);
  const cglhdchestarea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cglhdchestarea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.cglhdchestarea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.cglhdchestarea)
    MergeFrom(*source);
  }
}

void cglhdchestarea::MergeFrom(const cglhdchestarea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.cglhdchestarea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      chestarea_ = from.chestarea_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void cglhdchestarea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.cglhdchestarea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cglhdchestarea::CopyFrom(const cglhdchestarea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.cglhdchestarea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cglhdchestarea::IsInitialized() const {
  return true;
}

void cglhdchestarea::Swap(cglhdchestarea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cglhdchestarea::InternalSwap(cglhdchestarea* other) {
  using std::swap;
  swap(userid_, other->userid_);
  swap(chestarea_, other->chestarea_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cglhdchestarea::GetMetadata() const {
  protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void gclhdchestarea::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int gclhdchestarea::kResultFieldNumber;
const int gclhdchestarea::kUseridFieldNumber;
const int gclhdchestarea::kChestareaFieldNumber;
const int gclhdchestarea::kStateFieldNumber;
const int gclhdchestarea::kTimemarkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

gclhdchestarea::gclhdchestarea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5flhd_2eproto::scc_info_gclhdchestarea.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.gclhdchestarea)
}
gclhdchestarea::gclhdchestarea(const gclhdchestarea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&timemark_) -
    reinterpret_cast<char*>(&result_)) + sizeof(timemark_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.gclhdchestarea)
}

void gclhdchestarea::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timemark_) -
      reinterpret_cast<char*>(&result_)) + sizeof(timemark_));
}

gclhdchestarea::~gclhdchestarea() {
  // @@protoc_insertion_point(destructor:NFMsg.gclhdchestarea)
  SharedDtor();
}

void gclhdchestarea::SharedDtor() {
}

void gclhdchestarea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* gclhdchestarea::descriptor() {
  ::protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const gclhdchestarea& gclhdchestarea::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5flhd_2eproto::scc_info_gclhdchestarea.base);
  return *internal_default_instance();
}


void gclhdchestarea::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.gclhdchestarea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timemark_) -
        reinterpret_cast<char*>(&result_)) + sizeof(timemark_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool gclhdchestarea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.gclhdchestarea)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 userid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chestarea = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_chestarea();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chestarea_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 timemark = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_timemark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.gclhdchestarea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.gclhdchestarea)
  return false;
#undef DO_
}

void gclhdchestarea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.gclhdchestarea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 userid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional int32 chestarea = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chestarea(), output);
  }

  // optional int32 state = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }

  // optional int32 timemark = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->timemark(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.gclhdchestarea)
}

::google::protobuf::uint8* gclhdchestarea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.gclhdchestarea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 userid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // optional int32 chestarea = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chestarea(), target);
  }

  // optional int32 state = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state(), target);
  }

  // optional int32 timemark = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->timemark(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.gclhdchestarea)
  return target;
}

size_t gclhdchestarea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.gclhdchestarea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 chestarea = 3;
    if (has_chestarea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chestarea());
    }

    // optional int32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 6;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gclhdchestarea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.gclhdchestarea)
  GOOGLE_DCHECK_NE(&from, this);
  const gclhdchestarea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const gclhdchestarea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.gclhdchestarea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.gclhdchestarea)
    MergeFrom(*source);
  }
}

void gclhdchestarea::MergeFrom(const gclhdchestarea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.gclhdchestarea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      chestarea_ = from.chestarea_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000010u) {
      timemark_ = from.timemark_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void gclhdchestarea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.gclhdchestarea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gclhdchestarea::CopyFrom(const gclhdchestarea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.gclhdchestarea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gclhdchestarea::IsInitialized() const {
  return true;
}

void gclhdchestarea::Swap(gclhdchestarea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void gclhdchestarea::InternalSwap(gclhdchestarea* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(userid_, other->userid_);
  swap(chestarea_, other->chestarea_);
  swap(state_, other->state_);
  swap(timemark_, other->timemark_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata gclhdchestarea::GetMetadata() const {
  protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cglhdplayerpour::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cglhdplayerpour::kUseridFieldNumber;
const int cglhdplayerpour::kPourareaFieldNumber;
const int cglhdplayerpour::kPourscoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cglhdplayerpour::cglhdplayerpour()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5flhd_2eproto::scc_info_cglhdplayerpour.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.cglhdplayerpour)
}
cglhdplayerpour::cglhdplayerpour(const cglhdplayerpour& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pourscore_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(pourscore_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.cglhdplayerpour)
}

void cglhdplayerpour::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pourscore_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(pourscore_));
}

cglhdplayerpour::~cglhdplayerpour() {
  // @@protoc_insertion_point(destructor:NFMsg.cglhdplayerpour)
  SharedDtor();
}

void cglhdplayerpour::SharedDtor() {
}

void cglhdplayerpour::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cglhdplayerpour::descriptor() {
  ::protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cglhdplayerpour& cglhdplayerpour::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5flhd_2eproto::scc_info_cglhdplayerpour.base);
  return *internal_default_instance();
}


void cglhdplayerpour::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.cglhdplayerpour)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pourscore_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(pourscore_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool cglhdplayerpour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.cglhdplayerpour)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pourarea = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_pourarea();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourarea_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pourscore = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_pourscore();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.cglhdplayerpour)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.cglhdplayerpour)
  return false;
#undef DO_
}

void cglhdplayerpour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.cglhdplayerpour)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 pourarea = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pourarea(), output);
  }

  // optional int32 pourscore = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pourscore(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.cglhdplayerpour)
}

::google::protobuf::uint8* cglhdplayerpour::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.cglhdplayerpour)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 pourarea = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pourarea(), target);
  }

  // optional int32 pourscore = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pourscore(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.cglhdplayerpour)
  return target;
}

size_t cglhdplayerpour::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.cglhdplayerpour)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 pourarea = 2;
    if (has_pourarea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourarea());
    }

    // optional int32 pourscore = 3;
    if (has_pourscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourscore());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cglhdplayerpour::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.cglhdplayerpour)
  GOOGLE_DCHECK_NE(&from, this);
  const cglhdplayerpour* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cglhdplayerpour>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.cglhdplayerpour)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.cglhdplayerpour)
    MergeFrom(*source);
  }
}

void cglhdplayerpour::MergeFrom(const cglhdplayerpour& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.cglhdplayerpour)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      pourarea_ = from.pourarea_;
    }
    if (cached_has_bits & 0x00000004u) {
      pourscore_ = from.pourscore_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void cglhdplayerpour::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.cglhdplayerpour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cglhdplayerpour::CopyFrom(const cglhdplayerpour& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.cglhdplayerpour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cglhdplayerpour::IsInitialized() const {
  return true;
}

void cglhdplayerpour::Swap(cglhdplayerpour* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cglhdplayerpour::InternalSwap(cglhdplayerpour* other) {
  using std::swap;
  swap(userid_, other->userid_);
  swap(pourarea_, other->pourarea_);
  swap(pourscore_, other->pourscore_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cglhdplayerpour::GetMetadata() const {
  protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void gclhdplayerpour::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int gclhdplayerpour::kResultFieldNumber;
const int gclhdplayerpour::kUseridFieldNumber;
const int gclhdplayerpour::kPourareaFieldNumber;
const int gclhdplayerpour::kPourscoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

gclhdplayerpour::gclhdplayerpour()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5flhd_2eproto::scc_info_gclhdplayerpour.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.gclhdplayerpour)
}
gclhdplayerpour::gclhdplayerpour(const gclhdplayerpour& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&pourscore_) -
    reinterpret_cast<char*>(&result_)) + sizeof(pourscore_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.gclhdplayerpour)
}

void gclhdplayerpour::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pourscore_) -
      reinterpret_cast<char*>(&result_)) + sizeof(pourscore_));
}

gclhdplayerpour::~gclhdplayerpour() {
  // @@protoc_insertion_point(destructor:NFMsg.gclhdplayerpour)
  SharedDtor();
}

void gclhdplayerpour::SharedDtor() {
}

void gclhdplayerpour::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* gclhdplayerpour::descriptor() {
  ::protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const gclhdplayerpour& gclhdplayerpour::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5flhd_2eproto::scc_info_gclhdplayerpour.base);
  return *internal_default_instance();
}


void gclhdplayerpour::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.gclhdplayerpour)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pourscore_) -
        reinterpret_cast<char*>(&result_)) + sizeof(pourscore_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool gclhdplayerpour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.gclhdplayerpour)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 userid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pourarea = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_pourarea();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourarea_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pourscore = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_pourscore();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.gclhdplayerpour)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.gclhdplayerpour)
  return false;
#undef DO_
}

void gclhdplayerpour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.gclhdplayerpour)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 userid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional int32 pourarea = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pourarea(), output);
  }

  // optional int32 pourscore = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pourscore(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.gclhdplayerpour)
}

::google::protobuf::uint8* gclhdplayerpour::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.gclhdplayerpour)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 userid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // optional int32 pourarea = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pourarea(), target);
  }

  // optional int32 pourscore = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pourscore(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.gclhdplayerpour)
  return target;
}

size_t gclhdplayerpour::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.gclhdplayerpour)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 pourarea = 3;
    if (has_pourarea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourarea());
    }

    // optional int32 pourscore = 4;
    if (has_pourscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourscore());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gclhdplayerpour::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.gclhdplayerpour)
  GOOGLE_DCHECK_NE(&from, this);
  const gclhdplayerpour* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const gclhdplayerpour>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.gclhdplayerpour)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.gclhdplayerpour)
    MergeFrom(*source);
  }
}

void gclhdplayerpour::MergeFrom(const gclhdplayerpour& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.gclhdplayerpour)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      pourarea_ = from.pourarea_;
    }
    if (cached_has_bits & 0x00000008u) {
      pourscore_ = from.pourscore_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void gclhdplayerpour::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.gclhdplayerpour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gclhdplayerpour::CopyFrom(const gclhdplayerpour& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.gclhdplayerpour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gclhdplayerpour::IsInitialized() const {
  return true;
}

void gclhdplayerpour::Swap(gclhdplayerpour* other) {
  if (other == this) return;
  InternalSwap(other);
}
void gclhdplayerpour::InternalSwap(gclhdplayerpour* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(userid_, other->userid_);
  swap(pourarea_, other->pourarea_);
  swap(pourscore_, other->pourscore_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata gclhdplayerpour::GetMetadata() const {
  protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void gclhdblightcard::InitAsDefaultInstance() {
}
void gclhdblightcard::clear_area_info() {
  area_info_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int gclhdblightcard::kResultFieldNumber;
const int gclhdblightcard::kAreaInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

gclhdblightcard::gclhdblightcard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5flhd_2eproto::scc_info_gclhdblightcard.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.gclhdblightcard)
}
gclhdblightcard::gclhdblightcard(const gclhdblightcard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      area_info_(from.area_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.gclhdblightcard)
}

void gclhdblightcard::SharedCtor() {
  result_ = 0;
}

gclhdblightcard::~gclhdblightcard() {
  // @@protoc_insertion_point(destructor:NFMsg.gclhdblightcard)
  SharedDtor();
}

void gclhdblightcard::SharedDtor() {
}

void gclhdblightcard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* gclhdblightcard::descriptor() {
  ::protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const gclhdblightcard& gclhdblightcard::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5flhd_2eproto::scc_info_gclhdblightcard.base);
  return *internal_default_instance();
}


void gclhdblightcard::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.gclhdblightcard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  area_info_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool gclhdblightcard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.gclhdblightcard)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.lhd_areainfo area_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_area_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.gclhdblightcard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.gclhdblightcard)
  return false;
#undef DO_
}

void gclhdblightcard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.gclhdblightcard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .NFMsg.lhd_areainfo area_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->area_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->area_info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.gclhdblightcard)
}

::google::protobuf::uint8* gclhdblightcard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.gclhdblightcard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .NFMsg.lhd_areainfo area_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->area_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->area_info(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.gclhdblightcard)
  return target;
}

size_t gclhdblightcard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.gclhdblightcard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .NFMsg.lhd_areainfo area_info = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->area_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->area_info(static_cast<int>(i)));
    }
  }

  // optional int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gclhdblightcard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.gclhdblightcard)
  GOOGLE_DCHECK_NE(&from, this);
  const gclhdblightcard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const gclhdblightcard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.gclhdblightcard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.gclhdblightcard)
    MergeFrom(*source);
  }
}

void gclhdblightcard::MergeFrom(const gclhdblightcard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.gclhdblightcard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  area_info_.MergeFrom(from.area_info_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void gclhdblightcard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.gclhdblightcard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gclhdblightcard::CopyFrom(const gclhdblightcard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.gclhdblightcard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gclhdblightcard::IsInitialized() const {
  return true;
}

void gclhdblightcard::Swap(gclhdblightcard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void gclhdblightcard::InternalSwap(gclhdblightcard* other) {
  using std::swap;
  CastToBase(&area_info_)->InternalSwap(CastToBase(&other->area_info_));
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata gclhdblightcard::GetMetadata() const {
  protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void gclhdgamecount::InitAsDefaultInstance() {
  ::NFMsg::_gclhdgamecount_default_instance_._instance.get_mutable()->count_ = const_cast< ::NFMsg::lhd_gamecount*>(
      ::NFMsg::lhd_gamecount::internal_default_instance());
}
void gclhdgamecount::clear_count() {
  if (count_ != NULL) count_->Clear();
  clear_has_count();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int gclhdgamecount::kResultFieldNumber;
const int gclhdgamecount::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

gclhdgamecount::gclhdgamecount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5flhd_2eproto::scc_info_gclhdgamecount.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.gclhdgamecount)
}
gclhdgamecount::gclhdgamecount(const gclhdgamecount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_count()) {
    count_ = new ::NFMsg::lhd_gamecount(*from.count_);
  } else {
    count_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.gclhdgamecount)
}

void gclhdgamecount::SharedCtor() {
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&count_)) + sizeof(result_));
}

gclhdgamecount::~gclhdgamecount() {
  // @@protoc_insertion_point(destructor:NFMsg.gclhdgamecount)
  SharedDtor();
}

void gclhdgamecount::SharedDtor() {
  if (this != internal_default_instance()) delete count_;
}

void gclhdgamecount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* gclhdgamecount::descriptor() {
  ::protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const gclhdgamecount& gclhdgamecount::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5flhd_2eproto::scc_info_gclhdgamecount.base);
  return *internal_default_instance();
}


void gclhdgamecount::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.gclhdgamecount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(count_ != NULL);
    count_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool gclhdgamecount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.gclhdgamecount)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .NFMsg.lhd_gamecount count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.gclhdgamecount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.gclhdgamecount)
  return false;
#undef DO_
}

void gclhdgamecount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.gclhdgamecount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .NFMsg.lhd_gamecount count = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.gclhdgamecount)
}

::google::protobuf::uint8* gclhdgamecount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.gclhdgamecount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .NFMsg.lhd_gamecount count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_count(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.gclhdgamecount)
  return target;
}

size_t gclhdgamecount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.gclhdgamecount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .NFMsg.lhd_gamecount count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *count_);
    }

    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gclhdgamecount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.gclhdgamecount)
  GOOGLE_DCHECK_NE(&from, this);
  const gclhdgamecount* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const gclhdgamecount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.gclhdgamecount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.gclhdgamecount)
    MergeFrom(*source);
  }
}

void gclhdgamecount::MergeFrom(const gclhdgamecount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.gclhdgamecount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_count()->::NFMsg::lhd_gamecount::MergeFrom(from.count());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void gclhdgamecount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.gclhdgamecount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gclhdgamecount::CopyFrom(const gclhdgamecount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.gclhdgamecount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gclhdgamecount::IsInitialized() const {
  return true;
}

void gclhdgamecount::Swap(gclhdgamecount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void gclhdgamecount::InternalSwap(gclhdgamecount* other) {
  using std::swap;
  swap(count_, other->count_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata gclhdgamecount::GetMetadata() const {
  protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void gclhdgamefinish::InitAsDefaultInstance() {
}
void gclhdgamefinish::clear_gamecount() {
  gamecount_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int gclhdgamefinish::kResultFieldNumber;
const int gclhdgamefinish::kStarttimeFieldNumber;
const int gclhdgamefinish::kEndtimeFieldNumber;
const int gclhdgamefinish::kGamecountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

gclhdgamefinish::gclhdgamefinish()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5flhd_2eproto::scc_info_gclhdgamefinish.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.gclhdgamefinish)
}
gclhdgamefinish::gclhdgamefinish(const gclhdgamefinish& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      gamecount_(from.gamecount_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&endtime_) -
    reinterpret_cast<char*>(&result_)) + sizeof(endtime_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.gclhdgamefinish)
}

void gclhdgamefinish::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endtime_) -
      reinterpret_cast<char*>(&result_)) + sizeof(endtime_));
}

gclhdgamefinish::~gclhdgamefinish() {
  // @@protoc_insertion_point(destructor:NFMsg.gclhdgamefinish)
  SharedDtor();
}

void gclhdgamefinish::SharedDtor() {
}

void gclhdgamefinish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* gclhdgamefinish::descriptor() {
  ::protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const gclhdgamefinish& gclhdgamefinish::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5flhd_2eproto::scc_info_gclhdgamefinish.base);
  return *internal_default_instance();
}


void gclhdgamefinish::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.gclhdgamefinish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gamecount_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endtime_) -
        reinterpret_cast<char*>(&result_)) + sizeof(endtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool gclhdgamefinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.gclhdgamefinish)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 starttime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_starttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 endtime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_endtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.lhd_gamecount gamecount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_gamecount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.gclhdgamefinish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.gclhdgamefinish)
  return false;
#undef DO_
}

void gclhdgamefinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.gclhdgamefinish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 starttime = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->starttime(), output);
  }

  // optional int32 endtime = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->endtime(), output);
  }

  // repeated .NFMsg.lhd_gamecount gamecount = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gamecount_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->gamecount(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.gclhdgamefinish)
}

::google::protobuf::uint8* gclhdgamefinish::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.gclhdgamefinish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 starttime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->starttime(), target);
  }

  // optional int32 endtime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->endtime(), target);
  }

  // repeated .NFMsg.lhd_gamecount gamecount = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gamecount_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->gamecount(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.gclhdgamefinish)
  return target;
}

size_t gclhdgamefinish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.gclhdgamefinish)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .NFMsg.lhd_gamecount gamecount = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->gamecount_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->gamecount(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 starttime = 2;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }

    // optional int32 endtime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gclhdgamefinish::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.gclhdgamefinish)
  GOOGLE_DCHECK_NE(&from, this);
  const gclhdgamefinish* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const gclhdgamefinish>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.gclhdgamefinish)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.gclhdgamefinish)
    MergeFrom(*source);
  }
}

void gclhdgamefinish::MergeFrom(const gclhdgamefinish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.gclhdgamefinish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gamecount_.MergeFrom(from.gamecount_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      starttime_ = from.starttime_;
    }
    if (cached_has_bits & 0x00000004u) {
      endtime_ = from.endtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void gclhdgamefinish::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.gclhdgamefinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gclhdgamefinish::CopyFrom(const gclhdgamefinish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.gclhdgamefinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gclhdgamefinish::IsInitialized() const {
  return true;
}

void gclhdgamefinish::Swap(gclhdgamefinish* other) {
  if (other == this) return;
  InternalSwap(other);
}
void gclhdgamefinish::InternalSwap(gclhdgamefinish* other) {
  using std::swap;
  CastToBase(&gamecount_)->InternalSwap(CastToBase(&other->gamecount_));
  swap(result_, other->result_);
  swap(starttime_, other->starttime_);
  swap(endtime_, other->endtime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata gclhdgamefinish::GetMetadata() const {
  protobuf_msg_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NFMsg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::cglhdcreatetable* Arena::CreateMaybeMessage< ::NFMsg::cglhdcreatetable >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::cglhdcreatetable >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::gclhdcreatetable* Arena::CreateMaybeMessage< ::NFMsg::gclhdcreatetable >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::gclhdcreatetable >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::cglhdenter* Arena::CreateMaybeMessage< ::NFMsg::cglhdenter >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::cglhdenter >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::gclhdenter* Arena::CreateMaybeMessage< ::NFMsg::gclhdenter >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::gclhdenter >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::cglhdsitdown* Arena::CreateMaybeMessage< ::NFMsg::cglhdsitdown >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::cglhdsitdown >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::gclhdsitdown* Arena::CreateMaybeMessage< ::NFMsg::gclhdsitdown >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::gclhdsitdown >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::cglhdready* Arena::CreateMaybeMessage< ::NFMsg::cglhdready >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::cglhdready >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::gclhdready* Arena::CreateMaybeMessage< ::NFMsg::gclhdready >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::gclhdready >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::cglhdstart* Arena::CreateMaybeMessage< ::NFMsg::cglhdstart >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::cglhdstart >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::gclhdstart* Arena::CreateMaybeMessage< ::NFMsg::gclhdstart >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::gclhdstart >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::cglhdrushbank* Arena::CreateMaybeMessage< ::NFMsg::cglhdrushbank >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::cglhdrushbank >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::gclhdrushbank* Arena::CreateMaybeMessage< ::NFMsg::gclhdrushbank >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::gclhdrushbank >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::gclhdcommitbank* Arena::CreateMaybeMessage< ::NFMsg::gclhdcommitbank >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::gclhdcommitbank >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::gclhdcheststart* Arena::CreateMaybeMessage< ::NFMsg::gclhdcheststart >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::gclhdcheststart >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::cglhdchestarea* Arena::CreateMaybeMessage< ::NFMsg::cglhdchestarea >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::cglhdchestarea >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::gclhdchestarea* Arena::CreateMaybeMessage< ::NFMsg::gclhdchestarea >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::gclhdchestarea >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::cglhdplayerpour* Arena::CreateMaybeMessage< ::NFMsg::cglhdplayerpour >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::cglhdplayerpour >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::gclhdplayerpour* Arena::CreateMaybeMessage< ::NFMsg::gclhdplayerpour >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::gclhdplayerpour >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::gclhdblightcard* Arena::CreateMaybeMessage< ::NFMsg::gclhdblightcard >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::gclhdblightcard >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::gclhdgamecount* Arena::CreateMaybeMessage< ::NFMsg::gclhdgamecount >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::gclhdgamecount >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::gclhdgamefinish* Arena::CreateMaybeMessage< ::NFMsg::gclhdgamefinish >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::gclhdgamefinish >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
