// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_lhd.proto

#ifndef PROTOBUF_INCLUDED_msg_5flhd_2eproto
#define PROTOBUF_INCLUDED_msg_5flhd_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "st_lhd.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_msg_5flhd_2eproto 

namespace protobuf_msg_5flhd_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[21];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_msg_5flhd_2eproto
namespace NFMsg {
class cglhdchestarea;
class cglhdchestareaDefaultTypeInternal;
extern cglhdchestareaDefaultTypeInternal _cglhdchestarea_default_instance_;
class cglhdcreatetable;
class cglhdcreatetableDefaultTypeInternal;
extern cglhdcreatetableDefaultTypeInternal _cglhdcreatetable_default_instance_;
class cglhdenter;
class cglhdenterDefaultTypeInternal;
extern cglhdenterDefaultTypeInternal _cglhdenter_default_instance_;
class cglhdplayerpour;
class cglhdplayerpourDefaultTypeInternal;
extern cglhdplayerpourDefaultTypeInternal _cglhdplayerpour_default_instance_;
class cglhdready;
class cglhdreadyDefaultTypeInternal;
extern cglhdreadyDefaultTypeInternal _cglhdready_default_instance_;
class cglhdrushbank;
class cglhdrushbankDefaultTypeInternal;
extern cglhdrushbankDefaultTypeInternal _cglhdrushbank_default_instance_;
class cglhdsitdown;
class cglhdsitdownDefaultTypeInternal;
extern cglhdsitdownDefaultTypeInternal _cglhdsitdown_default_instance_;
class cglhdstart;
class cglhdstartDefaultTypeInternal;
extern cglhdstartDefaultTypeInternal _cglhdstart_default_instance_;
class gclhdblightcard;
class gclhdblightcardDefaultTypeInternal;
extern gclhdblightcardDefaultTypeInternal _gclhdblightcard_default_instance_;
class gclhdchestarea;
class gclhdchestareaDefaultTypeInternal;
extern gclhdchestareaDefaultTypeInternal _gclhdchestarea_default_instance_;
class gclhdcheststart;
class gclhdcheststartDefaultTypeInternal;
extern gclhdcheststartDefaultTypeInternal _gclhdcheststart_default_instance_;
class gclhdcommitbank;
class gclhdcommitbankDefaultTypeInternal;
extern gclhdcommitbankDefaultTypeInternal _gclhdcommitbank_default_instance_;
class gclhdcreatetable;
class gclhdcreatetableDefaultTypeInternal;
extern gclhdcreatetableDefaultTypeInternal _gclhdcreatetable_default_instance_;
class gclhdenter;
class gclhdenterDefaultTypeInternal;
extern gclhdenterDefaultTypeInternal _gclhdenter_default_instance_;
class gclhdgamecount;
class gclhdgamecountDefaultTypeInternal;
extern gclhdgamecountDefaultTypeInternal _gclhdgamecount_default_instance_;
class gclhdgamefinish;
class gclhdgamefinishDefaultTypeInternal;
extern gclhdgamefinishDefaultTypeInternal _gclhdgamefinish_default_instance_;
class gclhdplayerpour;
class gclhdplayerpourDefaultTypeInternal;
extern gclhdplayerpourDefaultTypeInternal _gclhdplayerpour_default_instance_;
class gclhdready;
class gclhdreadyDefaultTypeInternal;
extern gclhdreadyDefaultTypeInternal _gclhdready_default_instance_;
class gclhdrushbank;
class gclhdrushbankDefaultTypeInternal;
extern gclhdrushbankDefaultTypeInternal _gclhdrushbank_default_instance_;
class gclhdsitdown;
class gclhdsitdownDefaultTypeInternal;
extern gclhdsitdownDefaultTypeInternal _gclhdsitdown_default_instance_;
class gclhdstart;
class gclhdstartDefaultTypeInternal;
extern gclhdstartDefaultTypeInternal _gclhdstart_default_instance_;
}  // namespace NFMsg
namespace google {
namespace protobuf {
template<> ::NFMsg::cglhdchestarea* Arena::CreateMaybeMessage<::NFMsg::cglhdchestarea>(Arena*);
template<> ::NFMsg::cglhdcreatetable* Arena::CreateMaybeMessage<::NFMsg::cglhdcreatetable>(Arena*);
template<> ::NFMsg::cglhdenter* Arena::CreateMaybeMessage<::NFMsg::cglhdenter>(Arena*);
template<> ::NFMsg::cglhdplayerpour* Arena::CreateMaybeMessage<::NFMsg::cglhdplayerpour>(Arena*);
template<> ::NFMsg::cglhdready* Arena::CreateMaybeMessage<::NFMsg::cglhdready>(Arena*);
template<> ::NFMsg::cglhdrushbank* Arena::CreateMaybeMessage<::NFMsg::cglhdrushbank>(Arena*);
template<> ::NFMsg::cglhdsitdown* Arena::CreateMaybeMessage<::NFMsg::cglhdsitdown>(Arena*);
template<> ::NFMsg::cglhdstart* Arena::CreateMaybeMessage<::NFMsg::cglhdstart>(Arena*);
template<> ::NFMsg::gclhdblightcard* Arena::CreateMaybeMessage<::NFMsg::gclhdblightcard>(Arena*);
template<> ::NFMsg::gclhdchestarea* Arena::CreateMaybeMessage<::NFMsg::gclhdchestarea>(Arena*);
template<> ::NFMsg::gclhdcheststart* Arena::CreateMaybeMessage<::NFMsg::gclhdcheststart>(Arena*);
template<> ::NFMsg::gclhdcommitbank* Arena::CreateMaybeMessage<::NFMsg::gclhdcommitbank>(Arena*);
template<> ::NFMsg::gclhdcreatetable* Arena::CreateMaybeMessage<::NFMsg::gclhdcreatetable>(Arena*);
template<> ::NFMsg::gclhdenter* Arena::CreateMaybeMessage<::NFMsg::gclhdenter>(Arena*);
template<> ::NFMsg::gclhdgamecount* Arena::CreateMaybeMessage<::NFMsg::gclhdgamecount>(Arena*);
template<> ::NFMsg::gclhdgamefinish* Arena::CreateMaybeMessage<::NFMsg::gclhdgamefinish>(Arena*);
template<> ::NFMsg::gclhdplayerpour* Arena::CreateMaybeMessage<::NFMsg::gclhdplayerpour>(Arena*);
template<> ::NFMsg::gclhdready* Arena::CreateMaybeMessage<::NFMsg::gclhdready>(Arena*);
template<> ::NFMsg::gclhdrushbank* Arena::CreateMaybeMessage<::NFMsg::gclhdrushbank>(Arena*);
template<> ::NFMsg::gclhdsitdown* Arena::CreateMaybeMessage<::NFMsg::gclhdsitdown>(Arena*);
template<> ::NFMsg::gclhdstart* Arena::CreateMaybeMessage<::NFMsg::gclhdstart>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NFMsg {

// ===================================================================

class cglhdcreatetable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.cglhdcreatetable) */ {
 public:
  cglhdcreatetable();
  virtual ~cglhdcreatetable();

  cglhdcreatetable(const cglhdcreatetable& from);

  inline cglhdcreatetable& operator=(const cglhdcreatetable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cglhdcreatetable(cglhdcreatetable&& from) noexcept
    : cglhdcreatetable() {
    *this = ::std::move(from);
  }

  inline cglhdcreatetable& operator=(cglhdcreatetable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cglhdcreatetable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cglhdcreatetable* internal_default_instance() {
    return reinterpret_cast<const cglhdcreatetable*>(
               &_cglhdcreatetable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(cglhdcreatetable* other);
  friend void swap(cglhdcreatetable& a, cglhdcreatetable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cglhdcreatetable* New() const final {
    return CreateMaybeMessage<cglhdcreatetable>(NULL);
  }

  cglhdcreatetable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cglhdcreatetable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cglhdcreatetable& from);
  void MergeFrom(const cglhdcreatetable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cglhdcreatetable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .NFMsg.lhd_tableconfiginfo conf_info = 2;
  bool has_conf_info() const;
  void clear_conf_info();
  static const int kConfInfoFieldNumber = 2;
  private:
  const ::NFMsg::lhd_tableconfiginfo& _internal_conf_info() const;
  public:
  const ::NFMsg::lhd_tableconfiginfo& conf_info() const;
  ::NFMsg::lhd_tableconfiginfo* release_conf_info();
  ::NFMsg::lhd_tableconfiginfo* mutable_conf_info();
  void set_allocated_conf_info(::NFMsg::lhd_tableconfiginfo* conf_info);

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.cglhdcreatetable)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_conf_info();
  void clear_has_conf_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::NFMsg::lhd_tableconfiginfo* conf_info_;
  ::google::protobuf::int32 userid_;
  friend struct ::protobuf_msg_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class gclhdcreatetable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.gclhdcreatetable) */ {
 public:
  gclhdcreatetable();
  virtual ~gclhdcreatetable();

  gclhdcreatetable(const gclhdcreatetable& from);

  inline gclhdcreatetable& operator=(const gclhdcreatetable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  gclhdcreatetable(gclhdcreatetable&& from) noexcept
    : gclhdcreatetable() {
    *this = ::std::move(from);
  }

  inline gclhdcreatetable& operator=(gclhdcreatetable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gclhdcreatetable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gclhdcreatetable* internal_default_instance() {
    return reinterpret_cast<const gclhdcreatetable*>(
               &_gclhdcreatetable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(gclhdcreatetable* other);
  friend void swap(gclhdcreatetable& a, gclhdcreatetable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline gclhdcreatetable* New() const final {
    return CreateMaybeMessage<gclhdcreatetable>(NULL);
  }

  gclhdcreatetable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<gclhdcreatetable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const gclhdcreatetable& from);
  void MergeFrom(const gclhdcreatetable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gclhdcreatetable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional int32 tableid = 2;
  bool has_tableid() const;
  void clear_tableid();
  static const int kTableidFieldNumber = 2;
  ::google::protobuf::int32 tableid() const;
  void set_tableid(::google::protobuf::int32 value);

  // optional int32 frameid = 3;
  bool has_frameid() const;
  void clear_frameid();
  static const int kFrameidFieldNumber = 3;
  ::google::protobuf::int32 frameid() const;
  void set_frameid(::google::protobuf::int32 value);

  // optional int32 state = 4;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // optional int32 timemark = 5;
  bool has_timemark() const;
  void clear_timemark();
  static const int kTimemarkFieldNumber = 5;
  ::google::protobuf::int32 timemark() const;
  void set_timemark(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.gclhdcreatetable)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_tableid();
  void clear_has_tableid();
  void set_has_frameid();
  void clear_has_frameid();
  void set_has_state();
  void clear_has_state();
  void set_has_timemark();
  void clear_has_timemark();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 frameid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 timemark_;
  friend struct ::protobuf_msg_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cglhdenter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.cglhdenter) */ {
 public:
  cglhdenter();
  virtual ~cglhdenter();

  cglhdenter(const cglhdenter& from);

  inline cglhdenter& operator=(const cglhdenter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cglhdenter(cglhdenter&& from) noexcept
    : cglhdenter() {
    *this = ::std::move(from);
  }

  inline cglhdenter& operator=(cglhdenter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cglhdenter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cglhdenter* internal_default_instance() {
    return reinterpret_cast<const cglhdenter*>(
               &_cglhdenter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(cglhdenter* other);
  friend void swap(cglhdenter& a, cglhdenter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cglhdenter* New() const final {
    return CreateMaybeMessage<cglhdenter>(NULL);
  }

  cglhdenter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cglhdenter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cglhdenter& from);
  void MergeFrom(const cglhdenter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cglhdenter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string password = 3;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 tableid = 2;
  bool has_tableid() const;
  void clear_tableid();
  static const int kTableidFieldNumber = 2;
  ::google::protobuf::int32 tableid() const;
  void set_tableid(::google::protobuf::int32 value);

  // optional int32 tabletype = 4;
  bool has_tabletype() const;
  void clear_tabletype();
  static const int kTabletypeFieldNumber = 4;
  ::google::protobuf::int32 tabletype() const;
  void set_tabletype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.cglhdenter)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_tableid();
  void clear_has_tableid();
  void set_has_password();
  void clear_has_password();
  void set_has_tabletype();
  void clear_has_tabletype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 tabletype_;
  friend struct ::protobuf_msg_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class gclhdenter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.gclhdenter) */ {
 public:
  gclhdenter();
  virtual ~gclhdenter();

  gclhdenter(const gclhdenter& from);

  inline gclhdenter& operator=(const gclhdenter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  gclhdenter(gclhdenter&& from) noexcept
    : gclhdenter() {
    *this = ::std::move(from);
  }

  inline gclhdenter& operator=(gclhdenter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gclhdenter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gclhdenter* internal_default_instance() {
    return reinterpret_cast<const gclhdenter*>(
               &_gclhdenter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(gclhdenter* other);
  friend void swap(gclhdenter& a, gclhdenter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline gclhdenter* New() const final {
    return CreateMaybeMessage<gclhdenter>(NULL);
  }

  gclhdenter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<gclhdenter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const gclhdenter& from);
  void MergeFrom(const gclhdenter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gclhdenter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .NFMsg.lhd_tableinfo tableinfo = 2;
  bool has_tableinfo() const;
  void clear_tableinfo();
  static const int kTableinfoFieldNumber = 2;
  private:
  const ::NFMsg::lhd_tableinfo& _internal_tableinfo() const;
  public:
  const ::NFMsg::lhd_tableinfo& tableinfo() const;
  ::NFMsg::lhd_tableinfo* release_tableinfo();
  ::NFMsg::lhd_tableinfo* mutable_tableinfo();
  void set_allocated_tableinfo(::NFMsg::lhd_tableinfo* tableinfo);

  // optional int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.gclhdenter)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_tableinfo();
  void clear_has_tableinfo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::NFMsg::lhd_tableinfo* tableinfo_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_msg_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cglhdsitdown : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.cglhdsitdown) */ {
 public:
  cglhdsitdown();
  virtual ~cglhdsitdown();

  cglhdsitdown(const cglhdsitdown& from);

  inline cglhdsitdown& operator=(const cglhdsitdown& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cglhdsitdown(cglhdsitdown&& from) noexcept
    : cglhdsitdown() {
    *this = ::std::move(from);
  }

  inline cglhdsitdown& operator=(cglhdsitdown&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cglhdsitdown& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cglhdsitdown* internal_default_instance() {
    return reinterpret_cast<const cglhdsitdown*>(
               &_cglhdsitdown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(cglhdsitdown* other);
  friend void swap(cglhdsitdown& a, cglhdsitdown& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cglhdsitdown* New() const final {
    return CreateMaybeMessage<cglhdsitdown>(NULL);
  }

  cglhdsitdown* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cglhdsitdown>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cglhdsitdown& from);
  void MergeFrom(const cglhdsitdown& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cglhdsitdown* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 tableid = 2;
  bool has_tableid() const;
  void clear_tableid();
  static const int kTableidFieldNumber = 2;
  ::google::protobuf::int32 tableid() const;
  void set_tableid(::google::protobuf::int32 value);

  // optional int32 chairid = 3;
  bool has_chairid() const;
  void clear_chairid();
  static const int kChairidFieldNumber = 3;
  ::google::protobuf::int32 chairid() const;
  void set_chairid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.cglhdsitdown)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_tableid();
  void clear_has_tableid();
  void set_has_chairid();
  void clear_has_chairid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 chairid_;
  friend struct ::protobuf_msg_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class gclhdsitdown : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.gclhdsitdown) */ {
 public:
  gclhdsitdown();
  virtual ~gclhdsitdown();

  gclhdsitdown(const gclhdsitdown& from);

  inline gclhdsitdown& operator=(const gclhdsitdown& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  gclhdsitdown(gclhdsitdown&& from) noexcept
    : gclhdsitdown() {
    *this = ::std::move(from);
  }

  inline gclhdsitdown& operator=(gclhdsitdown&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gclhdsitdown& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gclhdsitdown* internal_default_instance() {
    return reinterpret_cast<const gclhdsitdown*>(
               &_gclhdsitdown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(gclhdsitdown* other);
  friend void swap(gclhdsitdown& a, gclhdsitdown& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline gclhdsitdown* New() const final {
    return CreateMaybeMessage<gclhdsitdown>(NULL);
  }

  gclhdsitdown* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<gclhdsitdown>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const gclhdsitdown& from);
  void MergeFrom(const gclhdsitdown& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gclhdsitdown* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .NFMsg.lhd_userinfo userinfo = 2;
  bool has_userinfo() const;
  void clear_userinfo();
  static const int kUserinfoFieldNumber = 2;
  private:
  const ::NFMsg::lhd_userinfo& _internal_userinfo() const;
  public:
  const ::NFMsg::lhd_userinfo& userinfo() const;
  ::NFMsg::lhd_userinfo* release_userinfo();
  ::NFMsg::lhd_userinfo* mutable_userinfo();
  void set_allocated_userinfo(::NFMsg::lhd_userinfo* userinfo);

  // optional int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.gclhdsitdown)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_userinfo();
  void clear_has_userinfo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::NFMsg::lhd_userinfo* userinfo_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_msg_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cglhdready : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.cglhdready) */ {
 public:
  cglhdready();
  virtual ~cglhdready();

  cglhdready(const cglhdready& from);

  inline cglhdready& operator=(const cglhdready& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cglhdready(cglhdready&& from) noexcept
    : cglhdready() {
    *this = ::std::move(from);
  }

  inline cglhdready& operator=(cglhdready&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cglhdready& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cglhdready* internal_default_instance() {
    return reinterpret_cast<const cglhdready*>(
               &_cglhdready_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(cglhdready* other);
  friend void swap(cglhdready& a, cglhdready& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cglhdready* New() const final {
    return CreateMaybeMessage<cglhdready>(NULL);
  }

  cglhdready* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cglhdready>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cglhdready& from);
  void MergeFrom(const cglhdready& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cglhdready* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.cglhdready)
 private:
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 userid_;
  friend struct ::protobuf_msg_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class gclhdready : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.gclhdready) */ {
 public:
  gclhdready();
  virtual ~gclhdready();

  gclhdready(const gclhdready& from);

  inline gclhdready& operator=(const gclhdready& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  gclhdready(gclhdready&& from) noexcept
    : gclhdready() {
    *this = ::std::move(from);
  }

  inline gclhdready& operator=(gclhdready&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gclhdready& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gclhdready* internal_default_instance() {
    return reinterpret_cast<const gclhdready*>(
               &_gclhdready_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(gclhdready* other);
  friend void swap(gclhdready& a, gclhdready& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline gclhdready* New() const final {
    return CreateMaybeMessage<gclhdready>(NULL);
  }

  gclhdready* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<gclhdready>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const gclhdready& from);
  void MergeFrom(const gclhdready& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gclhdready* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional int32 userid = 2;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.gclhdready)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 userid_;
  friend struct ::protobuf_msg_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cglhdstart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.cglhdstart) */ {
 public:
  cglhdstart();
  virtual ~cglhdstart();

  cglhdstart(const cglhdstart& from);

  inline cglhdstart& operator=(const cglhdstart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cglhdstart(cglhdstart&& from) noexcept
    : cglhdstart() {
    *this = ::std::move(from);
  }

  inline cglhdstart& operator=(cglhdstart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cglhdstart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cglhdstart* internal_default_instance() {
    return reinterpret_cast<const cglhdstart*>(
               &_cglhdstart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(cglhdstart* other);
  friend void swap(cglhdstart& a, cglhdstart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cglhdstart* New() const final {
    return CreateMaybeMessage<cglhdstart>(NULL);
  }

  cglhdstart* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cglhdstart>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cglhdstart& from);
  void MergeFrom(const cglhdstart& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cglhdstart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.cglhdstart)
 private:
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 userid_;
  friend struct ::protobuf_msg_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class gclhdstart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.gclhdstart) */ {
 public:
  gclhdstart();
  virtual ~gclhdstart();

  gclhdstart(const gclhdstart& from);

  inline gclhdstart& operator=(const gclhdstart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  gclhdstart(gclhdstart&& from) noexcept
    : gclhdstart() {
    *this = ::std::move(from);
  }

  inline gclhdstart& operator=(gclhdstart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gclhdstart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gclhdstart* internal_default_instance() {
    return reinterpret_cast<const gclhdstart*>(
               &_gclhdstart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(gclhdstart* other);
  friend void swap(gclhdstart& a, gclhdstart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline gclhdstart* New() const final {
    return CreateMaybeMessage<gclhdstart>(NULL);
  }

  gclhdstart* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<gclhdstart>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const gclhdstart& from);
  void MergeFrom(const gclhdstart& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gclhdstart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional int32 tableid = 2;
  bool has_tableid() const;
  void clear_tableid();
  static const int kTableidFieldNumber = 2;
  ::google::protobuf::int32 tableid() const;
  void set_tableid(::google::protobuf::int32 value);

  // optional int32 frameid = 3;
  bool has_frameid() const;
  void clear_frameid();
  static const int kFrameidFieldNumber = 3;
  ::google::protobuf::int32 frameid() const;
  void set_frameid(::google::protobuf::int32 value);

  // optional int32 state = 4;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // optional int32 timemark = 5;
  bool has_timemark() const;
  void clear_timemark();
  static const int kTimemarkFieldNumber = 5;
  ::google::protobuf::int32 timemark() const;
  void set_timemark(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.gclhdstart)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_tableid();
  void clear_has_tableid();
  void set_has_frameid();
  void clear_has_frameid();
  void set_has_state();
  void clear_has_state();
  void set_has_timemark();
  void clear_has_timemark();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 frameid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 timemark_;
  friend struct ::protobuf_msg_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cglhdrushbank : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.cglhdrushbank) */ {
 public:
  cglhdrushbank();
  virtual ~cglhdrushbank();

  cglhdrushbank(const cglhdrushbank& from);

  inline cglhdrushbank& operator=(const cglhdrushbank& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cglhdrushbank(cglhdrushbank&& from) noexcept
    : cglhdrushbank() {
    *this = ::std::move(from);
  }

  inline cglhdrushbank& operator=(cglhdrushbank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cglhdrushbank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cglhdrushbank* internal_default_instance() {
    return reinterpret_cast<const cglhdrushbank*>(
               &_cglhdrushbank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(cglhdrushbank* other);
  friend void swap(cglhdrushbank& a, cglhdrushbank& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cglhdrushbank* New() const final {
    return CreateMaybeMessage<cglhdrushbank>(NULL);
  }

  cglhdrushbank* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cglhdrushbank>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cglhdrushbank& from);
  void MergeFrom(const cglhdrushbank& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cglhdrushbank* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 operatetype = 2;
  bool has_operatetype() const;
  void clear_operatetype();
  static const int kOperatetypeFieldNumber = 2;
  ::google::protobuf::int32 operatetype() const;
  void set_operatetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.cglhdrushbank)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_operatetype();
  void clear_has_operatetype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 operatetype_;
  friend struct ::protobuf_msg_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class gclhdrushbank : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.gclhdrushbank) */ {
 public:
  gclhdrushbank();
  virtual ~gclhdrushbank();

  gclhdrushbank(const gclhdrushbank& from);

  inline gclhdrushbank& operator=(const gclhdrushbank& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  gclhdrushbank(gclhdrushbank&& from) noexcept
    : gclhdrushbank() {
    *this = ::std::move(from);
  }

  inline gclhdrushbank& operator=(gclhdrushbank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gclhdrushbank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gclhdrushbank* internal_default_instance() {
    return reinterpret_cast<const gclhdrushbank*>(
               &_gclhdrushbank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(gclhdrushbank* other);
  friend void swap(gclhdrushbank& a, gclhdrushbank& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline gclhdrushbank* New() const final {
    return CreateMaybeMessage<gclhdrushbank>(NULL);
  }

  gclhdrushbank* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<gclhdrushbank>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const gclhdrushbank& from);
  void MergeFrom(const gclhdrushbank& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gclhdrushbank* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional int32 userid = 2;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 operatetype = 3;
  bool has_operatetype() const;
  void clear_operatetype();
  static const int kOperatetypeFieldNumber = 3;
  ::google::protobuf::int32 operatetype() const;
  void set_operatetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.gclhdrushbank)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_userid();
  void clear_has_userid();
  void set_has_operatetype();
  void clear_has_operatetype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 operatetype_;
  friend struct ::protobuf_msg_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class gclhdcommitbank : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.gclhdcommitbank) */ {
 public:
  gclhdcommitbank();
  virtual ~gclhdcommitbank();

  gclhdcommitbank(const gclhdcommitbank& from);

  inline gclhdcommitbank& operator=(const gclhdcommitbank& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  gclhdcommitbank(gclhdcommitbank&& from) noexcept
    : gclhdcommitbank() {
    *this = ::std::move(from);
  }

  inline gclhdcommitbank& operator=(gclhdcommitbank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gclhdcommitbank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gclhdcommitbank* internal_default_instance() {
    return reinterpret_cast<const gclhdcommitbank*>(
               &_gclhdcommitbank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(gclhdcommitbank* other);
  friend void swap(gclhdcommitbank& a, gclhdcommitbank& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline gclhdcommitbank* New() const final {
    return CreateMaybeMessage<gclhdcommitbank>(NULL);
  }

  gclhdcommitbank* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<gclhdcommitbank>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const gclhdcommitbank& from);
  void MergeFrom(const gclhdcommitbank& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gclhdcommitbank* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional int32 bankid = 2;
  bool has_bankid() const;
  void clear_bankid();
  static const int kBankidFieldNumber = 2;
  ::google::protobuf::int32 bankid() const;
  void set_bankid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.gclhdcommitbank)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_bankid();
  void clear_has_bankid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 bankid_;
  friend struct ::protobuf_msg_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class gclhdcheststart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.gclhdcheststart) */ {
 public:
  gclhdcheststart();
  virtual ~gclhdcheststart();

  gclhdcheststart(const gclhdcheststart& from);

  inline gclhdcheststart& operator=(const gclhdcheststart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  gclhdcheststart(gclhdcheststart&& from) noexcept
    : gclhdcheststart() {
    *this = ::std::move(from);
  }

  inline gclhdcheststart& operator=(gclhdcheststart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gclhdcheststart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gclhdcheststart* internal_default_instance() {
    return reinterpret_cast<const gclhdcheststart*>(
               &_gclhdcheststart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(gclhdcheststart* other);
  friend void swap(gclhdcheststart& a, gclhdcheststart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline gclhdcheststart* New() const final {
    return CreateMaybeMessage<gclhdcheststart>(NULL);
  }

  gclhdcheststart* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<gclhdcheststart>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const gclhdcheststart& from);
  void MergeFrom(const gclhdcheststart& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gclhdcheststart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional int32 bankid = 2;
  bool has_bankid() const;
  void clear_bankid();
  static const int kBankidFieldNumber = 2;
  ::google::protobuf::int32 bankid() const;
  void set_bankid(::google::protobuf::int32 value);

  // optional int32 tableid = 3;
  bool has_tableid() const;
  void clear_tableid();
  static const int kTableidFieldNumber = 3;
  ::google::protobuf::int32 tableid() const;
  void set_tableid(::google::protobuf::int32 value);

  // optional int32 frameid = 4;
  bool has_frameid() const;
  void clear_frameid();
  static const int kFrameidFieldNumber = 4;
  ::google::protobuf::int32 frameid() const;
  void set_frameid(::google::protobuf::int32 value);

  // optional int32 state = 5;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 5;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // optional int32 timemark = 6;
  bool has_timemark() const;
  void clear_timemark();
  static const int kTimemarkFieldNumber = 6;
  ::google::protobuf::int32 timemark() const;
  void set_timemark(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.gclhdcheststart)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_bankid();
  void clear_has_bankid();
  void set_has_tableid();
  void clear_has_tableid();
  void set_has_frameid();
  void clear_has_frameid();
  void set_has_state();
  void clear_has_state();
  void set_has_timemark();
  void clear_has_timemark();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 bankid_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 frameid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 timemark_;
  friend struct ::protobuf_msg_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cglhdchestarea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.cglhdchestarea) */ {
 public:
  cglhdchestarea();
  virtual ~cglhdchestarea();

  cglhdchestarea(const cglhdchestarea& from);

  inline cglhdchestarea& operator=(const cglhdchestarea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cglhdchestarea(cglhdchestarea&& from) noexcept
    : cglhdchestarea() {
    *this = ::std::move(from);
  }

  inline cglhdchestarea& operator=(cglhdchestarea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cglhdchestarea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cglhdchestarea* internal_default_instance() {
    return reinterpret_cast<const cglhdchestarea*>(
               &_cglhdchestarea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(cglhdchestarea* other);
  friend void swap(cglhdchestarea& a, cglhdchestarea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cglhdchestarea* New() const final {
    return CreateMaybeMessage<cglhdchestarea>(NULL);
  }

  cglhdchestarea* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cglhdchestarea>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cglhdchestarea& from);
  void MergeFrom(const cglhdchestarea& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cglhdchestarea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 chestarea = 2;
  bool has_chestarea() const;
  void clear_chestarea();
  static const int kChestareaFieldNumber = 2;
  ::google::protobuf::int32 chestarea() const;
  void set_chestarea(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.cglhdchestarea)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_chestarea();
  void clear_has_chestarea();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 chestarea_;
  friend struct ::protobuf_msg_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class gclhdchestarea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.gclhdchestarea) */ {
 public:
  gclhdchestarea();
  virtual ~gclhdchestarea();

  gclhdchestarea(const gclhdchestarea& from);

  inline gclhdchestarea& operator=(const gclhdchestarea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  gclhdchestarea(gclhdchestarea&& from) noexcept
    : gclhdchestarea() {
    *this = ::std::move(from);
  }

  inline gclhdchestarea& operator=(gclhdchestarea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gclhdchestarea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gclhdchestarea* internal_default_instance() {
    return reinterpret_cast<const gclhdchestarea*>(
               &_gclhdchestarea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(gclhdchestarea* other);
  friend void swap(gclhdchestarea& a, gclhdchestarea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline gclhdchestarea* New() const final {
    return CreateMaybeMessage<gclhdchestarea>(NULL);
  }

  gclhdchestarea* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<gclhdchestarea>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const gclhdchestarea& from);
  void MergeFrom(const gclhdchestarea& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gclhdchestarea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional int32 userid = 2;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 chestarea = 3;
  bool has_chestarea() const;
  void clear_chestarea();
  static const int kChestareaFieldNumber = 3;
  ::google::protobuf::int32 chestarea() const;
  void set_chestarea(::google::protobuf::int32 value);

  // optional int32 state = 5;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 5;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // optional int32 timemark = 6;
  bool has_timemark() const;
  void clear_timemark();
  static const int kTimemarkFieldNumber = 6;
  ::google::protobuf::int32 timemark() const;
  void set_timemark(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.gclhdchestarea)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_userid();
  void clear_has_userid();
  void set_has_chestarea();
  void clear_has_chestarea();
  void set_has_state();
  void clear_has_state();
  void set_has_timemark();
  void clear_has_timemark();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 chestarea_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 timemark_;
  friend struct ::protobuf_msg_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cglhdplayerpour : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.cglhdplayerpour) */ {
 public:
  cglhdplayerpour();
  virtual ~cglhdplayerpour();

  cglhdplayerpour(const cglhdplayerpour& from);

  inline cglhdplayerpour& operator=(const cglhdplayerpour& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cglhdplayerpour(cglhdplayerpour&& from) noexcept
    : cglhdplayerpour() {
    *this = ::std::move(from);
  }

  inline cglhdplayerpour& operator=(cglhdplayerpour&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cglhdplayerpour& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cglhdplayerpour* internal_default_instance() {
    return reinterpret_cast<const cglhdplayerpour*>(
               &_cglhdplayerpour_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(cglhdplayerpour* other);
  friend void swap(cglhdplayerpour& a, cglhdplayerpour& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cglhdplayerpour* New() const final {
    return CreateMaybeMessage<cglhdplayerpour>(NULL);
  }

  cglhdplayerpour* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cglhdplayerpour>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cglhdplayerpour& from);
  void MergeFrom(const cglhdplayerpour& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cglhdplayerpour* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 pourarea = 2;
  bool has_pourarea() const;
  void clear_pourarea();
  static const int kPourareaFieldNumber = 2;
  ::google::protobuf::int32 pourarea() const;
  void set_pourarea(::google::protobuf::int32 value);

  // optional int32 pourscore = 3;
  bool has_pourscore() const;
  void clear_pourscore();
  static const int kPourscoreFieldNumber = 3;
  ::google::protobuf::int32 pourscore() const;
  void set_pourscore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.cglhdplayerpour)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_pourarea();
  void clear_has_pourarea();
  void set_has_pourscore();
  void clear_has_pourscore();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 pourarea_;
  ::google::protobuf::int32 pourscore_;
  friend struct ::protobuf_msg_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class gclhdplayerpour : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.gclhdplayerpour) */ {
 public:
  gclhdplayerpour();
  virtual ~gclhdplayerpour();

  gclhdplayerpour(const gclhdplayerpour& from);

  inline gclhdplayerpour& operator=(const gclhdplayerpour& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  gclhdplayerpour(gclhdplayerpour&& from) noexcept
    : gclhdplayerpour() {
    *this = ::std::move(from);
  }

  inline gclhdplayerpour& operator=(gclhdplayerpour&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gclhdplayerpour& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gclhdplayerpour* internal_default_instance() {
    return reinterpret_cast<const gclhdplayerpour*>(
               &_gclhdplayerpour_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(gclhdplayerpour* other);
  friend void swap(gclhdplayerpour& a, gclhdplayerpour& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline gclhdplayerpour* New() const final {
    return CreateMaybeMessage<gclhdplayerpour>(NULL);
  }

  gclhdplayerpour* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<gclhdplayerpour>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const gclhdplayerpour& from);
  void MergeFrom(const gclhdplayerpour& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gclhdplayerpour* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional int32 userid = 2;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 pourarea = 3;
  bool has_pourarea() const;
  void clear_pourarea();
  static const int kPourareaFieldNumber = 3;
  ::google::protobuf::int32 pourarea() const;
  void set_pourarea(::google::protobuf::int32 value);

  // optional int32 pourscore = 4;
  bool has_pourscore() const;
  void clear_pourscore();
  static const int kPourscoreFieldNumber = 4;
  ::google::protobuf::int32 pourscore() const;
  void set_pourscore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.gclhdplayerpour)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_userid();
  void clear_has_userid();
  void set_has_pourarea();
  void clear_has_pourarea();
  void set_has_pourscore();
  void clear_has_pourscore();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 pourarea_;
  ::google::protobuf::int32 pourscore_;
  friend struct ::protobuf_msg_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class gclhdblightcard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.gclhdblightcard) */ {
 public:
  gclhdblightcard();
  virtual ~gclhdblightcard();

  gclhdblightcard(const gclhdblightcard& from);

  inline gclhdblightcard& operator=(const gclhdblightcard& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  gclhdblightcard(gclhdblightcard&& from) noexcept
    : gclhdblightcard() {
    *this = ::std::move(from);
  }

  inline gclhdblightcard& operator=(gclhdblightcard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gclhdblightcard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gclhdblightcard* internal_default_instance() {
    return reinterpret_cast<const gclhdblightcard*>(
               &_gclhdblightcard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(gclhdblightcard* other);
  friend void swap(gclhdblightcard& a, gclhdblightcard& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline gclhdblightcard* New() const final {
    return CreateMaybeMessage<gclhdblightcard>(NULL);
  }

  gclhdblightcard* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<gclhdblightcard>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const gclhdblightcard& from);
  void MergeFrom(const gclhdblightcard& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gclhdblightcard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.lhd_areainfo area_info = 2;
  int area_info_size() const;
  void clear_area_info();
  static const int kAreaInfoFieldNumber = 2;
  ::NFMsg::lhd_areainfo* mutable_area_info(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_areainfo >*
      mutable_area_info();
  const ::NFMsg::lhd_areainfo& area_info(int index) const;
  ::NFMsg::lhd_areainfo* add_area_info();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_areainfo >&
      area_info() const;

  // optional int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.gclhdblightcard)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_areainfo > area_info_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_msg_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class gclhdgamecount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.gclhdgamecount) */ {
 public:
  gclhdgamecount();
  virtual ~gclhdgamecount();

  gclhdgamecount(const gclhdgamecount& from);

  inline gclhdgamecount& operator=(const gclhdgamecount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  gclhdgamecount(gclhdgamecount&& from) noexcept
    : gclhdgamecount() {
    *this = ::std::move(from);
  }

  inline gclhdgamecount& operator=(gclhdgamecount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gclhdgamecount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gclhdgamecount* internal_default_instance() {
    return reinterpret_cast<const gclhdgamecount*>(
               &_gclhdgamecount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(gclhdgamecount* other);
  friend void swap(gclhdgamecount& a, gclhdgamecount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline gclhdgamecount* New() const final {
    return CreateMaybeMessage<gclhdgamecount>(NULL);
  }

  gclhdgamecount* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<gclhdgamecount>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const gclhdgamecount& from);
  void MergeFrom(const gclhdgamecount& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gclhdgamecount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .NFMsg.lhd_gamecount count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  private:
  const ::NFMsg::lhd_gamecount& _internal_count() const;
  public:
  const ::NFMsg::lhd_gamecount& count() const;
  ::NFMsg::lhd_gamecount* release_count();
  ::NFMsg::lhd_gamecount* mutable_count();
  void set_allocated_count(::NFMsg::lhd_gamecount* count);

  // optional int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.gclhdgamecount)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::NFMsg::lhd_gamecount* count_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_msg_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class gclhdgamefinish : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.gclhdgamefinish) */ {
 public:
  gclhdgamefinish();
  virtual ~gclhdgamefinish();

  gclhdgamefinish(const gclhdgamefinish& from);

  inline gclhdgamefinish& operator=(const gclhdgamefinish& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  gclhdgamefinish(gclhdgamefinish&& from) noexcept
    : gclhdgamefinish() {
    *this = ::std::move(from);
  }

  inline gclhdgamefinish& operator=(gclhdgamefinish&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gclhdgamefinish& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gclhdgamefinish* internal_default_instance() {
    return reinterpret_cast<const gclhdgamefinish*>(
               &_gclhdgamefinish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(gclhdgamefinish* other);
  friend void swap(gclhdgamefinish& a, gclhdgamefinish& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline gclhdgamefinish* New() const final {
    return CreateMaybeMessage<gclhdgamefinish>(NULL);
  }

  gclhdgamefinish* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<gclhdgamefinish>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const gclhdgamefinish& from);
  void MergeFrom(const gclhdgamefinish& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gclhdgamefinish* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.lhd_gamecount gamecount = 4;
  int gamecount_size() const;
  void clear_gamecount();
  static const int kGamecountFieldNumber = 4;
  ::NFMsg::lhd_gamecount* mutable_gamecount(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_gamecount >*
      mutable_gamecount();
  const ::NFMsg::lhd_gamecount& gamecount(int index) const;
  ::NFMsg::lhd_gamecount* add_gamecount();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_gamecount >&
      gamecount() const;

  // optional int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional int32 starttime = 2;
  bool has_starttime() const;
  void clear_starttime();
  static const int kStarttimeFieldNumber = 2;
  ::google::protobuf::int32 starttime() const;
  void set_starttime(::google::protobuf::int32 value);

  // optional int32 endtime = 3;
  bool has_endtime() const;
  void clear_endtime();
  static const int kEndtimeFieldNumber = 3;
  ::google::protobuf::int32 endtime() const;
  void set_endtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.gclhdgamefinish)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_starttime();
  void clear_has_starttime();
  void set_has_endtime();
  void clear_has_endtime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_gamecount > gamecount_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 starttime_;
  ::google::protobuf::int32 endtime_;
  friend struct ::protobuf_msg_5flhd_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// cglhdcreatetable

// optional int32 userid = 1;
inline bool cglhdcreatetable::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cglhdcreatetable::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cglhdcreatetable::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cglhdcreatetable::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 cglhdcreatetable::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.cglhdcreatetable.userid)
  return userid_;
}
inline void cglhdcreatetable::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cglhdcreatetable.userid)
}

// optional .NFMsg.lhd_tableconfiginfo conf_info = 2;
inline bool cglhdcreatetable::has_conf_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cglhdcreatetable::set_has_conf_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cglhdcreatetable::clear_has_conf_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::NFMsg::lhd_tableconfiginfo& cglhdcreatetable::_internal_conf_info() const {
  return *conf_info_;
}
inline const ::NFMsg::lhd_tableconfiginfo& cglhdcreatetable::conf_info() const {
  const ::NFMsg::lhd_tableconfiginfo* p = conf_info_;
  // @@protoc_insertion_point(field_get:NFMsg.cglhdcreatetable.conf_info)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::lhd_tableconfiginfo*>(
      &::NFMsg::_lhd_tableconfiginfo_default_instance_);
}
inline ::NFMsg::lhd_tableconfiginfo* cglhdcreatetable::release_conf_info() {
  // @@protoc_insertion_point(field_release:NFMsg.cglhdcreatetable.conf_info)
  clear_has_conf_info();
  ::NFMsg::lhd_tableconfiginfo* temp = conf_info_;
  conf_info_ = NULL;
  return temp;
}
inline ::NFMsg::lhd_tableconfiginfo* cglhdcreatetable::mutable_conf_info() {
  set_has_conf_info();
  if (conf_info_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::lhd_tableconfiginfo>(GetArenaNoVirtual());
    conf_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.cglhdcreatetable.conf_info)
  return conf_info_;
}
inline void cglhdcreatetable::set_allocated_conf_info(::NFMsg::lhd_tableconfiginfo* conf_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(conf_info_);
  }
  if (conf_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      conf_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conf_info, submessage_arena);
    }
    set_has_conf_info();
  } else {
    clear_has_conf_info();
  }
  conf_info_ = conf_info;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.cglhdcreatetable.conf_info)
}

// -------------------------------------------------------------------

// gclhdcreatetable

// optional int32 result = 1;
inline bool gclhdcreatetable::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gclhdcreatetable::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gclhdcreatetable::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gclhdcreatetable::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gclhdcreatetable::result() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdcreatetable.result)
  return result_;
}
inline void gclhdcreatetable::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdcreatetable.result)
}

// optional int32 tableid = 2;
inline bool gclhdcreatetable::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gclhdcreatetable::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gclhdcreatetable::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gclhdcreatetable::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 gclhdcreatetable::tableid() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdcreatetable.tableid)
  return tableid_;
}
inline void gclhdcreatetable::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdcreatetable.tableid)
}

// optional int32 frameid = 3;
inline bool gclhdcreatetable::has_frameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gclhdcreatetable::set_has_frameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gclhdcreatetable::clear_has_frameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gclhdcreatetable::clear_frameid() {
  frameid_ = 0;
  clear_has_frameid();
}
inline ::google::protobuf::int32 gclhdcreatetable::frameid() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdcreatetable.frameid)
  return frameid_;
}
inline void gclhdcreatetable::set_frameid(::google::protobuf::int32 value) {
  set_has_frameid();
  frameid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdcreatetable.frameid)
}

// optional int32 state = 4;
inline bool gclhdcreatetable::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gclhdcreatetable::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gclhdcreatetable::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gclhdcreatetable::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 gclhdcreatetable::state() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdcreatetable.state)
  return state_;
}
inline void gclhdcreatetable::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdcreatetable.state)
}

// optional int32 timemark = 5;
inline bool gclhdcreatetable::has_timemark() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gclhdcreatetable::set_has_timemark() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gclhdcreatetable::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gclhdcreatetable::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 gclhdcreatetable::timemark() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdcreatetable.timemark)
  return timemark_;
}
inline void gclhdcreatetable::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdcreatetable.timemark)
}

// -------------------------------------------------------------------

// cglhdenter

// optional int32 userid = 1;
inline bool cglhdenter::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cglhdenter::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cglhdenter::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cglhdenter::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 cglhdenter::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.cglhdenter.userid)
  return userid_;
}
inline void cglhdenter::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cglhdenter.userid)
}

// optional int32 tableid = 2;
inline bool cglhdenter::has_tableid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cglhdenter::set_has_tableid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cglhdenter::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cglhdenter::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 cglhdenter::tableid() const {
  // @@protoc_insertion_point(field_get:NFMsg.cglhdenter.tableid)
  return tableid_;
}
inline void cglhdenter::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cglhdenter.tableid)
}

// optional string password = 3;
inline bool cglhdenter::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cglhdenter::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cglhdenter::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cglhdenter::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& cglhdenter::password() const {
  // @@protoc_insertion_point(field_get:NFMsg.cglhdenter.password)
  return password_.GetNoArena();
}
inline void cglhdenter::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.cglhdenter.password)
}
#if LANG_CXX11
inline void cglhdenter::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.cglhdenter.password)
}
#endif
inline void cglhdenter::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.cglhdenter.password)
}
inline void cglhdenter::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.cglhdenter.password)
}
inline ::std::string* cglhdenter::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:NFMsg.cglhdenter.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cglhdenter::release_password() {
  // @@protoc_insertion_point(field_release:NFMsg.cglhdenter.password)
  if (!has_password()) {
    return NULL;
  }
  clear_has_password();
  return password_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cglhdenter::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.cglhdenter.password)
}

// optional int32 tabletype = 4;
inline bool cglhdenter::has_tabletype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cglhdenter::set_has_tabletype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cglhdenter::clear_has_tabletype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cglhdenter::clear_tabletype() {
  tabletype_ = 0;
  clear_has_tabletype();
}
inline ::google::protobuf::int32 cglhdenter::tabletype() const {
  // @@protoc_insertion_point(field_get:NFMsg.cglhdenter.tabletype)
  return tabletype_;
}
inline void cglhdenter::set_tabletype(::google::protobuf::int32 value) {
  set_has_tabletype();
  tabletype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cglhdenter.tabletype)
}

// -------------------------------------------------------------------

// gclhdenter

// optional int32 result = 1;
inline bool gclhdenter::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gclhdenter::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gclhdenter::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gclhdenter::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gclhdenter::result() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdenter.result)
  return result_;
}
inline void gclhdenter::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdenter.result)
}

// optional .NFMsg.lhd_tableinfo tableinfo = 2;
inline bool gclhdenter::has_tableinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gclhdenter::set_has_tableinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gclhdenter::clear_has_tableinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::NFMsg::lhd_tableinfo& gclhdenter::_internal_tableinfo() const {
  return *tableinfo_;
}
inline const ::NFMsg::lhd_tableinfo& gclhdenter::tableinfo() const {
  const ::NFMsg::lhd_tableinfo* p = tableinfo_;
  // @@protoc_insertion_point(field_get:NFMsg.gclhdenter.tableinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::lhd_tableinfo*>(
      &::NFMsg::_lhd_tableinfo_default_instance_);
}
inline ::NFMsg::lhd_tableinfo* gclhdenter::release_tableinfo() {
  // @@protoc_insertion_point(field_release:NFMsg.gclhdenter.tableinfo)
  clear_has_tableinfo();
  ::NFMsg::lhd_tableinfo* temp = tableinfo_;
  tableinfo_ = NULL;
  return temp;
}
inline ::NFMsg::lhd_tableinfo* gclhdenter::mutable_tableinfo() {
  set_has_tableinfo();
  if (tableinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::lhd_tableinfo>(GetArenaNoVirtual());
    tableinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.gclhdenter.tableinfo)
  return tableinfo_;
}
inline void gclhdenter::set_allocated_tableinfo(::NFMsg::lhd_tableinfo* tableinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tableinfo_);
  }
  if (tableinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tableinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tableinfo, submessage_arena);
    }
    set_has_tableinfo();
  } else {
    clear_has_tableinfo();
  }
  tableinfo_ = tableinfo;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.gclhdenter.tableinfo)
}

// -------------------------------------------------------------------

// cglhdsitdown

// optional int32 userid = 1;
inline bool cglhdsitdown::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cglhdsitdown::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cglhdsitdown::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cglhdsitdown::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 cglhdsitdown::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.cglhdsitdown.userid)
  return userid_;
}
inline void cglhdsitdown::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cglhdsitdown.userid)
}

// optional int32 tableid = 2;
inline bool cglhdsitdown::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cglhdsitdown::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cglhdsitdown::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cglhdsitdown::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 cglhdsitdown::tableid() const {
  // @@protoc_insertion_point(field_get:NFMsg.cglhdsitdown.tableid)
  return tableid_;
}
inline void cglhdsitdown::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cglhdsitdown.tableid)
}

// optional int32 chairid = 3;
inline bool cglhdsitdown::has_chairid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cglhdsitdown::set_has_chairid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cglhdsitdown::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cglhdsitdown::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 cglhdsitdown::chairid() const {
  // @@protoc_insertion_point(field_get:NFMsg.cglhdsitdown.chairid)
  return chairid_;
}
inline void cglhdsitdown::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cglhdsitdown.chairid)
}

// -------------------------------------------------------------------

// gclhdsitdown

// optional int32 result = 1;
inline bool gclhdsitdown::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gclhdsitdown::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gclhdsitdown::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gclhdsitdown::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gclhdsitdown::result() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdsitdown.result)
  return result_;
}
inline void gclhdsitdown::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdsitdown.result)
}

// optional .NFMsg.lhd_userinfo userinfo = 2;
inline bool gclhdsitdown::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gclhdsitdown::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gclhdsitdown::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::NFMsg::lhd_userinfo& gclhdsitdown::_internal_userinfo() const {
  return *userinfo_;
}
inline const ::NFMsg::lhd_userinfo& gclhdsitdown::userinfo() const {
  const ::NFMsg::lhd_userinfo* p = userinfo_;
  // @@protoc_insertion_point(field_get:NFMsg.gclhdsitdown.userinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::lhd_userinfo*>(
      &::NFMsg::_lhd_userinfo_default_instance_);
}
inline ::NFMsg::lhd_userinfo* gclhdsitdown::release_userinfo() {
  // @@protoc_insertion_point(field_release:NFMsg.gclhdsitdown.userinfo)
  clear_has_userinfo();
  ::NFMsg::lhd_userinfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline ::NFMsg::lhd_userinfo* gclhdsitdown::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::lhd_userinfo>(GetArenaNoVirtual());
    userinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.gclhdsitdown.userinfo)
  return userinfo_;
}
inline void gclhdsitdown::set_allocated_userinfo(::NFMsg::lhd_userinfo* userinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(userinfo_);
  }
  if (userinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      userinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.gclhdsitdown.userinfo)
}

// -------------------------------------------------------------------

// cglhdready

// optional int32 userid = 1;
inline bool cglhdready::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cglhdready::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cglhdready::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cglhdready::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 cglhdready::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.cglhdready.userid)
  return userid_;
}
inline void cglhdready::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cglhdready.userid)
}

// -------------------------------------------------------------------

// gclhdready

// optional int32 result = 1;
inline bool gclhdready::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gclhdready::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gclhdready::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gclhdready::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gclhdready::result() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdready.result)
  return result_;
}
inline void gclhdready::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdready.result)
}

// optional int32 userid = 2;
inline bool gclhdready::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gclhdready::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gclhdready::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gclhdready::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 gclhdready::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdready.userid)
  return userid_;
}
inline void gclhdready::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdready.userid)
}

// -------------------------------------------------------------------

// cglhdstart

// optional int32 userid = 1;
inline bool cglhdstart::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cglhdstart::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cglhdstart::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cglhdstart::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 cglhdstart::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.cglhdstart.userid)
  return userid_;
}
inline void cglhdstart::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cglhdstart.userid)
}

// -------------------------------------------------------------------

// gclhdstart

// optional int32 result = 1;
inline bool gclhdstart::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gclhdstart::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gclhdstart::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gclhdstart::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gclhdstart::result() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdstart.result)
  return result_;
}
inline void gclhdstart::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdstart.result)
}

// optional int32 tableid = 2;
inline bool gclhdstart::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gclhdstart::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gclhdstart::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gclhdstart::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 gclhdstart::tableid() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdstart.tableid)
  return tableid_;
}
inline void gclhdstart::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdstart.tableid)
}

// optional int32 frameid = 3;
inline bool gclhdstart::has_frameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gclhdstart::set_has_frameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gclhdstart::clear_has_frameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gclhdstart::clear_frameid() {
  frameid_ = 0;
  clear_has_frameid();
}
inline ::google::protobuf::int32 gclhdstart::frameid() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdstart.frameid)
  return frameid_;
}
inline void gclhdstart::set_frameid(::google::protobuf::int32 value) {
  set_has_frameid();
  frameid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdstart.frameid)
}

// optional int32 state = 4;
inline bool gclhdstart::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gclhdstart::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gclhdstart::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gclhdstart::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 gclhdstart::state() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdstart.state)
  return state_;
}
inline void gclhdstart::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdstart.state)
}

// optional int32 timemark = 5;
inline bool gclhdstart::has_timemark() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gclhdstart::set_has_timemark() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gclhdstart::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gclhdstart::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 gclhdstart::timemark() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdstart.timemark)
  return timemark_;
}
inline void gclhdstart::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdstart.timemark)
}

// -------------------------------------------------------------------

// cglhdrushbank

// optional int32 userid = 1;
inline bool cglhdrushbank::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cglhdrushbank::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cglhdrushbank::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cglhdrushbank::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 cglhdrushbank::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.cglhdrushbank.userid)
  return userid_;
}
inline void cglhdrushbank::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cglhdrushbank.userid)
}

// optional int32 operatetype = 2;
inline bool cglhdrushbank::has_operatetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cglhdrushbank::set_has_operatetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cglhdrushbank::clear_has_operatetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cglhdrushbank::clear_operatetype() {
  operatetype_ = 0;
  clear_has_operatetype();
}
inline ::google::protobuf::int32 cglhdrushbank::operatetype() const {
  // @@protoc_insertion_point(field_get:NFMsg.cglhdrushbank.operatetype)
  return operatetype_;
}
inline void cglhdrushbank::set_operatetype(::google::protobuf::int32 value) {
  set_has_operatetype();
  operatetype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cglhdrushbank.operatetype)
}

// -------------------------------------------------------------------

// gclhdrushbank

// optional int32 result = 1;
inline bool gclhdrushbank::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gclhdrushbank::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gclhdrushbank::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gclhdrushbank::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gclhdrushbank::result() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdrushbank.result)
  return result_;
}
inline void gclhdrushbank::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdrushbank.result)
}

// optional int32 userid = 2;
inline bool gclhdrushbank::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gclhdrushbank::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gclhdrushbank::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gclhdrushbank::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 gclhdrushbank::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdrushbank.userid)
  return userid_;
}
inline void gclhdrushbank::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdrushbank.userid)
}

// optional int32 operatetype = 3;
inline bool gclhdrushbank::has_operatetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gclhdrushbank::set_has_operatetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gclhdrushbank::clear_has_operatetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gclhdrushbank::clear_operatetype() {
  operatetype_ = 0;
  clear_has_operatetype();
}
inline ::google::protobuf::int32 gclhdrushbank::operatetype() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdrushbank.operatetype)
  return operatetype_;
}
inline void gclhdrushbank::set_operatetype(::google::protobuf::int32 value) {
  set_has_operatetype();
  operatetype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdrushbank.operatetype)
}

// -------------------------------------------------------------------

// gclhdcommitbank

// optional int32 result = 1;
inline bool gclhdcommitbank::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gclhdcommitbank::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gclhdcommitbank::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gclhdcommitbank::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gclhdcommitbank::result() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdcommitbank.result)
  return result_;
}
inline void gclhdcommitbank::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdcommitbank.result)
}

// optional int32 bankid = 2;
inline bool gclhdcommitbank::has_bankid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gclhdcommitbank::set_has_bankid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gclhdcommitbank::clear_has_bankid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gclhdcommitbank::clear_bankid() {
  bankid_ = 0;
  clear_has_bankid();
}
inline ::google::protobuf::int32 gclhdcommitbank::bankid() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdcommitbank.bankid)
  return bankid_;
}
inline void gclhdcommitbank::set_bankid(::google::protobuf::int32 value) {
  set_has_bankid();
  bankid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdcommitbank.bankid)
}

// -------------------------------------------------------------------

// gclhdcheststart

// optional int32 result = 1;
inline bool gclhdcheststart::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gclhdcheststart::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gclhdcheststart::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gclhdcheststart::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gclhdcheststart::result() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdcheststart.result)
  return result_;
}
inline void gclhdcheststart::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdcheststart.result)
}

// optional int32 bankid = 2;
inline bool gclhdcheststart::has_bankid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gclhdcheststart::set_has_bankid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gclhdcheststart::clear_has_bankid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gclhdcheststart::clear_bankid() {
  bankid_ = 0;
  clear_has_bankid();
}
inline ::google::protobuf::int32 gclhdcheststart::bankid() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdcheststart.bankid)
  return bankid_;
}
inline void gclhdcheststart::set_bankid(::google::protobuf::int32 value) {
  set_has_bankid();
  bankid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdcheststart.bankid)
}

// optional int32 tableid = 3;
inline bool gclhdcheststart::has_tableid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gclhdcheststart::set_has_tableid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gclhdcheststart::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gclhdcheststart::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 gclhdcheststart::tableid() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdcheststart.tableid)
  return tableid_;
}
inline void gclhdcheststart::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdcheststart.tableid)
}

// optional int32 frameid = 4;
inline bool gclhdcheststart::has_frameid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gclhdcheststart::set_has_frameid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gclhdcheststart::clear_has_frameid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gclhdcheststart::clear_frameid() {
  frameid_ = 0;
  clear_has_frameid();
}
inline ::google::protobuf::int32 gclhdcheststart::frameid() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdcheststart.frameid)
  return frameid_;
}
inline void gclhdcheststart::set_frameid(::google::protobuf::int32 value) {
  set_has_frameid();
  frameid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdcheststart.frameid)
}

// optional int32 state = 5;
inline bool gclhdcheststart::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gclhdcheststart::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gclhdcheststart::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gclhdcheststart::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 gclhdcheststart::state() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdcheststart.state)
  return state_;
}
inline void gclhdcheststart::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdcheststart.state)
}

// optional int32 timemark = 6;
inline bool gclhdcheststart::has_timemark() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gclhdcheststart::set_has_timemark() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gclhdcheststart::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gclhdcheststart::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 gclhdcheststart::timemark() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdcheststart.timemark)
  return timemark_;
}
inline void gclhdcheststart::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdcheststart.timemark)
}

// -------------------------------------------------------------------

// cglhdchestarea

// optional int32 userid = 1;
inline bool cglhdchestarea::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cglhdchestarea::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cglhdchestarea::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cglhdchestarea::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 cglhdchestarea::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.cglhdchestarea.userid)
  return userid_;
}
inline void cglhdchestarea::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cglhdchestarea.userid)
}

// optional int32 chestarea = 2;
inline bool cglhdchestarea::has_chestarea() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cglhdchestarea::set_has_chestarea() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cglhdchestarea::clear_has_chestarea() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cglhdchestarea::clear_chestarea() {
  chestarea_ = 0;
  clear_has_chestarea();
}
inline ::google::protobuf::int32 cglhdchestarea::chestarea() const {
  // @@protoc_insertion_point(field_get:NFMsg.cglhdchestarea.chestarea)
  return chestarea_;
}
inline void cglhdchestarea::set_chestarea(::google::protobuf::int32 value) {
  set_has_chestarea();
  chestarea_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cglhdchestarea.chestarea)
}

// -------------------------------------------------------------------

// gclhdchestarea

// optional int32 result = 1;
inline bool gclhdchestarea::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gclhdchestarea::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gclhdchestarea::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gclhdchestarea::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gclhdchestarea::result() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdchestarea.result)
  return result_;
}
inline void gclhdchestarea::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdchestarea.result)
}

// optional int32 userid = 2;
inline bool gclhdchestarea::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gclhdchestarea::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gclhdchestarea::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gclhdchestarea::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 gclhdchestarea::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdchestarea.userid)
  return userid_;
}
inline void gclhdchestarea::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdchestarea.userid)
}

// optional int32 chestarea = 3;
inline bool gclhdchestarea::has_chestarea() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gclhdchestarea::set_has_chestarea() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gclhdchestarea::clear_has_chestarea() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gclhdchestarea::clear_chestarea() {
  chestarea_ = 0;
  clear_has_chestarea();
}
inline ::google::protobuf::int32 gclhdchestarea::chestarea() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdchestarea.chestarea)
  return chestarea_;
}
inline void gclhdchestarea::set_chestarea(::google::protobuf::int32 value) {
  set_has_chestarea();
  chestarea_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdchestarea.chestarea)
}

// optional int32 state = 5;
inline bool gclhdchestarea::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gclhdchestarea::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gclhdchestarea::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gclhdchestarea::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 gclhdchestarea::state() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdchestarea.state)
  return state_;
}
inline void gclhdchestarea::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdchestarea.state)
}

// optional int32 timemark = 6;
inline bool gclhdchestarea::has_timemark() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gclhdchestarea::set_has_timemark() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gclhdchestarea::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gclhdchestarea::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 gclhdchestarea::timemark() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdchestarea.timemark)
  return timemark_;
}
inline void gclhdchestarea::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdchestarea.timemark)
}

// -------------------------------------------------------------------

// cglhdplayerpour

// optional int32 userid = 1;
inline bool cglhdplayerpour::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cglhdplayerpour::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cglhdplayerpour::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cglhdplayerpour::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 cglhdplayerpour::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.cglhdplayerpour.userid)
  return userid_;
}
inline void cglhdplayerpour::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cglhdplayerpour.userid)
}

// optional int32 pourarea = 2;
inline bool cglhdplayerpour::has_pourarea() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cglhdplayerpour::set_has_pourarea() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cglhdplayerpour::clear_has_pourarea() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cglhdplayerpour::clear_pourarea() {
  pourarea_ = 0;
  clear_has_pourarea();
}
inline ::google::protobuf::int32 cglhdplayerpour::pourarea() const {
  // @@protoc_insertion_point(field_get:NFMsg.cglhdplayerpour.pourarea)
  return pourarea_;
}
inline void cglhdplayerpour::set_pourarea(::google::protobuf::int32 value) {
  set_has_pourarea();
  pourarea_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cglhdplayerpour.pourarea)
}

// optional int32 pourscore = 3;
inline bool cglhdplayerpour::has_pourscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cglhdplayerpour::set_has_pourscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cglhdplayerpour::clear_has_pourscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cglhdplayerpour::clear_pourscore() {
  pourscore_ = 0;
  clear_has_pourscore();
}
inline ::google::protobuf::int32 cglhdplayerpour::pourscore() const {
  // @@protoc_insertion_point(field_get:NFMsg.cglhdplayerpour.pourscore)
  return pourscore_;
}
inline void cglhdplayerpour::set_pourscore(::google::protobuf::int32 value) {
  set_has_pourscore();
  pourscore_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.cglhdplayerpour.pourscore)
}

// -------------------------------------------------------------------

// gclhdplayerpour

// optional int32 result = 1;
inline bool gclhdplayerpour::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gclhdplayerpour::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gclhdplayerpour::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gclhdplayerpour::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gclhdplayerpour::result() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdplayerpour.result)
  return result_;
}
inline void gclhdplayerpour::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdplayerpour.result)
}

// optional int32 userid = 2;
inline bool gclhdplayerpour::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gclhdplayerpour::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gclhdplayerpour::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gclhdplayerpour::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 gclhdplayerpour::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdplayerpour.userid)
  return userid_;
}
inline void gclhdplayerpour::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdplayerpour.userid)
}

// optional int32 pourarea = 3;
inline bool gclhdplayerpour::has_pourarea() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gclhdplayerpour::set_has_pourarea() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gclhdplayerpour::clear_has_pourarea() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gclhdplayerpour::clear_pourarea() {
  pourarea_ = 0;
  clear_has_pourarea();
}
inline ::google::protobuf::int32 gclhdplayerpour::pourarea() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdplayerpour.pourarea)
  return pourarea_;
}
inline void gclhdplayerpour::set_pourarea(::google::protobuf::int32 value) {
  set_has_pourarea();
  pourarea_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdplayerpour.pourarea)
}

// optional int32 pourscore = 4;
inline bool gclhdplayerpour::has_pourscore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gclhdplayerpour::set_has_pourscore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gclhdplayerpour::clear_has_pourscore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gclhdplayerpour::clear_pourscore() {
  pourscore_ = 0;
  clear_has_pourscore();
}
inline ::google::protobuf::int32 gclhdplayerpour::pourscore() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdplayerpour.pourscore)
  return pourscore_;
}
inline void gclhdplayerpour::set_pourscore(::google::protobuf::int32 value) {
  set_has_pourscore();
  pourscore_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdplayerpour.pourscore)
}

// -------------------------------------------------------------------

// gclhdblightcard

// optional int32 result = 1;
inline bool gclhdblightcard::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gclhdblightcard::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gclhdblightcard::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gclhdblightcard::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gclhdblightcard::result() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdblightcard.result)
  return result_;
}
inline void gclhdblightcard::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdblightcard.result)
}

// repeated .NFMsg.lhd_areainfo area_info = 2;
inline int gclhdblightcard::area_info_size() const {
  return area_info_.size();
}
inline ::NFMsg::lhd_areainfo* gclhdblightcard::mutable_area_info(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.gclhdblightcard.area_info)
  return area_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_areainfo >*
gclhdblightcard::mutable_area_info() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.gclhdblightcard.area_info)
  return &area_info_;
}
inline const ::NFMsg::lhd_areainfo& gclhdblightcard::area_info(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdblightcard.area_info)
  return area_info_.Get(index);
}
inline ::NFMsg::lhd_areainfo* gclhdblightcard::add_area_info() {
  // @@protoc_insertion_point(field_add:NFMsg.gclhdblightcard.area_info)
  return area_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_areainfo >&
gclhdblightcard::area_info() const {
  // @@protoc_insertion_point(field_list:NFMsg.gclhdblightcard.area_info)
  return area_info_;
}

// -------------------------------------------------------------------

// gclhdgamecount

// optional int32 result = 1;
inline bool gclhdgamecount::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gclhdgamecount::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gclhdgamecount::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gclhdgamecount::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gclhdgamecount::result() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdgamecount.result)
  return result_;
}
inline void gclhdgamecount::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdgamecount.result)
}

// optional .NFMsg.lhd_gamecount count = 2;
inline bool gclhdgamecount::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gclhdgamecount::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gclhdgamecount::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::NFMsg::lhd_gamecount& gclhdgamecount::_internal_count() const {
  return *count_;
}
inline const ::NFMsg::lhd_gamecount& gclhdgamecount::count() const {
  const ::NFMsg::lhd_gamecount* p = count_;
  // @@protoc_insertion_point(field_get:NFMsg.gclhdgamecount.count)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::lhd_gamecount*>(
      &::NFMsg::_lhd_gamecount_default_instance_);
}
inline ::NFMsg::lhd_gamecount* gclhdgamecount::release_count() {
  // @@protoc_insertion_point(field_release:NFMsg.gclhdgamecount.count)
  clear_has_count();
  ::NFMsg::lhd_gamecount* temp = count_;
  count_ = NULL;
  return temp;
}
inline ::NFMsg::lhd_gamecount* gclhdgamecount::mutable_count() {
  set_has_count();
  if (count_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::lhd_gamecount>(GetArenaNoVirtual());
    count_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.gclhdgamecount.count)
  return count_;
}
inline void gclhdgamecount::set_allocated_count(::NFMsg::lhd_gamecount* count) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(count_);
  }
  if (count) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      count = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, count, submessage_arena);
    }
    set_has_count();
  } else {
    clear_has_count();
  }
  count_ = count;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.gclhdgamecount.count)
}

// -------------------------------------------------------------------

// gclhdgamefinish

// optional int32 result = 1;
inline bool gclhdgamefinish::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gclhdgamefinish::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gclhdgamefinish::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gclhdgamefinish::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 gclhdgamefinish::result() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdgamefinish.result)
  return result_;
}
inline void gclhdgamefinish::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdgamefinish.result)
}

// optional int32 starttime = 2;
inline bool gclhdgamefinish::has_starttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gclhdgamefinish::set_has_starttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gclhdgamefinish::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gclhdgamefinish::clear_starttime() {
  starttime_ = 0;
  clear_has_starttime();
}
inline ::google::protobuf::int32 gclhdgamefinish::starttime() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdgamefinish.starttime)
  return starttime_;
}
inline void gclhdgamefinish::set_starttime(::google::protobuf::int32 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdgamefinish.starttime)
}

// optional int32 endtime = 3;
inline bool gclhdgamefinish::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gclhdgamefinish::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gclhdgamefinish::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gclhdgamefinish::clear_endtime() {
  endtime_ = 0;
  clear_has_endtime();
}
inline ::google::protobuf::int32 gclhdgamefinish::endtime() const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdgamefinish.endtime)
  return endtime_;
}
inline void gclhdgamefinish::set_endtime(::google::protobuf::int32 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.gclhdgamefinish.endtime)
}

// repeated .NFMsg.lhd_gamecount gamecount = 4;
inline int gclhdgamefinish::gamecount_size() const {
  return gamecount_.size();
}
inline ::NFMsg::lhd_gamecount* gclhdgamefinish::mutable_gamecount(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.gclhdgamefinish.gamecount)
  return gamecount_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_gamecount >*
gclhdgamefinish::mutable_gamecount() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.gclhdgamefinish.gamecount)
  return &gamecount_;
}
inline const ::NFMsg::lhd_gamecount& gclhdgamefinish::gamecount(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.gclhdgamefinish.gamecount)
  return gamecount_.Get(index);
}
inline ::NFMsg::lhd_gamecount* gclhdgamefinish::add_gamecount() {
  // @@protoc_insertion_point(field_add:NFMsg.gclhdgamefinish.gamecount)
  return gamecount_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_gamecount >&
gclhdgamefinish::gamecount() const {
  // @@protoc_insertion_point(field_list:NFMsg.gclhdgamefinish.gamecount)
  return gamecount_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_msg_5flhd_2eproto
