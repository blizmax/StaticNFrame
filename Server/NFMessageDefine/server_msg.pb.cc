// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_msg.proto

#include "server_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_server_5fmsg_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_server_5fmsg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ServerInfoReport;
}  // namespace protobuf_server_5fmsg_2eproto
namespace NFMsg {
class ServerInfoReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerInfoReport>
      _instance;
} _ServerInfoReport_default_instance_;
class ServerInfoReportListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerInfoReportList>
      _instance;
} _ServerInfoReportList_default_instance_;
class ServerErrorLogMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerErrorLogMsg>
      _instance;
} _ServerErrorLogMsg_default_instance_;
}  // namespace NFMsg
namespace protobuf_server_5fmsg_2eproto {
static void InitDefaultsServerInfoReport() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ServerInfoReport_default_instance_;
    new (ptr) ::NFMsg::ServerInfoReport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ServerInfoReport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServerInfoReport =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServerInfoReport}, {}};

static void InitDefaultsServerInfoReportList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ServerInfoReportList_default_instance_;
    new (ptr) ::NFMsg::ServerInfoReportList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ServerInfoReportList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ServerInfoReportList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsServerInfoReportList}, {
      &protobuf_server_5fmsg_2eproto::scc_info_ServerInfoReport.base,}};

static void InitDefaultsServerErrorLogMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ServerErrorLogMsg_default_instance_;
    new (ptr) ::NFMsg::ServerErrorLogMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ServerErrorLogMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServerErrorLogMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServerErrorLogMsg}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ServerInfoReport.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerInfoReportList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerErrorLogMsg.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReport, server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReport, server_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReport, server_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReport, server_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReport, server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReport, server_http_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReport, server_max_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReport, server_cur_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReport, server_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReport, system_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReport, total_mem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReport, free_mem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReport, used_mem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReport, proc_cpu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReport, proc_mem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReport, proc_thread_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReport, proc_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReport, proc_cwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReport, proc_pid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReport, last_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReport, last_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReportList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerInfoReportList, server_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerErrorLogMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerErrorLogMsg, error_log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerErrorLogMsg, func_log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerErrorLogMsg, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerErrorLogMsg, server_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ServerErrorLogMsg, count_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NFMsg::ServerInfoReport)},
  { 26, -1, sizeof(::NFMsg::ServerInfoReportList)},
  { 32, -1, sizeof(::NFMsg::ServerErrorLogMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ServerInfoReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ServerInfoReportList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ServerErrorLogMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "server_msg.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020server_msg.proto\022\005NFMsg\"\277\003\n\020ServerInfo"
      "Report\022\021\n\tserver_id\030\001 \001(\005\022\023\n\013server_type"
      "\030\002 \001(\005\022\023\n\013server_name\030\003 \001(\t\022\021\n\tserver_ip"
      "\030\004 \001(\t\022\023\n\013server_port\030\005 \001(\005\022\030\n\020server_ht"
      "tp_port\030\006 \001(\005\022\031\n\021server_max_online\030\007 \001(\005"
      "\022\031\n\021server_cur_online\030\010 \001(\005\022\024\n\014server_st"
      "ate\030\t \001(\r\022\023\n\013system_info\030\n \001(\t\022\021\n\ttotal_"
      "mem\030\013 \001(\004\022\020\n\010free_mem\030\014 \001(\004\022\020\n\010used_mem\030"
      "\r \001(\004\022\020\n\010proc_cpu\030\016 \001(\001\022\020\n\010proc_mem\030\017 \001("
      "\004\022\023\n\013proc_thread\030\020 \001(\r\022\021\n\tproc_name\030\021 \001("
      "\t\022\020\n\010proc_cwd\030\022 \001(\t\022\020\n\010proc_pid\030\023 \001(\r\022\021\n"
      "\tlast_date\030\024 \001(\t\022\021\n\tlast_time\030\025 \001(\004\"D\n\024S"
      "erverInfoReportList\022,\n\013server_list\030\001 \003(\013"
      "2\027.NFMsg.ServerInfoReport\"o\n\021ServerError"
      "LogMsg\022\021\n\terror_log\030\001 \001(\t\022\020\n\010func_log\030\002 "
      "\001(\t\022\021\n\tplayer_id\030\003 \001(\004\022\023\n\013server_name\030\004 "
      "\001(\t\022\r\n\005count\030\005 \001(\r*Z\n\014EServerState\022\r\n\tES"
      "T_CRASH\020\000\022\016\n\nEST_NARMAL\020\001\022\014\n\010EST_BUSY\020\002\022"
      "\014\n\010EST_FIRE\020\003\022\017\n\013EST_MAINTEN\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 758);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server_msg.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_server_5fmsg_2eproto
namespace NFMsg {
const ::google::protobuf::EnumDescriptor* EServerState_descriptor() {
  protobuf_server_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_server_5fmsg_2eproto::file_level_enum_descriptors[0];
}
bool EServerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ServerInfoReport::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerInfoReport::kServerIdFieldNumber;
const int ServerInfoReport::kServerTypeFieldNumber;
const int ServerInfoReport::kServerNameFieldNumber;
const int ServerInfoReport::kServerIpFieldNumber;
const int ServerInfoReport::kServerPortFieldNumber;
const int ServerInfoReport::kServerHttpPortFieldNumber;
const int ServerInfoReport::kServerMaxOnlineFieldNumber;
const int ServerInfoReport::kServerCurOnlineFieldNumber;
const int ServerInfoReport::kServerStateFieldNumber;
const int ServerInfoReport::kSystemInfoFieldNumber;
const int ServerInfoReport::kTotalMemFieldNumber;
const int ServerInfoReport::kFreeMemFieldNumber;
const int ServerInfoReport::kUsedMemFieldNumber;
const int ServerInfoReport::kProcCpuFieldNumber;
const int ServerInfoReport::kProcMemFieldNumber;
const int ServerInfoReport::kProcThreadFieldNumber;
const int ServerInfoReport::kProcNameFieldNumber;
const int ServerInfoReport::kProcCwdFieldNumber;
const int ServerInfoReport::kProcPidFieldNumber;
const int ServerInfoReport::kLastDateFieldNumber;
const int ServerInfoReport::kLastTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerInfoReport::ServerInfoReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_5fmsg_2eproto::scc_info_ServerInfoReport.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ServerInfoReport)
}
ServerInfoReport::ServerInfoReport(const ServerInfoReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_name().size() > 0) {
    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  server_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_ip().size() > 0) {
    server_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_ip_);
  }
  system_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.system_info().size() > 0) {
    system_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_info_);
  }
  proc_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proc_name().size() > 0) {
    proc_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proc_name_);
  }
  proc_cwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proc_cwd().size() > 0) {
    proc_cwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proc_cwd_);
  }
  last_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.last_date().size() > 0) {
    last_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_date_);
  }
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&proc_pid_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(proc_pid_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ServerInfoReport)
}

void ServerInfoReport::SharedCtor() {
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proc_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proc_cwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proc_pid_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(proc_pid_));
}

ServerInfoReport::~ServerInfoReport() {
  // @@protoc_insertion_point(destructor:NFMsg.ServerInfoReport)
  SharedDtor();
}

void ServerInfoReport::SharedDtor() {
  server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proc_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proc_cwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerInfoReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerInfoReport::descriptor() {
  ::protobuf_server_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerInfoReport& ServerInfoReport::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_5fmsg_2eproto::scc_info_ServerInfoReport.base);
  return *internal_default_instance();
}


void ServerInfoReport::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ServerInfoReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proc_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proc_cwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proc_pid_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(proc_pid_));
  _internal_metadata_.Clear();
}

bool ServerInfoReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ServerInfoReport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 server_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_name().data(), static_cast<int>(this->server_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.ServerInfoReport.server_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_ip().data(), static_cast<int>(this->server_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.ServerInfoReport.server_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_http_port = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_http_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_max_online = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_max_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_cur_online = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_cur_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 server_state = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string system_info = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->system_info().data(), static_cast<int>(this->system_info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.ServerInfoReport.system_info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_mem = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_mem_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 free_mem = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &free_mem_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 used_mem = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &used_mem_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double proc_cpu = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &proc_cpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 proc_mem = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proc_mem_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 proc_thread = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_thread_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proc_name = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proc_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proc_name().data(), static_cast<int>(this->proc_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.ServerInfoReport.proc_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proc_cwd = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proc_cwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proc_cwd().data(), static_cast<int>(this->proc_cwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.ServerInfoReport.proc_cwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 proc_pid = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string last_date = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->last_date().data(), static_cast<int>(this->last_date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.ServerInfoReport.last_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 last_time = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ServerInfoReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ServerInfoReport)
  return false;
#undef DO_
}

void ServerInfoReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ServerInfoReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // int32 server_type = 2;
  if (this->server_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_type(), output);
  }

  // string server_name = 3;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.ServerInfoReport.server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->server_name(), output);
  }

  // string server_ip = 4;
  if (this->server_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_ip().data(), static_cast<int>(this->server_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.ServerInfoReport.server_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->server_ip(), output);
  }

  // int32 server_port = 5;
  if (this->server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->server_port(), output);
  }

  // int32 server_http_port = 6;
  if (this->server_http_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->server_http_port(), output);
  }

  // int32 server_max_online = 7;
  if (this->server_max_online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->server_max_online(), output);
  }

  // int32 server_cur_online = 8;
  if (this->server_cur_online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->server_cur_online(), output);
  }

  // uint32 server_state = 9;
  if (this->server_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->server_state(), output);
  }

  // string system_info = 10;
  if (this->system_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system_info().data(), static_cast<int>(this->system_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.ServerInfoReport.system_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->system_info(), output);
  }

  // uint64 total_mem = 11;
  if (this->total_mem() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->total_mem(), output);
  }

  // uint64 free_mem = 12;
  if (this->free_mem() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->free_mem(), output);
  }

  // uint64 used_mem = 13;
  if (this->used_mem() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->used_mem(), output);
  }

  // double proc_cpu = 14;
  if (this->proc_cpu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->proc_cpu(), output);
  }

  // uint64 proc_mem = 15;
  if (this->proc_mem() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->proc_mem(), output);
  }

  // uint32 proc_thread = 16;
  if (this->proc_thread() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->proc_thread(), output);
  }

  // string proc_name = 17;
  if (this->proc_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proc_name().data(), static_cast<int>(this->proc_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.ServerInfoReport.proc_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->proc_name(), output);
  }

  // string proc_cwd = 18;
  if (this->proc_cwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proc_cwd().data(), static_cast<int>(this->proc_cwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.ServerInfoReport.proc_cwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->proc_cwd(), output);
  }

  // uint32 proc_pid = 19;
  if (this->proc_pid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->proc_pid(), output);
  }

  // string last_date = 20;
  if (this->last_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_date().data(), static_cast<int>(this->last_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.ServerInfoReport.last_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->last_date(), output);
  }

  // uint64 last_time = 21;
  if (this->last_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->last_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ServerInfoReport)
}

::google::protobuf::uint8* ServerInfoReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ServerInfoReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // int32 server_type = 2;
  if (this->server_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server_type(), target);
  }

  // string server_name = 3;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.ServerInfoReport.server_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_name(), target);
  }

  // string server_ip = 4;
  if (this->server_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_ip().data(), static_cast<int>(this->server_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.ServerInfoReport.server_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->server_ip(), target);
  }

  // int32 server_port = 5;
  if (this->server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->server_port(), target);
  }

  // int32 server_http_port = 6;
  if (this->server_http_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->server_http_port(), target);
  }

  // int32 server_max_online = 7;
  if (this->server_max_online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->server_max_online(), target);
  }

  // int32 server_cur_online = 8;
  if (this->server_cur_online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->server_cur_online(), target);
  }

  // uint32 server_state = 9;
  if (this->server_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->server_state(), target);
  }

  // string system_info = 10;
  if (this->system_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system_info().data(), static_cast<int>(this->system_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.ServerInfoReport.system_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->system_info(), target);
  }

  // uint64 total_mem = 11;
  if (this->total_mem() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->total_mem(), target);
  }

  // uint64 free_mem = 12;
  if (this->free_mem() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->free_mem(), target);
  }

  // uint64 used_mem = 13;
  if (this->used_mem() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->used_mem(), target);
  }

  // double proc_cpu = 14;
  if (this->proc_cpu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->proc_cpu(), target);
  }

  // uint64 proc_mem = 15;
  if (this->proc_mem() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->proc_mem(), target);
  }

  // uint32 proc_thread = 16;
  if (this->proc_thread() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->proc_thread(), target);
  }

  // string proc_name = 17;
  if (this->proc_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proc_name().data(), static_cast<int>(this->proc_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.ServerInfoReport.proc_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->proc_name(), target);
  }

  // string proc_cwd = 18;
  if (this->proc_cwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proc_cwd().data(), static_cast<int>(this->proc_cwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.ServerInfoReport.proc_cwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->proc_cwd(), target);
  }

  // uint32 proc_pid = 19;
  if (this->proc_pid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->proc_pid(), target);
  }

  // string last_date = 20;
  if (this->last_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_date().data(), static_cast<int>(this->last_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.ServerInfoReport.last_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->last_date(), target);
  }

  // uint64 last_time = 21;
  if (this->last_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->last_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ServerInfoReport)
  return target;
}

size_t ServerInfoReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ServerInfoReport)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string server_name = 3;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_name());
  }

  // string server_ip = 4;
  if (this->server_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_ip());
  }

  // string system_info = 10;
  if (this->system_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->system_info());
  }

  // string proc_name = 17;
  if (this->proc_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proc_name());
  }

  // string proc_cwd = 18;
  if (this->proc_cwd().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proc_cwd());
  }

  // string last_date = 20;
  if (this->last_date().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->last_date());
  }

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  // int32 server_type = 2;
  if (this->server_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_type());
  }

  // int32 server_port = 5;
  if (this->server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_port());
  }

  // int32 server_http_port = 6;
  if (this->server_http_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_http_port());
  }

  // int32 server_max_online = 7;
  if (this->server_max_online() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_max_online());
  }

  // int32 server_cur_online = 8;
  if (this->server_cur_online() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_cur_online());
  }

  // uint64 total_mem = 11;
  if (this->total_mem() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_mem());
  }

  // uint64 free_mem = 12;
  if (this->free_mem() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->free_mem());
  }

  // uint32 server_state = 9;
  if (this->server_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_state());
  }

  // uint32 proc_thread = 16;
  if (this->proc_thread() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->proc_thread());
  }

  // uint64 used_mem = 13;
  if (this->used_mem() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->used_mem());
  }

  // double proc_cpu = 14;
  if (this->proc_cpu() != 0) {
    total_size += 1 + 8;
  }

  // uint64 proc_mem = 15;
  if (this->proc_mem() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->proc_mem());
  }

  // uint64 last_time = 21;
  if (this->last_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->last_time());
  }

  // uint32 proc_pid = 19;
  if (this->proc_pid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->proc_pid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerInfoReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ServerInfoReport)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInfoReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerInfoReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ServerInfoReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ServerInfoReport)
    MergeFrom(*source);
  }
}

void ServerInfoReport::MergeFrom(const ServerInfoReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ServerInfoReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.server_ip().size() > 0) {

    server_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_ip_);
  }
  if (from.system_info().size() > 0) {

    system_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_info_);
  }
  if (from.proc_name().size() > 0) {

    proc_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proc_name_);
  }
  if (from.proc_cwd().size() > 0) {

    proc_cwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proc_cwd_);
  }
  if (from.last_date().size() > 0) {

    last_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_date_);
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
  if (from.server_type() != 0) {
    set_server_type(from.server_type());
  }
  if (from.server_port() != 0) {
    set_server_port(from.server_port());
  }
  if (from.server_http_port() != 0) {
    set_server_http_port(from.server_http_port());
  }
  if (from.server_max_online() != 0) {
    set_server_max_online(from.server_max_online());
  }
  if (from.server_cur_online() != 0) {
    set_server_cur_online(from.server_cur_online());
  }
  if (from.total_mem() != 0) {
    set_total_mem(from.total_mem());
  }
  if (from.free_mem() != 0) {
    set_free_mem(from.free_mem());
  }
  if (from.server_state() != 0) {
    set_server_state(from.server_state());
  }
  if (from.proc_thread() != 0) {
    set_proc_thread(from.proc_thread());
  }
  if (from.used_mem() != 0) {
    set_used_mem(from.used_mem());
  }
  if (from.proc_cpu() != 0) {
    set_proc_cpu(from.proc_cpu());
  }
  if (from.proc_mem() != 0) {
    set_proc_mem(from.proc_mem());
  }
  if (from.last_time() != 0) {
    set_last_time(from.last_time());
  }
  if (from.proc_pid() != 0) {
    set_proc_pid(from.proc_pid());
  }
}

void ServerInfoReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ServerInfoReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfoReport::CopyFrom(const ServerInfoReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ServerInfoReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfoReport::IsInitialized() const {
  return true;
}

void ServerInfoReport::Swap(ServerInfoReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerInfoReport::InternalSwap(ServerInfoReport* other) {
  using std::swap;
  server_name_.Swap(&other->server_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  server_ip_.Swap(&other->server_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  system_info_.Swap(&other->system_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  proc_name_.Swap(&other->proc_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  proc_cwd_.Swap(&other->proc_cwd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_date_.Swap(&other->last_date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_id_, other->server_id_);
  swap(server_type_, other->server_type_);
  swap(server_port_, other->server_port_);
  swap(server_http_port_, other->server_http_port_);
  swap(server_max_online_, other->server_max_online_);
  swap(server_cur_online_, other->server_cur_online_);
  swap(total_mem_, other->total_mem_);
  swap(free_mem_, other->free_mem_);
  swap(server_state_, other->server_state_);
  swap(proc_thread_, other->proc_thread_);
  swap(used_mem_, other->used_mem_);
  swap(proc_cpu_, other->proc_cpu_);
  swap(proc_mem_, other->proc_mem_);
  swap(last_time_, other->last_time_);
  swap(proc_pid_, other->proc_pid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerInfoReport::GetMetadata() const {
  protobuf_server_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerInfoReportList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerInfoReportList::kServerListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerInfoReportList::ServerInfoReportList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_5fmsg_2eproto::scc_info_ServerInfoReportList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ServerInfoReportList)
}
ServerInfoReportList::ServerInfoReportList(const ServerInfoReportList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      server_list_(from.server_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.ServerInfoReportList)
}

void ServerInfoReportList::SharedCtor() {
}

ServerInfoReportList::~ServerInfoReportList() {
  // @@protoc_insertion_point(destructor:NFMsg.ServerInfoReportList)
  SharedDtor();
}

void ServerInfoReportList::SharedDtor() {
}

void ServerInfoReportList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerInfoReportList::descriptor() {
  ::protobuf_server_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerInfoReportList& ServerInfoReportList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_5fmsg_2eproto::scc_info_ServerInfoReportList.base);
  return *internal_default_instance();
}


void ServerInfoReportList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ServerInfoReportList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_list_.Clear();
  _internal_metadata_.Clear();
}

bool ServerInfoReportList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ServerInfoReportList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.ServerInfoReport server_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_server_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ServerInfoReportList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ServerInfoReportList)
  return false;
#undef DO_
}

void ServerInfoReportList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ServerInfoReportList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.ServerInfoReport server_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->server_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->server_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ServerInfoReportList)
}

::google::protobuf::uint8* ServerInfoReportList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ServerInfoReportList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.ServerInfoReport server_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->server_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->server_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ServerInfoReportList)
  return target;
}

size_t ServerInfoReportList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ServerInfoReportList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .NFMsg.ServerInfoReport server_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->server_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->server_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerInfoReportList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ServerInfoReportList)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInfoReportList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerInfoReportList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ServerInfoReportList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ServerInfoReportList)
    MergeFrom(*source);
  }
}

void ServerInfoReportList::MergeFrom(const ServerInfoReportList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ServerInfoReportList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_list_.MergeFrom(from.server_list_);
}

void ServerInfoReportList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ServerInfoReportList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfoReportList::CopyFrom(const ServerInfoReportList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ServerInfoReportList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfoReportList::IsInitialized() const {
  return true;
}

void ServerInfoReportList::Swap(ServerInfoReportList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerInfoReportList::InternalSwap(ServerInfoReportList* other) {
  using std::swap;
  CastToBase(&server_list_)->InternalSwap(CastToBase(&other->server_list_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerInfoReportList::GetMetadata() const {
  protobuf_server_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerErrorLogMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerErrorLogMsg::kErrorLogFieldNumber;
const int ServerErrorLogMsg::kFuncLogFieldNumber;
const int ServerErrorLogMsg::kPlayerIdFieldNumber;
const int ServerErrorLogMsg::kServerNameFieldNumber;
const int ServerErrorLogMsg::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerErrorLogMsg::ServerErrorLogMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_5fmsg_2eproto::scc_info_ServerErrorLogMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ServerErrorLogMsg)
}
ServerErrorLogMsg::ServerErrorLogMsg(const ServerErrorLogMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_log().size() > 0) {
    error_log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_log_);
  }
  func_log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.func_log().size() > 0) {
    func_log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.func_log_);
  }
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_name().size() > 0) {
    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ServerErrorLogMsg)
}

void ServerErrorLogMsg::SharedCtor() {
  error_log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  func_log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(count_));
}

ServerErrorLogMsg::~ServerErrorLogMsg() {
  // @@protoc_insertion_point(destructor:NFMsg.ServerErrorLogMsg)
  SharedDtor();
}

void ServerErrorLogMsg::SharedDtor() {
  error_log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  func_log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerErrorLogMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerErrorLogMsg::descriptor() {
  ::protobuf_server_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerErrorLogMsg& ServerErrorLogMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_5fmsg_2eproto::scc_info_ServerErrorLogMsg.base);
  return *internal_default_instance();
}


void ServerErrorLogMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ServerErrorLogMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  func_log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

bool ServerErrorLogMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ServerErrorLogMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string error_log = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_log()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_log().data(), static_cast<int>(this->error_log().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.ServerErrorLogMsg.error_log"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string func_log = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_func_log()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->func_log().data(), static_cast<int>(this->func_log().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.ServerErrorLogMsg.func_log"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 player_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_name().data(), static_cast<int>(this->server_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.ServerErrorLogMsg.server_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ServerErrorLogMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ServerErrorLogMsg)
  return false;
#undef DO_
}

void ServerErrorLogMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ServerErrorLogMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error_log = 1;
  if (this->error_log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_log().data(), static_cast<int>(this->error_log().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.ServerErrorLogMsg.error_log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error_log(), output);
  }

  // string func_log = 2;
  if (this->func_log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->func_log().data(), static_cast<int>(this->func_log().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.ServerErrorLogMsg.func_log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->func_log(), output);
  }

  // uint64 player_id = 3;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->player_id(), output);
  }

  // string server_name = 4;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.ServerErrorLogMsg.server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->server_name(), output);
  }

  // uint32 count = 5;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ServerErrorLogMsg)
}

::google::protobuf::uint8* ServerErrorLogMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ServerErrorLogMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error_log = 1;
  if (this->error_log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_log().data(), static_cast<int>(this->error_log().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.ServerErrorLogMsg.error_log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error_log(), target);
  }

  // string func_log = 2;
  if (this->func_log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->func_log().data(), static_cast<int>(this->func_log().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.ServerErrorLogMsg.func_log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->func_log(), target);
  }

  // uint64 player_id = 3;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->player_id(), target);
  }

  // string server_name = 4;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.ServerErrorLogMsg.server_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->server_name(), target);
  }

  // uint32 count = 5;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ServerErrorLogMsg)
  return target;
}

size_t ServerErrorLogMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ServerErrorLogMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string error_log = 1;
  if (this->error_log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_log());
  }

  // string func_log = 2;
  if (this->func_log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->func_log());
  }

  // string server_name = 4;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_name());
  }

  // uint64 player_id = 3;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_id());
  }

  // uint32 count = 5;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerErrorLogMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ServerErrorLogMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerErrorLogMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerErrorLogMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ServerErrorLogMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ServerErrorLogMsg)
    MergeFrom(*source);
  }
}

void ServerErrorLogMsg::MergeFrom(const ServerErrorLogMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ServerErrorLogMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_log().size() > 0) {

    error_log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_log_);
  }
  if (from.func_log().size() > 0) {

    func_log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.func_log_);
  }
  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void ServerErrorLogMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ServerErrorLogMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerErrorLogMsg::CopyFrom(const ServerErrorLogMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ServerErrorLogMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerErrorLogMsg::IsInitialized() const {
  return true;
}

void ServerErrorLogMsg::Swap(ServerErrorLogMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerErrorLogMsg::InternalSwap(ServerErrorLogMsg* other) {
  using std::swap;
  error_log_.Swap(&other->error_log_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  func_log_.Swap(&other->func_log_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  server_name_.Swap(&other->server_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerErrorLogMsg::GetMetadata() const {
  protobuf_server_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NFMsg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ServerInfoReport* Arena::CreateMaybeMessage< ::NFMsg::ServerInfoReport >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ServerInfoReport >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ServerInfoReportList* Arena::CreateMaybeMessage< ::NFMsg::ServerInfoReportList >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ServerInfoReportList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ServerErrorLogMsg* Arena::CreateMaybeMessage< ::NFMsg::ServerErrorLogMsg >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ServerErrorLogMsg >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
