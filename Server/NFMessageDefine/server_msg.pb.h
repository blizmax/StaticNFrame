// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_msg.proto

#ifndef PROTOBUF_INCLUDED_server_5fmsg_2eproto
#define PROTOBUF_INCLUDED_server_5fmsg_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_server_5fmsg_2eproto 

namespace protobuf_server_5fmsg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_server_5fmsg_2eproto
namespace NFMsg {
class ServerInfoReport;
class ServerInfoReportDefaultTypeInternal;
extern ServerInfoReportDefaultTypeInternal _ServerInfoReport_default_instance_;
class ServerInfoReportList;
class ServerInfoReportListDefaultTypeInternal;
extern ServerInfoReportListDefaultTypeInternal _ServerInfoReportList_default_instance_;
}  // namespace NFMsg
namespace google {
namespace protobuf {
template<> ::NFMsg::ServerInfoReport* Arena::CreateMaybeMessage<::NFMsg::ServerInfoReport>(Arena*);
template<> ::NFMsg::ServerInfoReportList* Arena::CreateMaybeMessage<::NFMsg::ServerInfoReportList>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NFMsg {

enum EServerState {
  EST_CRASH = 0,
  EST_NARMAL = 1,
  EST_BUSY = 2,
  EST_FIRE = 3,
  EST_MAINTEN = 4,
  EServerState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EServerState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EServerState_IsValid(int value);
const EServerState EServerState_MIN = EST_CRASH;
const EServerState EServerState_MAX = EST_MAINTEN;
const int EServerState_ARRAYSIZE = EServerState_MAX + 1;

const ::google::protobuf::EnumDescriptor* EServerState_descriptor();
inline const ::std::string& EServerState_Name(EServerState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EServerState_descriptor(), value);
}
inline bool EServerState_Parse(
    const ::std::string& name, EServerState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EServerState>(
    EServerState_descriptor(), name, value);
}
// ===================================================================

class ServerInfoReport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ServerInfoReport) */ {
 public:
  ServerInfoReport();
  virtual ~ServerInfoReport();

  ServerInfoReport(const ServerInfoReport& from);

  inline ServerInfoReport& operator=(const ServerInfoReport& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfoReport(ServerInfoReport&& from) noexcept
    : ServerInfoReport() {
    *this = ::std::move(from);
  }

  inline ServerInfoReport& operator=(ServerInfoReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfoReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfoReport* internal_default_instance() {
    return reinterpret_cast<const ServerInfoReport*>(
               &_ServerInfoReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ServerInfoReport* other);
  friend void swap(ServerInfoReport& a, ServerInfoReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfoReport* New() const final {
    return CreateMaybeMessage<ServerInfoReport>(NULL);
  }

  ServerInfoReport* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfoReport>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerInfoReport& from);
  void MergeFrom(const ServerInfoReport& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfoReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_name = 3;
  void clear_server_name();
  static const int kServerNameFieldNumber = 3;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // string server_ip = 4;
  void clear_server_ip();
  static const int kServerIpFieldNumber = 4;
  const ::std::string& server_ip() const;
  void set_server_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_server_ip(::std::string&& value);
  #endif
  void set_server_ip(const char* value);
  void set_server_ip(const char* value, size_t size);
  ::std::string* mutable_server_ip();
  ::std::string* release_server_ip();
  void set_allocated_server_ip(::std::string* server_ip);

  // string system_info = 10;
  void clear_system_info();
  static const int kSystemInfoFieldNumber = 10;
  const ::std::string& system_info() const;
  void set_system_info(const ::std::string& value);
  #if LANG_CXX11
  void set_system_info(::std::string&& value);
  #endif
  void set_system_info(const char* value);
  void set_system_info(const char* value, size_t size);
  ::std::string* mutable_system_info();
  ::std::string* release_system_info();
  void set_allocated_system_info(::std::string* system_info);

  // string proc_name = 17;
  void clear_proc_name();
  static const int kProcNameFieldNumber = 17;
  const ::std::string& proc_name() const;
  void set_proc_name(const ::std::string& value);
  #if LANG_CXX11
  void set_proc_name(::std::string&& value);
  #endif
  void set_proc_name(const char* value);
  void set_proc_name(const char* value, size_t size);
  ::std::string* mutable_proc_name();
  ::std::string* release_proc_name();
  void set_allocated_proc_name(::std::string* proc_name);

  // string proc_cwd = 18;
  void clear_proc_cwd();
  static const int kProcCwdFieldNumber = 18;
  const ::std::string& proc_cwd() const;
  void set_proc_cwd(const ::std::string& value);
  #if LANG_CXX11
  void set_proc_cwd(::std::string&& value);
  #endif
  void set_proc_cwd(const char* value);
  void set_proc_cwd(const char* value, size_t size);
  ::std::string* mutable_proc_cwd();
  ::std::string* release_proc_cwd();
  void set_allocated_proc_cwd(::std::string* proc_cwd);

  // string last_date = 20;
  void clear_last_date();
  static const int kLastDateFieldNumber = 20;
  const ::std::string& last_date() const;
  void set_last_date(const ::std::string& value);
  #if LANG_CXX11
  void set_last_date(::std::string&& value);
  #endif
  void set_last_date(const char* value);
  void set_last_date(const char* value, size_t size);
  ::std::string* mutable_last_date();
  ::std::string* release_last_date();
  void set_allocated_last_date(::std::string* last_date);

  // int32 server_id = 1;
  void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  ::google::protobuf::int32 server_id() const;
  void set_server_id(::google::protobuf::int32 value);

  // int32 server_type = 2;
  void clear_server_type();
  static const int kServerTypeFieldNumber = 2;
  ::google::protobuf::int32 server_type() const;
  void set_server_type(::google::protobuf::int32 value);

  // int32 server_port = 5;
  void clear_server_port();
  static const int kServerPortFieldNumber = 5;
  ::google::protobuf::int32 server_port() const;
  void set_server_port(::google::protobuf::int32 value);

  // int32 server_http_port = 6;
  void clear_server_http_port();
  static const int kServerHttpPortFieldNumber = 6;
  ::google::protobuf::int32 server_http_port() const;
  void set_server_http_port(::google::protobuf::int32 value);

  // int32 server_max_online = 7;
  void clear_server_max_online();
  static const int kServerMaxOnlineFieldNumber = 7;
  ::google::protobuf::int32 server_max_online() const;
  void set_server_max_online(::google::protobuf::int32 value);

  // int32 server_cur_online = 8;
  void clear_server_cur_online();
  static const int kServerCurOnlineFieldNumber = 8;
  ::google::protobuf::int32 server_cur_online() const;
  void set_server_cur_online(::google::protobuf::int32 value);

  // uint64 total_mem = 11;
  void clear_total_mem();
  static const int kTotalMemFieldNumber = 11;
  ::google::protobuf::uint64 total_mem() const;
  void set_total_mem(::google::protobuf::uint64 value);

  // uint64 free_mem = 12;
  void clear_free_mem();
  static const int kFreeMemFieldNumber = 12;
  ::google::protobuf::uint64 free_mem() const;
  void set_free_mem(::google::protobuf::uint64 value);

  // uint32 server_state = 9;
  void clear_server_state();
  static const int kServerStateFieldNumber = 9;
  ::google::protobuf::uint32 server_state() const;
  void set_server_state(::google::protobuf::uint32 value);

  // uint32 proc_thread = 16;
  void clear_proc_thread();
  static const int kProcThreadFieldNumber = 16;
  ::google::protobuf::uint32 proc_thread() const;
  void set_proc_thread(::google::protobuf::uint32 value);

  // uint64 used_mem = 13;
  void clear_used_mem();
  static const int kUsedMemFieldNumber = 13;
  ::google::protobuf::uint64 used_mem() const;
  void set_used_mem(::google::protobuf::uint64 value);

  // double proc_cpu = 14;
  void clear_proc_cpu();
  static const int kProcCpuFieldNumber = 14;
  double proc_cpu() const;
  void set_proc_cpu(double value);

  // uint64 proc_mem = 15;
  void clear_proc_mem();
  static const int kProcMemFieldNumber = 15;
  ::google::protobuf::uint64 proc_mem() const;
  void set_proc_mem(::google::protobuf::uint64 value);

  // uint64 last_time = 21;
  void clear_last_time();
  static const int kLastTimeFieldNumber = 21;
  ::google::protobuf::uint64 last_time() const;
  void set_last_time(::google::protobuf::uint64 value);

  // uint32 proc_pid = 19;
  void clear_proc_pid();
  static const int kProcPidFieldNumber = 19;
  ::google::protobuf::uint32 proc_pid() const;
  void set_proc_pid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ServerInfoReport)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr server_ip_;
  ::google::protobuf::internal::ArenaStringPtr system_info_;
  ::google::protobuf::internal::ArenaStringPtr proc_name_;
  ::google::protobuf::internal::ArenaStringPtr proc_cwd_;
  ::google::protobuf::internal::ArenaStringPtr last_date_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 server_type_;
  ::google::protobuf::int32 server_port_;
  ::google::protobuf::int32 server_http_port_;
  ::google::protobuf::int32 server_max_online_;
  ::google::protobuf::int32 server_cur_online_;
  ::google::protobuf::uint64 total_mem_;
  ::google::protobuf::uint64 free_mem_;
  ::google::protobuf::uint32 server_state_;
  ::google::protobuf::uint32 proc_thread_;
  ::google::protobuf::uint64 used_mem_;
  double proc_cpu_;
  ::google::protobuf::uint64 proc_mem_;
  ::google::protobuf::uint64 last_time_;
  ::google::protobuf::uint32 proc_pid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_5fmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerInfoReportList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ServerInfoReportList) */ {
 public:
  ServerInfoReportList();
  virtual ~ServerInfoReportList();

  ServerInfoReportList(const ServerInfoReportList& from);

  inline ServerInfoReportList& operator=(const ServerInfoReportList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfoReportList(ServerInfoReportList&& from) noexcept
    : ServerInfoReportList() {
    *this = ::std::move(from);
  }

  inline ServerInfoReportList& operator=(ServerInfoReportList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfoReportList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfoReportList* internal_default_instance() {
    return reinterpret_cast<const ServerInfoReportList*>(
               &_ServerInfoReportList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ServerInfoReportList* other);
  friend void swap(ServerInfoReportList& a, ServerInfoReportList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfoReportList* New() const final {
    return CreateMaybeMessage<ServerInfoReportList>(NULL);
  }

  ServerInfoReportList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfoReportList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerInfoReportList& from);
  void MergeFrom(const ServerInfoReportList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfoReportList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.ServerInfoReport server_list = 1;
  int server_list_size() const;
  void clear_server_list();
  static const int kServerListFieldNumber = 1;
  ::NFMsg::ServerInfoReport* mutable_server_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::ServerInfoReport >*
      mutable_server_list();
  const ::NFMsg::ServerInfoReport& server_list(int index) const;
  ::NFMsg::ServerInfoReport* add_server_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::ServerInfoReport >&
      server_list() const;

  // @@protoc_insertion_point(class_scope:NFMsg.ServerInfoReportList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::ServerInfoReport > server_list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_5fmsg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerInfoReport

// int32 server_id = 1;
inline void ServerInfoReport::clear_server_id() {
  server_id_ = 0;
}
inline ::google::protobuf::int32 ServerInfoReport::server_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.server_id)
  return server_id_;
}
inline void ServerInfoReport::set_server_id(::google::protobuf::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.server_id)
}

// int32 server_type = 2;
inline void ServerInfoReport::clear_server_type() {
  server_type_ = 0;
}
inline ::google::protobuf::int32 ServerInfoReport::server_type() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.server_type)
  return server_type_;
}
inline void ServerInfoReport::set_server_type(::google::protobuf::int32 value) {
  
  server_type_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.server_type)
}

// string server_name = 3;
inline void ServerInfoReport::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReport::server_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.server_name)
  return server_name_.GetNoArena();
}
inline void ServerInfoReport::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.server_name)
}
#if LANG_CXX11
inline void ServerInfoReport::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ServerInfoReport.server_name)
}
#endif
inline void ServerInfoReport::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ServerInfoReport.server_name)
}
inline void ServerInfoReport::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ServerInfoReport.server_name)
}
inline ::std::string* ServerInfoReport::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ServerInfoReport.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReport::release_server_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ServerInfoReport.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ServerInfoReport.server_name)
}

// string server_ip = 4;
inline void ServerInfoReport::clear_server_ip() {
  server_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReport::server_ip() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.server_ip)
  return server_ip_.GetNoArena();
}
inline void ServerInfoReport::set_server_ip(const ::std::string& value) {
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.server_ip)
}
#if LANG_CXX11
inline void ServerInfoReport::set_server_ip(::std::string&& value) {
  
  server_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ServerInfoReport.server_ip)
}
#endif
inline void ServerInfoReport::set_server_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ServerInfoReport.server_ip)
}
inline void ServerInfoReport::set_server_ip(const char* value, size_t size) {
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ServerInfoReport.server_ip)
}
inline ::std::string* ServerInfoReport::mutable_server_ip() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ServerInfoReport.server_ip)
  return server_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReport::release_server_ip() {
  // @@protoc_insertion_point(field_release:NFMsg.ServerInfoReport.server_ip)
  
  return server_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_server_ip(::std::string* server_ip) {
  if (server_ip != NULL) {
    
  } else {
    
  }
  server_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_ip);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ServerInfoReport.server_ip)
}

// int32 server_port = 5;
inline void ServerInfoReport::clear_server_port() {
  server_port_ = 0;
}
inline ::google::protobuf::int32 ServerInfoReport::server_port() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.server_port)
  return server_port_;
}
inline void ServerInfoReport::set_server_port(::google::protobuf::int32 value) {
  
  server_port_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.server_port)
}

// int32 server_http_port = 6;
inline void ServerInfoReport::clear_server_http_port() {
  server_http_port_ = 0;
}
inline ::google::protobuf::int32 ServerInfoReport::server_http_port() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.server_http_port)
  return server_http_port_;
}
inline void ServerInfoReport::set_server_http_port(::google::protobuf::int32 value) {
  
  server_http_port_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.server_http_port)
}

// int32 server_max_online = 7;
inline void ServerInfoReport::clear_server_max_online() {
  server_max_online_ = 0;
}
inline ::google::protobuf::int32 ServerInfoReport::server_max_online() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.server_max_online)
  return server_max_online_;
}
inline void ServerInfoReport::set_server_max_online(::google::protobuf::int32 value) {
  
  server_max_online_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.server_max_online)
}

// int32 server_cur_online = 8;
inline void ServerInfoReport::clear_server_cur_online() {
  server_cur_online_ = 0;
}
inline ::google::protobuf::int32 ServerInfoReport::server_cur_online() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.server_cur_online)
  return server_cur_online_;
}
inline void ServerInfoReport::set_server_cur_online(::google::protobuf::int32 value) {
  
  server_cur_online_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.server_cur_online)
}

// uint32 server_state = 9;
inline void ServerInfoReport::clear_server_state() {
  server_state_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfoReport::server_state() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.server_state)
  return server_state_;
}
inline void ServerInfoReport::set_server_state(::google::protobuf::uint32 value) {
  
  server_state_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.server_state)
}

// string system_info = 10;
inline void ServerInfoReport::clear_system_info() {
  system_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReport::system_info() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.system_info)
  return system_info_.GetNoArena();
}
inline void ServerInfoReport::set_system_info(const ::std::string& value) {
  
  system_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.system_info)
}
#if LANG_CXX11
inline void ServerInfoReport::set_system_info(::std::string&& value) {
  
  system_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ServerInfoReport.system_info)
}
#endif
inline void ServerInfoReport::set_system_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  system_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ServerInfoReport.system_info)
}
inline void ServerInfoReport::set_system_info(const char* value, size_t size) {
  
  system_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ServerInfoReport.system_info)
}
inline ::std::string* ServerInfoReport::mutable_system_info() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ServerInfoReport.system_info)
  return system_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReport::release_system_info() {
  // @@protoc_insertion_point(field_release:NFMsg.ServerInfoReport.system_info)
  
  return system_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_system_info(::std::string* system_info) {
  if (system_info != NULL) {
    
  } else {
    
  }
  system_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system_info);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ServerInfoReport.system_info)
}

// uint64 total_mem = 11;
inline void ServerInfoReport::clear_total_mem() {
  total_mem_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ServerInfoReport::total_mem() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.total_mem)
  return total_mem_;
}
inline void ServerInfoReport::set_total_mem(::google::protobuf::uint64 value) {
  
  total_mem_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.total_mem)
}

// uint64 free_mem = 12;
inline void ServerInfoReport::clear_free_mem() {
  free_mem_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ServerInfoReport::free_mem() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.free_mem)
  return free_mem_;
}
inline void ServerInfoReport::set_free_mem(::google::protobuf::uint64 value) {
  
  free_mem_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.free_mem)
}

// uint64 used_mem = 13;
inline void ServerInfoReport::clear_used_mem() {
  used_mem_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ServerInfoReport::used_mem() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.used_mem)
  return used_mem_;
}
inline void ServerInfoReport::set_used_mem(::google::protobuf::uint64 value) {
  
  used_mem_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.used_mem)
}

// double proc_cpu = 14;
inline void ServerInfoReport::clear_proc_cpu() {
  proc_cpu_ = 0;
}
inline double ServerInfoReport::proc_cpu() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.proc_cpu)
  return proc_cpu_;
}
inline void ServerInfoReport::set_proc_cpu(double value) {
  
  proc_cpu_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.proc_cpu)
}

// uint64 proc_mem = 15;
inline void ServerInfoReport::clear_proc_mem() {
  proc_mem_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ServerInfoReport::proc_mem() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.proc_mem)
  return proc_mem_;
}
inline void ServerInfoReport::set_proc_mem(::google::protobuf::uint64 value) {
  
  proc_mem_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.proc_mem)
}

// uint32 proc_thread = 16;
inline void ServerInfoReport::clear_proc_thread() {
  proc_thread_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfoReport::proc_thread() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.proc_thread)
  return proc_thread_;
}
inline void ServerInfoReport::set_proc_thread(::google::protobuf::uint32 value) {
  
  proc_thread_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.proc_thread)
}

// string proc_name = 17;
inline void ServerInfoReport::clear_proc_name() {
  proc_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReport::proc_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.proc_name)
  return proc_name_.GetNoArena();
}
inline void ServerInfoReport::set_proc_name(const ::std::string& value) {
  
  proc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.proc_name)
}
#if LANG_CXX11
inline void ServerInfoReport::set_proc_name(::std::string&& value) {
  
  proc_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ServerInfoReport.proc_name)
}
#endif
inline void ServerInfoReport::set_proc_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  proc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ServerInfoReport.proc_name)
}
inline void ServerInfoReport::set_proc_name(const char* value, size_t size) {
  
  proc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ServerInfoReport.proc_name)
}
inline ::std::string* ServerInfoReport::mutable_proc_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ServerInfoReport.proc_name)
  return proc_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReport::release_proc_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ServerInfoReport.proc_name)
  
  return proc_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_proc_name(::std::string* proc_name) {
  if (proc_name != NULL) {
    
  } else {
    
  }
  proc_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proc_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ServerInfoReport.proc_name)
}

// string proc_cwd = 18;
inline void ServerInfoReport::clear_proc_cwd() {
  proc_cwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReport::proc_cwd() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.proc_cwd)
  return proc_cwd_.GetNoArena();
}
inline void ServerInfoReport::set_proc_cwd(const ::std::string& value) {
  
  proc_cwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.proc_cwd)
}
#if LANG_CXX11
inline void ServerInfoReport::set_proc_cwd(::std::string&& value) {
  
  proc_cwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ServerInfoReport.proc_cwd)
}
#endif
inline void ServerInfoReport::set_proc_cwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  proc_cwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ServerInfoReport.proc_cwd)
}
inline void ServerInfoReport::set_proc_cwd(const char* value, size_t size) {
  
  proc_cwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ServerInfoReport.proc_cwd)
}
inline ::std::string* ServerInfoReport::mutable_proc_cwd() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ServerInfoReport.proc_cwd)
  return proc_cwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReport::release_proc_cwd() {
  // @@protoc_insertion_point(field_release:NFMsg.ServerInfoReport.proc_cwd)
  
  return proc_cwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_proc_cwd(::std::string* proc_cwd) {
  if (proc_cwd != NULL) {
    
  } else {
    
  }
  proc_cwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proc_cwd);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ServerInfoReport.proc_cwd)
}

// uint32 proc_pid = 19;
inline void ServerInfoReport::clear_proc_pid() {
  proc_pid_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfoReport::proc_pid() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.proc_pid)
  return proc_pid_;
}
inline void ServerInfoReport::set_proc_pid(::google::protobuf::uint32 value) {
  
  proc_pid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.proc_pid)
}

// string last_date = 20;
inline void ServerInfoReport::clear_last_date() {
  last_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReport::last_date() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.last_date)
  return last_date_.GetNoArena();
}
inline void ServerInfoReport::set_last_date(const ::std::string& value) {
  
  last_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.last_date)
}
#if LANG_CXX11
inline void ServerInfoReport::set_last_date(::std::string&& value) {
  
  last_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ServerInfoReport.last_date)
}
#endif
inline void ServerInfoReport::set_last_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  last_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ServerInfoReport.last_date)
}
inline void ServerInfoReport::set_last_date(const char* value, size_t size) {
  
  last_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ServerInfoReport.last_date)
}
inline ::std::string* ServerInfoReport::mutable_last_date() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ServerInfoReport.last_date)
  return last_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReport::release_last_date() {
  // @@protoc_insertion_point(field_release:NFMsg.ServerInfoReport.last_date)
  
  return last_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_last_date(::std::string* last_date) {
  if (last_date != NULL) {
    
  } else {
    
  }
  last_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_date);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ServerInfoReport.last_date)
}

// uint64 last_time = 21;
inline void ServerInfoReport::clear_last_time() {
  last_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ServerInfoReport::last_time() const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReport.last_time)
  return last_time_;
}
inline void ServerInfoReport::set_last_time(::google::protobuf::uint64 value) {
  
  last_time_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ServerInfoReport.last_time)
}

// -------------------------------------------------------------------

// ServerInfoReportList

// repeated .NFMsg.ServerInfoReport server_list = 1;
inline int ServerInfoReportList::server_list_size() const {
  return server_list_.size();
}
inline void ServerInfoReportList::clear_server_list() {
  server_list_.Clear();
}
inline ::NFMsg::ServerInfoReport* ServerInfoReportList::mutable_server_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ServerInfoReportList.server_list)
  return server_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::ServerInfoReport >*
ServerInfoReportList::mutable_server_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ServerInfoReportList.server_list)
  return &server_list_;
}
inline const ::NFMsg::ServerInfoReport& ServerInfoReportList::server_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ServerInfoReportList.server_list)
  return server_list_.Get(index);
}
inline ::NFMsg::ServerInfoReport* ServerInfoReportList::add_server_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ServerInfoReportList.server_list)
  return server_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::ServerInfoReport >&
ServerInfoReportList::server_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ServerInfoReportList.server_list)
  return server_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NFMsg::EServerState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::EServerState>() {
  return ::NFMsg::EServerState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_server_5fmsg_2eproto
