// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sqlite_db.proto

#ifndef PROTOBUF_INCLUDED_sqlite_5fdb_2eproto
#define PROTOBUF_INCLUDED_sqlite_5fdb_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_sqlite_5fdb_2eproto 

namespace protobuf_sqlite_5fdb_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_sqlite_5fdb_2eproto
namespace proto {
namespace message {
class create_sqlite_table;
class create_sqlite_tableDefaultTypeInternal;
extern create_sqlite_tableDefaultTypeInternal _create_sqlite_table_default_instance_;
class message_sqlite_base;
class message_sqlite_baseDefaultTypeInternal;
extern message_sqlite_baseDefaultTypeInternal _message_sqlite_base_default_instance_;
class table_user;
class table_userDefaultTypeInternal;
extern table_userDefaultTypeInternal _table_user_default_instance_;
}  // namespace message
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::message::create_sqlite_table* Arena::CreateMaybeMessage<::proto::message::create_sqlite_table>(Arena*);
template<> ::proto::message::message_sqlite_base* Arena::CreateMaybeMessage<::proto::message::message_sqlite_base>(Arena*);
template<> ::proto::message::table_user* Arena::CreateMaybeMessage<::proto::message::table_user>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace message {

// ===================================================================

class message_sqlite_base : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.message.message_sqlite_base) */ {
 public:
  message_sqlite_base();
  virtual ~message_sqlite_base();

  message_sqlite_base(const message_sqlite_base& from);

  inline message_sqlite_base& operator=(const message_sqlite_base& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  message_sqlite_base(message_sqlite_base&& from) noexcept
    : message_sqlite_base() {
    *this = ::std::move(from);
  }

  inline message_sqlite_base& operator=(message_sqlite_base&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const message_sqlite_base& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const message_sqlite_base* internal_default_instance() {
    return reinterpret_cast<const message_sqlite_base*>(
               &_message_sqlite_base_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(message_sqlite_base* other);
  friend void swap(message_sqlite_base& a, message_sqlite_base& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline message_sqlite_base* New() const final {
    return CreateMaybeMessage<message_sqlite_base>(NULL);
  }

  message_sqlite_base* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<message_sqlite_base>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const message_sqlite_base& from);
  void MergeFrom(const message_sqlite_base& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(message_sqlite_base* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string table_name = 1;
  bool has_table_name() const;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  #if LANG_CXX11
  void set_table_name(::std::string&& value);
  #endif
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // @@protoc_insertion_point(class_scope:proto.message.message_sqlite_base)
 private:
  void set_has_table_name();
  void clear_has_table_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  friend struct ::protobuf_sqlite_5fdb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class create_sqlite_table : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.message.create_sqlite_table) */ {
 public:
  create_sqlite_table();
  virtual ~create_sqlite_table();

  create_sqlite_table(const create_sqlite_table& from);

  inline create_sqlite_table& operator=(const create_sqlite_table& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  create_sqlite_table(create_sqlite_table&& from) noexcept
    : create_sqlite_table() {
    *this = ::std::move(from);
  }

  inline create_sqlite_table& operator=(create_sqlite_table&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const create_sqlite_table& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const create_sqlite_table* internal_default_instance() {
    return reinterpret_cast<const create_sqlite_table*>(
               &_create_sqlite_table_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(create_sqlite_table* other);
  friend void swap(create_sqlite_table& a, create_sqlite_table& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline create_sqlite_table* New() const final {
    return CreateMaybeMessage<create_sqlite_table>(NULL);
  }

  create_sqlite_table* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<create_sqlite_table>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const create_sqlite_table& from);
  void MergeFrom(const create_sqlite_table& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(create_sqlite_table* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.message.message_sqlite_base db_base = 1;
  bool has_db_base() const;
  void clear_db_base();
  static const int kDbBaseFieldNumber = 1;
  private:
  const ::proto::message::message_sqlite_base& _internal_db_base() const;
  public:
  const ::proto::message::message_sqlite_base& db_base() const;
  ::proto::message::message_sqlite_base* release_db_base();
  ::proto::message::message_sqlite_base* mutable_db_base();
  void set_allocated_db_base(::proto::message::message_sqlite_base* db_base);

  // @@protoc_insertion_point(class_scope:proto.message.create_sqlite_table)
 private:
  void set_has_db_base();
  void clear_has_db_base();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::proto::message::message_sqlite_base* db_base_;
  friend struct ::protobuf_sqlite_5fdb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class table_user : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.message.table_user) */ {
 public:
  table_user();
  virtual ~table_user();

  table_user(const table_user& from);

  inline table_user& operator=(const table_user& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  table_user(table_user&& from) noexcept
    : table_user() {
    *this = ::std::move(from);
  }

  inline table_user& operator=(table_user&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const table_user& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const table_user* internal_default_instance() {
    return reinterpret_cast<const table_user*>(
               &_table_user_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(table_user* other);
  friend void swap(table_user& a, table_user& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline table_user* New() const final {
    return CreateMaybeMessage<table_user>(NULL);
  }

  table_user* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<table_user>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const table_user& from);
  void MergeFrom(const table_user& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(table_user* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_table = 1;
  bool has_user_table() const;
  void clear_user_table();
  static const int kUserTableFieldNumber = 1;
  const ::std::string& user_table() const;
  void set_user_table(const ::std::string& value);
  #if LANG_CXX11
  void set_user_table(::std::string&& value);
  #endif
  void set_user_table(const char* value);
  void set_user_table(const char* value, size_t size);
  ::std::string* mutable_user_table();
  ::std::string* release_user_table();
  void set_allocated_user_table(::std::string* user_table);

  // @@protoc_insertion_point(class_scope:proto.message.table_user)
 private:
  void set_has_user_table();
  void clear_has_user_table();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_table_;
  friend struct ::protobuf_sqlite_5fdb_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// message_sqlite_base

// optional string table_name = 1;
inline bool message_sqlite_base::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void message_sqlite_base::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void message_sqlite_base::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void message_sqlite_base::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name();
}
inline const ::std::string& message_sqlite_base::table_name() const {
  // @@protoc_insertion_point(field_get:proto.message.message_sqlite_base.table_name)
  return table_name_.GetNoArena();
}
inline void message_sqlite_base::set_table_name(const ::std::string& value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.message.message_sqlite_base.table_name)
}
#if LANG_CXX11
inline void message_sqlite_base::set_table_name(::std::string&& value) {
  set_has_table_name();
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.message.message_sqlite_base.table_name)
}
#endif
inline void message_sqlite_base::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.message.message_sqlite_base.table_name)
}
inline void message_sqlite_base::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.message.message_sqlite_base.table_name)
}
inline ::std::string* message_sqlite_base::mutable_table_name() {
  set_has_table_name();
  // @@protoc_insertion_point(field_mutable:proto.message.message_sqlite_base.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* message_sqlite_base::release_table_name() {
  // @@protoc_insertion_point(field_release:proto.message.message_sqlite_base.table_name)
  if (!has_table_name()) {
    return NULL;
  }
  clear_has_table_name();
  return table_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void message_sqlite_base::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    set_has_table_name();
  } else {
    clear_has_table_name();
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:proto.message.message_sqlite_base.table_name)
}

// -------------------------------------------------------------------

// create_sqlite_table

// optional .proto.message.message_sqlite_base db_base = 1;
inline bool create_sqlite_table::has_db_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void create_sqlite_table::set_has_db_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void create_sqlite_table::clear_has_db_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void create_sqlite_table::clear_db_base() {
  if (db_base_ != NULL) db_base_->Clear();
  clear_has_db_base();
}
inline const ::proto::message::message_sqlite_base& create_sqlite_table::_internal_db_base() const {
  return *db_base_;
}
inline const ::proto::message::message_sqlite_base& create_sqlite_table::db_base() const {
  const ::proto::message::message_sqlite_base* p = db_base_;
  // @@protoc_insertion_point(field_get:proto.message.create_sqlite_table.db_base)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::message::message_sqlite_base*>(
      &::proto::message::_message_sqlite_base_default_instance_);
}
inline ::proto::message::message_sqlite_base* create_sqlite_table::release_db_base() {
  // @@protoc_insertion_point(field_release:proto.message.create_sqlite_table.db_base)
  clear_has_db_base();
  ::proto::message::message_sqlite_base* temp = db_base_;
  db_base_ = NULL;
  return temp;
}
inline ::proto::message::message_sqlite_base* create_sqlite_table::mutable_db_base() {
  set_has_db_base();
  if (db_base_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::message::message_sqlite_base>(GetArenaNoVirtual());
    db_base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.message.create_sqlite_table.db_base)
  return db_base_;
}
inline void create_sqlite_table::set_allocated_db_base(::proto::message::message_sqlite_base* db_base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete db_base_;
  }
  if (db_base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      db_base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, db_base, submessage_arena);
    }
    set_has_db_base();
  } else {
    clear_has_db_base();
  }
  db_base_ = db_base;
  // @@protoc_insertion_point(field_set_allocated:proto.message.create_sqlite_table.db_base)
}

// -------------------------------------------------------------------

// table_user

// optional string user_table = 1;
inline bool table_user::has_user_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void table_user::set_has_user_table() {
  _has_bits_[0] |= 0x00000001u;
}
inline void table_user::clear_has_user_table() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void table_user::clear_user_table() {
  user_table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_table();
}
inline const ::std::string& table_user::user_table() const {
  // @@protoc_insertion_point(field_get:proto.message.table_user.user_table)
  return user_table_.GetNoArena();
}
inline void table_user::set_user_table(const ::std::string& value) {
  set_has_user_table();
  user_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.message.table_user.user_table)
}
#if LANG_CXX11
inline void table_user::set_user_table(::std::string&& value) {
  set_has_user_table();
  user_table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.message.table_user.user_table)
}
#endif
inline void table_user::set_user_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_table();
  user_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.message.table_user.user_table)
}
inline void table_user::set_user_table(const char* value, size_t size) {
  set_has_user_table();
  user_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.message.table_user.user_table)
}
inline ::std::string* table_user::mutable_user_table() {
  set_has_user_table();
  // @@protoc_insertion_point(field_mutable:proto.message.table_user.user_table)
  return user_table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* table_user::release_user_table() {
  // @@protoc_insertion_point(field_release:proto.message.table_user.user_table)
  if (!has_user_table()) {
    return NULL;
  }
  clear_has_user_table();
  return user_table_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void table_user::set_allocated_user_table(::std::string* user_table) {
  if (user_table != NULL) {
    set_has_user_table();
  } else {
    clear_has_user_table();
  }
  user_table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_table);
  // @@protoc_insertion_point(field_set_allocated:proto.message.table_user.user_table)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_sqlite_5fdb_2eproto
