// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_human.proto

#ifndef PROTOBUF_INCLUDED_st_5fhuman_2eproto
#define PROTOBUF_INCLUDED_st_5fhuman_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_st_5fhuman_2eproto 

namespace protobuf_st_5fhuman_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[16];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_st_5fhuman_2eproto
namespace NFMsg {
class accountinfo;
class accountinfoDefaultTypeInternal;
extern accountinfoDefaultTypeInternal _accountinfo_default_instance_;
class agencyinfo;
class agencyinfoDefaultTypeInternal;
extern agencyinfoDefaultTypeInternal _agencyinfo_default_instance_;
class broadcastinfo;
class broadcastinfoDefaultTypeInternal;
extern broadcastinfoDefaultTypeInternal _broadcastinfo_default_instance_;
class givemoneyrecord;
class givemoneyrecordDefaultTypeInternal;
extern givemoneyrecordDefaultTypeInternal _givemoneyrecord_default_instance_;
class goodsinfo;
class goodsinfoDefaultTypeInternal;
extern goodsinfoDefaultTypeInternal _goodsinfo_default_instance_;
class goodslist;
class goodslistDefaultTypeInternal;
extern goodslistDefaultTypeInternal _goodslist_default_instance_;
class intlist;
class intlistDefaultTypeInternal;
extern intlistDefaultTypeInternal _intlist_default_instance_;
class inviteinfo;
class inviteinfoDefaultTypeInternal;
extern inviteinfoDefaultTypeInternal _inviteinfo_default_instance_;
class mailinfo;
class mailinfoDefaultTypeInternal;
extern mailinfoDefaultTypeInternal _mailinfo_default_instance_;
class maillist;
class maillistDefaultTypeInternal;
extern maillistDefaultTypeInternal _maillist_default_instance_;
class noticeinfo;
class noticeinfoDefaultTypeInternal;
extern noticeinfoDefaultTypeInternal _noticeinfo_default_instance_;
class playerinfo;
class playerinfoDefaultTypeInternal;
extern playerinfoDefaultTypeInternal _playerinfo_default_instance_;
class playersimpleinfo;
class playersimpleinfoDefaultTypeInternal;
extern playersimpleinfoDefaultTypeInternal _playersimpleinfo_default_instance_;
class playerstats;
class playerstatsDefaultTypeInternal;
extern playerstatsDefaultTypeInternal _playerstats_default_instance_;
class specialinfo;
class specialinfoDefaultTypeInternal;
extern specialinfoDefaultTypeInternal _specialinfo_default_instance_;
class stringlist;
class stringlistDefaultTypeInternal;
extern stringlistDefaultTypeInternal _stringlist_default_instance_;
}  // namespace NFMsg
namespace google {
namespace protobuf {
template<> ::NFMsg::accountinfo* Arena::CreateMaybeMessage<::NFMsg::accountinfo>(Arena*);
template<> ::NFMsg::agencyinfo* Arena::CreateMaybeMessage<::NFMsg::agencyinfo>(Arena*);
template<> ::NFMsg::broadcastinfo* Arena::CreateMaybeMessage<::NFMsg::broadcastinfo>(Arena*);
template<> ::NFMsg::givemoneyrecord* Arena::CreateMaybeMessage<::NFMsg::givemoneyrecord>(Arena*);
template<> ::NFMsg::goodsinfo* Arena::CreateMaybeMessage<::NFMsg::goodsinfo>(Arena*);
template<> ::NFMsg::goodslist* Arena::CreateMaybeMessage<::NFMsg::goodslist>(Arena*);
template<> ::NFMsg::intlist* Arena::CreateMaybeMessage<::NFMsg::intlist>(Arena*);
template<> ::NFMsg::inviteinfo* Arena::CreateMaybeMessage<::NFMsg::inviteinfo>(Arena*);
template<> ::NFMsg::mailinfo* Arena::CreateMaybeMessage<::NFMsg::mailinfo>(Arena*);
template<> ::NFMsg::maillist* Arena::CreateMaybeMessage<::NFMsg::maillist>(Arena*);
template<> ::NFMsg::noticeinfo* Arena::CreateMaybeMessage<::NFMsg::noticeinfo>(Arena*);
template<> ::NFMsg::playerinfo* Arena::CreateMaybeMessage<::NFMsg::playerinfo>(Arena*);
template<> ::NFMsg::playersimpleinfo* Arena::CreateMaybeMessage<::NFMsg::playersimpleinfo>(Arena*);
template<> ::NFMsg::playerstats* Arena::CreateMaybeMessage<::NFMsg::playerstats>(Arena*);
template<> ::NFMsg::specialinfo* Arena::CreateMaybeMessage<::NFMsg::specialinfo>(Arena*);
template<> ::NFMsg::stringlist* Arena::CreateMaybeMessage<::NFMsg::stringlist>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NFMsg {

// ===================================================================

class accountinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.accountinfo) */ {
 public:
  accountinfo();
  virtual ~accountinfo();

  accountinfo(const accountinfo& from);

  inline accountinfo& operator=(const accountinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  accountinfo(accountinfo&& from) noexcept
    : accountinfo() {
    *this = ::std::move(from);
  }

  inline accountinfo& operator=(accountinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const accountinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const accountinfo* internal_default_instance() {
    return reinterpret_cast<const accountinfo*>(
               &_accountinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(accountinfo* other);
  friend void swap(accountinfo& a, accountinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline accountinfo* New() const final {
    return CreateMaybeMessage<accountinfo>(NULL);
  }

  accountinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<accountinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const accountinfo& from);
  void MergeFrom(const accountinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(accountinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string account = 1;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // optional string password = 2;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional uint64 userid = 3;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 3;
  ::google::protobuf::uint64 userid() const;
  void set_userid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:NFMsg.accountinfo)
 private:
  void set_has_account();
  void clear_has_account();
  void set_has_password();
  void clear_has_password();
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::uint64 userid_;
  friend struct ::protobuf_st_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class playerinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.playerinfo) */ {
 public:
  playerinfo();
  virtual ~playerinfo();

  playerinfo(const playerinfo& from);

  inline playerinfo& operator=(const playerinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  playerinfo(playerinfo&& from) noexcept
    : playerinfo() {
    *this = ::std::move(from);
  }

  inline playerinfo& operator=(playerinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const playerinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const playerinfo* internal_default_instance() {
    return reinterpret_cast<const playerinfo*>(
               &_playerinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(playerinfo* other);
  friend void swap(playerinfo& a, playerinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline playerinfo* New() const final {
    return CreateMaybeMessage<playerinfo>(NULL);
  }

  playerinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<playerinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const playerinfo& from);
  void MergeFrom(const playerinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(playerinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cid = 2;
  bool has_cid() const;
  void clear_cid();
  static const int kCidFieldNumber = 2;
  const ::std::string& cid() const;
  void set_cid(const ::std::string& value);
  #if LANG_CXX11
  void set_cid(::std::string&& value);
  #endif
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  ::std::string* mutable_cid();
  ::std::string* release_cid();
  void set_allocated_cid(::std::string* cid);

  // optional string account = 3;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 3;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // optional string password = 4;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 4;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string nickname = 5;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 5;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string regdate = 7;
  bool has_regdate() const;
  void clear_regdate();
  static const int kRegdateFieldNumber = 7;
  const ::std::string& regdate() const;
  void set_regdate(const ::std::string& value);
  #if LANG_CXX11
  void set_regdate(::std::string&& value);
  #endif
  void set_regdate(const char* value);
  void set_regdate(const char* value, size_t size);
  ::std::string* mutable_regdate();
  ::std::string* release_regdate();
  void set_allocated_regdate(::std::string* regdate);

  // optional string email = 10;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 10;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional string phonenum = 11;
  bool has_phonenum() const;
  void clear_phonenum();
  static const int kPhonenumFieldNumber = 11;
  const ::std::string& phonenum() const;
  void set_phonenum(const ::std::string& value);
  #if LANG_CXX11
  void set_phonenum(::std::string&& value);
  #endif
  void set_phonenum(const char* value);
  void set_phonenum(const char* value, size_t size);
  ::std::string* mutable_phonenum();
  ::std::string* release_phonenum();
  void set_allocated_phonenum(::std::string* phonenum);

  // optional string channel = 18;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 18;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // optional string province = 19;
  bool has_province() const;
  void clear_province();
  static const int kProvinceFieldNumber = 19;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  #if LANG_CXX11
  void set_province(::std::string&& value);
  #endif
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // optional string city = 20;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 20;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // optional string bindnick = 24;
  bool has_bindnick() const;
  void clear_bindnick();
  static const int kBindnickFieldNumber = 24;
  const ::std::string& bindnick() const;
  void set_bindnick(const ::std::string& value);
  #if LANG_CXX11
  void set_bindnick(::std::string&& value);
  #endif
  void set_bindnick(const char* value);
  void set_bindnick(const char* value, size_t size);
  ::std::string* mutable_bindnick();
  ::std::string* release_bindnick();
  void set_allocated_bindnick(::std::string* bindnick);

  // optional string platformid = 25;
  bool has_platformid() const;
  void clear_platformid();
  static const int kPlatformidFieldNumber = 25;
  const ::std::string& platformid() const;
  void set_platformid(const ::std::string& value);
  #if LANG_CXX11
  void set_platformid(::std::string&& value);
  #endif
  void set_platformid(const char* value);
  void set_platformid(const char* value, size_t size);
  ::std::string* mutable_platformid();
  ::std::string* release_platformid();
  void set_allocated_platformid(::std::string* platformid);

  // optional string imei = 26;
  bool has_imei() const;
  void clear_imei();
  static const int kImeiFieldNumber = 26;
  const ::std::string& imei() const;
  void set_imei(const ::std::string& value);
  #if LANG_CXX11
  void set_imei(::std::string&& value);
  #endif
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  ::std::string* mutable_imei();
  ::std::string* release_imei();
  void set_allocated_imei(::std::string* imei);

  // optional string devname = 27;
  bool has_devname() const;
  void clear_devname();
  static const int kDevnameFieldNumber = 27;
  const ::std::string& devname() const;
  void set_devname(const ::std::string& value);
  #if LANG_CXX11
  void set_devname(::std::string&& value);
  #endif
  void set_devname(const char* value);
  void set_devname(const char* value, size_t size);
  ::std::string* mutable_devname();
  ::std::string* release_devname();
  void set_allocated_devname(::std::string* devname);

  // optional string ip = 28;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 28;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional string face_1 = 34;
  bool has_face_1() const;
  void clear_face_1();
  static const int kFace1FieldNumber = 34;
  const ::std::string& face_1() const;
  void set_face_1(const ::std::string& value);
  #if LANG_CXX11
  void set_face_1(::std::string&& value);
  #endif
  void set_face_1(const char* value);
  void set_face_1(const char* value, size_t size);
  ::std::string* mutable_face_1();
  ::std::string* release_face_1();
  void set_allocated_face_1(::std::string* face_1);

  // optional string face_2 = 35;
  bool has_face_2() const;
  void clear_face_2();
  static const int kFace2FieldNumber = 35;
  const ::std::string& face_2() const;
  void set_face_2(const ::std::string& value);
  #if LANG_CXX11
  void set_face_2(::std::string&& value);
  #endif
  void set_face_2(const char* value);
  void set_face_2(const char* value, size_t size);
  ::std::string* mutable_face_2();
  ::std::string* release_face_2();
  void set_allocated_face_2(::std::string* face_2);

  // optional string face_3 = 36;
  bool has_face_3() const;
  void clear_face_3();
  static const int kFace3FieldNumber = 36;
  const ::std::string& face_3() const;
  void set_face_3(const ::std::string& value);
  #if LANG_CXX11
  void set_face_3(::std::string&& value);
  #endif
  void set_face_3(const char* value);
  void set_face_3(const char* value, size_t size);
  ::std::string* mutable_face_3();
  ::std::string* release_face_3();
  void set_allocated_face_3(::std::string* face_3);

  // optional string face_4 = 37;
  bool has_face_4() const;
  void clear_face_4();
  static const int kFace4FieldNumber = 37;
  const ::std::string& face_4() const;
  void set_face_4(const ::std::string& value);
  #if LANG_CXX11
  void set_face_4(::std::string&& value);
  #endif
  void set_face_4(const char* value);
  void set_face_4(const char* value, size_t size);
  ::std::string* mutable_face_4();
  ::std::string* release_face_4();
  void set_allocated_face_4(::std::string* face_4);

  // optional string description = 40;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 40;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string location = 41;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 41;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  #if LANG_CXX11
  void set_location(::std::string&& value);
  #endif
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // optional string title = 43;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 43;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string location_x = 47;
  bool has_location_x() const;
  void clear_location_x();
  static const int kLocationXFieldNumber = 47;
  const ::std::string& location_x() const;
  void set_location_x(const ::std::string& value);
  #if LANG_CXX11
  void set_location_x(::std::string&& value);
  #endif
  void set_location_x(const char* value);
  void set_location_x(const char* value, size_t size);
  ::std::string* mutable_location_x();
  ::std::string* release_location_x();
  void set_allocated_location_x(::std::string* location_x);

  // optional string location_y = 48;
  bool has_location_y() const;
  void clear_location_y();
  static const int kLocationYFieldNumber = 48;
  const ::std::string& location_y() const;
  void set_location_y(const ::std::string& value);
  #if LANG_CXX11
  void set_location_y(::std::string&& value);
  #endif
  void set_location_y(const char* value);
  void set_location_y(const char* value, size_t size);
  ::std::string* mutable_location_y();
  ::std::string* release_location_y();
  void set_allocated_location_y(::std::string* location_y);

  // optional string registration1 = 49;
  bool has_registration1() const;
  void clear_registration1();
  static const int kRegistration1FieldNumber = 49;
  const ::std::string& registration1() const;
  void set_registration1(const ::std::string& value);
  #if LANG_CXX11
  void set_registration1(::std::string&& value);
  #endif
  void set_registration1(const char* value);
  void set_registration1(const char* value, size_t size);
  ::std::string* mutable_registration1();
  ::std::string* release_registration1();
  void set_allocated_registration1(::std::string* registration1);

  // optional string registration2 = 50;
  bool has_registration2() const;
  void clear_registration2();
  static const int kRegistration2FieldNumber = 50;
  const ::std::string& registration2() const;
  void set_registration2(const ::std::string& value);
  #if LANG_CXX11
  void set_registration2(::std::string&& value);
  #endif
  void set_registration2(const char* value);
  void set_registration2(const char* value, size_t size);
  ::std::string* mutable_registration2();
  ::std::string* release_registration2();
  void set_allocated_registration2(::std::string* registration2);

  // optional string registration3 = 51;
  bool has_registration3() const;
  void clear_registration3();
  static const int kRegistration3FieldNumber = 51;
  const ::std::string& registration3() const;
  void set_registration3(const ::std::string& value);
  #if LANG_CXX11
  void set_registration3(::std::string&& value);
  #endif
  void set_registration3(const char* value);
  void set_registration3(const char* value, size_t size);
  ::std::string* mutable_registration3();
  ::std::string* release_registration3();
  void set_allocated_registration3(::std::string* registration3);

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 sex = 8;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 8;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // optional int32 age = 9;
  bool has_age() const;
  void clear_age();
  static const int kAgeFieldNumber = 9;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // optional int32 exp = 12;
  bool has_exp() const;
  void clear_exp();
  static const int kExpFieldNumber = 12;
  ::google::protobuf::int32 exp() const;
  void set_exp(::google::protobuf::int32 value);

  // optional int32 level = 13;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 13;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional int32 viplevel = 14;
  bool has_viplevel() const;
  void clear_viplevel();
  static const int kViplevelFieldNumber = 14;
  ::google::protobuf::int32 viplevel() const;
  void set_viplevel(::google::protobuf::int32 value);

  // optional int64 jetton = 15;
  bool has_jetton() const;
  void clear_jetton();
  static const int kJettonFieldNumber = 15;
  ::google::protobuf::int64 jetton() const;
  void set_jetton(::google::protobuf::int64 value);

  // optional int32 gold = 16;
  bool has_gold() const;
  void clear_gold();
  static const int kGoldFieldNumber = 16;
  ::google::protobuf::int32 gold() const;
  void set_gold(::google::protobuf::int32 value);

  // optional int32 money = 17;
  bool has_money() const;
  void clear_money();
  static const int kMoneyFieldNumber = 17;
  ::google::protobuf::int32 money() const;
  void set_money(::google::protobuf::int32 value);

  // optional int32 popularity = 21;
  bool has_popularity() const;
  void clear_popularity();
  static const int kPopularityFieldNumber = 21;
  ::google::protobuf::int32 popularity() const;
  void set_popularity(::google::protobuf::int32 value);

  // optional int32 idenstatus = 22;
  bool has_idenstatus() const;
  void clear_idenstatus();
  static const int kIdenstatusFieldNumber = 22;
  ::google::protobuf::int32 idenstatus() const;
  void set_idenstatus(::google::protobuf::int32 value);

  // optional int32 bindtype = 23;
  bool has_bindtype() const;
  void clear_bindtype();
  static const int kBindtypeFieldNumber = 23;
  ::google::protobuf::int32 bindtype() const;
  void set_bindtype(::google::protobuf::int32 value);

  // optional int32 mobiletype = 29;
  bool has_mobiletype() const;
  void clear_mobiletype();
  static const int kMobiletypeFieldNumber = 29;
  ::google::protobuf::int32 mobiletype() const;
  void set_mobiletype(::google::protobuf::int32 value);

  // optional int32 lasttime = 30;
  bool has_lasttime() const;
  void clear_lasttime();
  static const int kLasttimeFieldNumber = 30;
  ::google::protobuf::int32 lasttime() const;
  void set_lasttime(::google::protobuf::int32 value);

  // optional int32 penulttime = 31;
  bool has_penulttime() const;
  void clear_penulttime();
  static const int kPenulttimeFieldNumber = 31;
  ::google::protobuf::int32 penulttime() const;
  void set_penulttime(::google::protobuf::int32 value);

  // optional int32 silent = 32;
  bool has_silent() const;
  void clear_silent();
  static const int kSilentFieldNumber = 32;
  ::google::protobuf::int32 silent() const;
  void set_silent(::google::protobuf::int32 value);

  // optional int32 isban = 33;
  bool has_isban() const;
  void clear_isban();
  static const int kIsbanFieldNumber = 33;
  ::google::protobuf::int32 isban() const;
  void set_isban(::google::protobuf::int32 value);

  // optional int32 isrobot = 38;
  bool has_isrobot() const;
  void clear_isrobot();
  static const int kIsrobotFieldNumber = 38;
  ::google::protobuf::int32 isrobot() const;
  void set_isrobot(::google::protobuf::int32 value);

  // optional int32 playtype = 39;
  bool has_playtype() const;
  void clear_playtype();
  static const int kPlaytypeFieldNumber = 39;
  ::google::protobuf::int32 playtype() const;
  void set_playtype(::google::protobuf::int32 value);

  // optional int64 bankjetton = 42;
  bool has_bankjetton() const;
  void clear_bankjetton();
  static const int kBankjettonFieldNumber = 42;
  ::google::protobuf::int64 bankjetton() const;
  void set_bankjetton(::google::protobuf::int64 value);

  // optional int32 blacklist = 44;
  bool has_blacklist() const;
  void clear_blacklist();
  static const int kBlacklistFieldNumber = 44;
  ::google::protobuf::int32 blacklist() const;
  void set_blacklist(::google::protobuf::int32 value);

  // optional int32 propertyid = 45;
  bool has_propertyid() const;
  void clear_propertyid();
  static const int kPropertyidFieldNumber = 45;
  ::google::protobuf::int32 propertyid() const;
  void set_propertyid(::google::protobuf::int32 value);

  // optional int32 agencystatus = 46;
  bool has_agencystatus() const;
  void clear_agencystatus();
  static const int kAgencystatusFieldNumber = 46;
  ::google::protobuf::int32 agencystatus() const;
  void set_agencystatus(::google::protobuf::int32 value);

  // optional int32 signinmonth = 52;
  bool has_signinmonth() const;
  void clear_signinmonth();
  static const int kSigninmonthFieldNumber = 52;
  ::google::protobuf::int32 signinmonth() const;
  void set_signinmonth(::google::protobuf::int32 value);

  // optional int32 bsignin = 53;
  bool has_bsignin() const;
  void clear_bsignin();
  static const int kBsigninFieldNumber = 53;
  ::google::protobuf::int32 bsignin() const;
  void set_bsignin(::google::protobuf::int32 value);

  // optional int32 turntablenum = 54;
  bool has_turntablenum() const;
  void clear_turntablenum();
  static const int kTurntablenumFieldNumber = 54;
  ::google::protobuf::int32 turntablenum() const;
  void set_turntablenum(::google::protobuf::int32 value);

  // optional int32 tengames = 55;
  bool has_tengames() const;
  void clear_tengames();
  static const int kTengamesFieldNumber = 55;
  ::google::protobuf::int32 tengames() const;
  void set_tengames(::google::protobuf::int32 value);

  // optional int32 todayshare = 56;
  bool has_todayshare() const;
  void clear_todayshare();
  static const int kTodayshareFieldNumber = 56;
  ::google::protobuf::int32 todayshare() const;
  void set_todayshare(::google::protobuf::int32 value);

  // optional int32 caninvite = 57;
  bool has_caninvite() const;
  void clear_caninvite();
  static const int kCaninviteFieldNumber = 57;
  ::google::protobuf::int32 caninvite() const;
  void set_caninvite(::google::protobuf::int32 value);

  // optional int32 totalgames = 58;
  bool has_totalgames() const;
  void clear_totalgames();
  static const int kTotalgamesFieldNumber = 58;
  ::google::protobuf::int32 totalgames() const;
  void set_totalgames(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.playerinfo)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_cid();
  void clear_has_cid();
  void set_has_account();
  void clear_has_account();
  void set_has_password();
  void clear_has_password();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_regdate();
  void clear_has_regdate();
  void set_has_sex();
  void clear_has_sex();
  void set_has_age();
  void clear_has_age();
  void set_has_email();
  void clear_has_email();
  void set_has_phonenum();
  void clear_has_phonenum();
  void set_has_exp();
  void clear_has_exp();
  void set_has_level();
  void clear_has_level();
  void set_has_viplevel();
  void clear_has_viplevel();
  void set_has_jetton();
  void clear_has_jetton();
  void set_has_gold();
  void clear_has_gold();
  void set_has_money();
  void clear_has_money();
  void set_has_channel();
  void clear_has_channel();
  void set_has_province();
  void clear_has_province();
  void set_has_city();
  void clear_has_city();
  void set_has_popularity();
  void clear_has_popularity();
  void set_has_idenstatus();
  void clear_has_idenstatus();
  void set_has_bindtype();
  void clear_has_bindtype();
  void set_has_bindnick();
  void clear_has_bindnick();
  void set_has_platformid();
  void clear_has_platformid();
  void set_has_imei();
  void clear_has_imei();
  void set_has_devname();
  void clear_has_devname();
  void set_has_ip();
  void clear_has_ip();
  void set_has_mobiletype();
  void clear_has_mobiletype();
  void set_has_lasttime();
  void clear_has_lasttime();
  void set_has_penulttime();
  void clear_has_penulttime();
  void set_has_silent();
  void clear_has_silent();
  void set_has_isban();
  void clear_has_isban();
  void set_has_face_1();
  void clear_has_face_1();
  void set_has_face_2();
  void clear_has_face_2();
  void set_has_face_3();
  void clear_has_face_3();
  void set_has_face_4();
  void clear_has_face_4();
  void set_has_isrobot();
  void clear_has_isrobot();
  void set_has_playtype();
  void clear_has_playtype();
  void set_has_description();
  void clear_has_description();
  void set_has_location();
  void clear_has_location();
  void set_has_bankjetton();
  void clear_has_bankjetton();
  void set_has_title();
  void clear_has_title();
  void set_has_blacklist();
  void clear_has_blacklist();
  void set_has_propertyid();
  void clear_has_propertyid();
  void set_has_agencystatus();
  void clear_has_agencystatus();
  void set_has_location_x();
  void clear_has_location_x();
  void set_has_location_y();
  void clear_has_location_y();
  void set_has_registration1();
  void clear_has_registration1();
  void set_has_registration2();
  void clear_has_registration2();
  void set_has_registration3();
  void clear_has_registration3();
  void set_has_signinmonth();
  void clear_has_signinmonth();
  void set_has_bsignin();
  void clear_has_bsignin();
  void set_has_turntablenum();
  void clear_has_turntablenum();
  void set_has_tengames();
  void clear_has_tengames();
  void set_has_todayshare();
  void clear_has_todayshare();
  void set_has_caninvite();
  void clear_has_caninvite();
  void set_has_totalgames();
  void clear_has_totalgames();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::internal::ArenaStringPtr cid_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr regdate_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr phonenum_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  ::google::protobuf::internal::ArenaStringPtr province_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr bindnick_;
  ::google::protobuf::internal::ArenaStringPtr platformid_;
  ::google::protobuf::internal::ArenaStringPtr imei_;
  ::google::protobuf::internal::ArenaStringPtr devname_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr face_1_;
  ::google::protobuf::internal::ArenaStringPtr face_2_;
  ::google::protobuf::internal::ArenaStringPtr face_3_;
  ::google::protobuf::internal::ArenaStringPtr face_4_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr location_x_;
  ::google::protobuf::internal::ArenaStringPtr location_y_;
  ::google::protobuf::internal::ArenaStringPtr registration1_;
  ::google::protobuf::internal::ArenaStringPtr registration2_;
  ::google::protobuf::internal::ArenaStringPtr registration3_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 age_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int64 jetton_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 popularity_;
  ::google::protobuf::int32 idenstatus_;
  ::google::protobuf::int32 bindtype_;
  ::google::protobuf::int32 mobiletype_;
  ::google::protobuf::int32 lasttime_;
  ::google::protobuf::int32 penulttime_;
  ::google::protobuf::int32 silent_;
  ::google::protobuf::int32 isban_;
  ::google::protobuf::int32 isrobot_;
  ::google::protobuf::int32 playtype_;
  ::google::protobuf::int64 bankjetton_;
  ::google::protobuf::int32 blacklist_;
  ::google::protobuf::int32 propertyid_;
  ::google::protobuf::int32 agencystatus_;
  ::google::protobuf::int32 signinmonth_;
  ::google::protobuf::int32 bsignin_;
  ::google::protobuf::int32 turntablenum_;
  ::google::protobuf::int32 tengames_;
  ::google::protobuf::int32 todayshare_;
  ::google::protobuf::int32 caninvite_;
  ::google::protobuf::int32 totalgames_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_st_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class playerstats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.playerstats) */ {
 public:
  playerstats();
  virtual ~playerstats();

  playerstats(const playerstats& from);

  inline playerstats& operator=(const playerstats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  playerstats(playerstats&& from) noexcept
    : playerstats() {
    *this = ::std::move(from);
  }

  inline playerstats& operator=(playerstats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const playerstats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const playerstats* internal_default_instance() {
    return reinterpret_cast<const playerstats*>(
               &_playerstats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(playerstats* other);
  friend void swap(playerstats& a, playerstats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline playerstats* New() const final {
    return CreateMaybeMessage<playerstats>(NULL);
  }

  playerstats* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<playerstats>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const playerstats& from);
  void MergeFrom(const playerstats& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(playerstats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 mdynickamount = 2;
  bool has_mdynickamount() const;
  void clear_mdynickamount();
  static const int kMdynickamountFieldNumber = 2;
  ::google::protobuf::int32 mdynickamount() const;
  void set_mdynickamount(::google::protobuf::int32 value);

  // optional int32 loginday = 3;
  bool has_loginday() const;
  void clear_loginday();
  static const int kLogindayFieldNumber = 3;
  ::google::protobuf::int32 loginday() const;
  void set_loginday(::google::protobuf::int32 value);

  // optional int32 loginconday = 4;
  bool has_loginconday() const;
  void clear_loginconday();
  static const int kLogincondayFieldNumber = 4;
  ::google::protobuf::int32 loginconday() const;
  void set_loginconday(::google::protobuf::int32 value);

  // optional int32 maxloginconday = 5;
  bool has_maxloginconday() const;
  void clear_maxloginconday();
  static const int kMaxlogincondayFieldNumber = 5;
  ::google::protobuf::int32 maxloginconday() const;
  void set_maxloginconday(::google::protobuf::int32 value);

  // optional int32 loginamount = 6;
  bool has_loginamount() const;
  void clear_loginamount();
  static const int kLoginamountFieldNumber = 6;
  ::google::protobuf::int32 loginamount() const;
  void set_loginamount(::google::protobuf::int32 value);

  // optional int32 onlinetime = 7;
  bool has_onlinetime() const;
  void clear_onlinetime();
  static const int kOnlinetimeFieldNumber = 7;
  ::google::protobuf::int32 onlinetime() const;
  void set_onlinetime(::google::protobuf::int32 value);

  // optional int32 maxjetton = 8;
  bool has_maxjetton() const;
  void clear_maxjetton();
  static const int kMaxjettonFieldNumber = 8;
  ::google::protobuf::int32 maxjetton() const;
  void set_maxjetton(::google::protobuf::int32 value);

  // optional int32 payrmb = 9;
  bool has_payrmb() const;
  void clear_payrmb();
  static const int kPayrmbFieldNumber = 9;
  ::google::protobuf::int32 payrmb() const;
  void set_payrmb(::google::protobuf::int32 value);

  // optional int32 callpayrmb = 10;
  bool has_callpayrmb() const;
  void clear_callpayrmb();
  static const int kCallpayrmbFieldNumber = 10;
  ::google::protobuf::int32 callpayrmb() const;
  void set_callpayrmb(::google::protobuf::int32 value);

  // optional int32 paytime = 11;
  bool has_paytime() const;
  void clear_paytime();
  static const int kPaytimeFieldNumber = 11;
  ::google::protobuf::int32 paytime() const;
  void set_paytime(::google::protobuf::int32 value);

  // optional int32 callpaytime = 12;
  bool has_callpaytime() const;
  void clear_callpaytime();
  static const int kCallpaytimeFieldNumber = 12;
  ::google::protobuf::int32 callpaytime() const;
  void set_callpaytime(::google::protobuf::int32 value);

  // optional int32 maxmoney = 13;
  bool has_maxmoney() const;
  void clear_maxmoney();
  static const int kMaxmoneyFieldNumber = 13;
  ::google::protobuf::int32 maxmoney() const;
  void set_maxmoney(::google::protobuf::int32 value);

  // optional int32 dayrmb = 14;
  bool has_dayrmb() const;
  void clear_dayrmb();
  static const int kDayrmbFieldNumber = 14;
  ::google::protobuf::int32 dayrmb() const;
  void set_dayrmb(::google::protobuf::int32 value);

  // optional int32 daypaytime = 15;
  bool has_daypaytime() const;
  void clear_daypaytime();
  static const int kDaypaytimeFieldNumber = 15;
  ::google::protobuf::int32 daypaytime() const;
  void set_daypaytime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.playerstats)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_mdynickamount();
  void clear_has_mdynickamount();
  void set_has_loginday();
  void clear_has_loginday();
  void set_has_loginconday();
  void clear_has_loginconday();
  void set_has_maxloginconday();
  void clear_has_maxloginconday();
  void set_has_loginamount();
  void clear_has_loginamount();
  void set_has_onlinetime();
  void clear_has_onlinetime();
  void set_has_maxjetton();
  void clear_has_maxjetton();
  void set_has_payrmb();
  void clear_has_payrmb();
  void set_has_callpayrmb();
  void clear_has_callpayrmb();
  void set_has_paytime();
  void clear_has_paytime();
  void set_has_callpaytime();
  void clear_has_callpaytime();
  void set_has_maxmoney();
  void clear_has_maxmoney();
  void set_has_dayrmb();
  void clear_has_dayrmb();
  void set_has_daypaytime();
  void clear_has_daypaytime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 mdynickamount_;
  ::google::protobuf::int32 loginday_;
  ::google::protobuf::int32 loginconday_;
  ::google::protobuf::int32 maxloginconday_;
  ::google::protobuf::int32 loginamount_;
  ::google::protobuf::int32 onlinetime_;
  ::google::protobuf::int32 maxjetton_;
  ::google::protobuf::int32 payrmb_;
  ::google::protobuf::int32 callpayrmb_;
  ::google::protobuf::int32 paytime_;
  ::google::protobuf::int32 callpaytime_;
  ::google::protobuf::int32 maxmoney_;
  ::google::protobuf::int32 dayrmb_;
  ::google::protobuf::int32 daypaytime_;
  friend struct ::protobuf_st_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class goodsinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.goodsinfo) */ {
 public:
  goodsinfo();
  virtual ~goodsinfo();

  goodsinfo(const goodsinfo& from);

  inline goodsinfo& operator=(const goodsinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  goodsinfo(goodsinfo&& from) noexcept
    : goodsinfo() {
    *this = ::std::move(from);
  }

  inline goodsinfo& operator=(goodsinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const goodsinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const goodsinfo* internal_default_instance() {
    return reinterpret_cast<const goodsinfo*>(
               &_goodsinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(goodsinfo* other);
  friend void swap(goodsinfo& a, goodsinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline goodsinfo* New() const final {
    return CreateMaybeMessage<goodsinfo>(NULL);
  }

  goodsinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<goodsinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const goodsinfo& from);
  void MergeFrom(const goodsinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(goodsinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string createdate = 6;
  bool has_createdate() const;
  void clear_createdate();
  static const int kCreatedateFieldNumber = 6;
  const ::std::string& createdate() const;
  void set_createdate(const ::std::string& value);
  #if LANG_CXX11
  void set_createdate(::std::string&& value);
  #endif
  void set_createdate(const char* value);
  void set_createdate(const char* value, size_t size);
  ::std::string* mutable_createdate();
  ::std::string* release_createdate();
  void set_allocated_createdate(::std::string* createdate);

  // optional int32 itemid = 1;
  bool has_itemid() const;
  void clear_itemid();
  static const int kItemidFieldNumber = 1;
  ::google::protobuf::int32 itemid() const;
  void set_itemid(::google::protobuf::int32 value);

  // optional int32 userid = 2;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 goodsid = 3;
  bool has_goodsid() const;
  void clear_goodsid();
  static const int kGoodsidFieldNumber = 3;
  ::google::protobuf::int32 goodsid() const;
  void set_goodsid(::google::protobuf::int32 value);

  // optional int32 amount = 4;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 4;
  ::google::protobuf::int32 amount() const;
  void set_amount(::google::protobuf::int32 value);

  // optional int32 validity = 5;
  bool has_validity() const;
  void clear_validity();
  static const int kValidityFieldNumber = 5;
  ::google::protobuf::int32 validity() const;
  void set_validity(::google::protobuf::int32 value);

  // optional int32 iswear = 7;
  bool has_iswear() const;
  void clear_iswear();
  static const int kIswearFieldNumber = 7;
  ::google::protobuf::int32 iswear() const;
  void set_iswear(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.goodsinfo)
 private:
  void set_has_itemid();
  void clear_has_itemid();
  void set_has_userid();
  void clear_has_userid();
  void set_has_goodsid();
  void clear_has_goodsid();
  void set_has_amount();
  void clear_has_amount();
  void set_has_validity();
  void clear_has_validity();
  void set_has_createdate();
  void clear_has_createdate();
  void set_has_iswear();
  void clear_has_iswear();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr createdate_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 goodsid_;
  ::google::protobuf::int32 amount_;
  ::google::protobuf::int32 validity_;
  ::google::protobuf::int32 iswear_;
  friend struct ::protobuf_st_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class goodslist : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.goodslist) */ {
 public:
  goodslist();
  virtual ~goodslist();

  goodslist(const goodslist& from);

  inline goodslist& operator=(const goodslist& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  goodslist(goodslist&& from) noexcept
    : goodslist() {
    *this = ::std::move(from);
  }

  inline goodslist& operator=(goodslist&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const goodslist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const goodslist* internal_default_instance() {
    return reinterpret_cast<const goodslist*>(
               &_goodslist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(goodslist* other);
  friend void swap(goodslist& a, goodslist& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline goodslist* New() const final {
    return CreateMaybeMessage<goodslist>(NULL);
  }

  goodslist* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<goodslist>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const goodslist& from);
  void MergeFrom(const goodslist& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(goodslist* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.goodsinfo glist = 1;
  int glist_size() const;
  void clear_glist();
  static const int kGlistFieldNumber = 1;
  ::NFMsg::goodsinfo* mutable_glist(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::goodsinfo >*
      mutable_glist();
  const ::NFMsg::goodsinfo& glist(int index) const;
  ::NFMsg::goodsinfo* add_glist();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::goodsinfo >&
      glist() const;

  // @@protoc_insertion_point(class_scope:NFMsg.goodslist)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::goodsinfo > glist_;
  friend struct ::protobuf_st_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class noticeinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.noticeinfo) */ {
 public:
  noticeinfo();
  virtual ~noticeinfo();

  noticeinfo(const noticeinfo& from);

  inline noticeinfo& operator=(const noticeinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  noticeinfo(noticeinfo&& from) noexcept
    : noticeinfo() {
    *this = ::std::move(from);
  }

  inline noticeinfo& operator=(noticeinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const noticeinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const noticeinfo* internal_default_instance() {
    return reinterpret_cast<const noticeinfo*>(
               &_noticeinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(noticeinfo* other);
  friend void swap(noticeinfo& a, noticeinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline noticeinfo* New() const final {
    return CreateMaybeMessage<noticeinfo>(NULL);
  }

  noticeinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<noticeinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const noticeinfo& from);
  void MergeFrom(const noticeinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(noticeinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 noticetype = 1;
  bool has_noticetype() const;
  void clear_noticetype();
  static const int kNoticetypeFieldNumber = 1;
  ::google::protobuf::int32 noticetype() const;
  void set_noticetype(::google::protobuf::int32 value);

  // optional int32 amount = 2;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  ::google::protobuf::int32 amount() const;
  void set_amount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.noticeinfo)
 private:
  void set_has_noticetype();
  void clear_has_noticetype();
  void set_has_amount();
  void clear_has_amount();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 noticetype_;
  ::google::protobuf::int32 amount_;
  friend struct ::protobuf_st_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class playersimpleinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.playersimpleinfo) */ {
 public:
  playersimpleinfo();
  virtual ~playersimpleinfo();

  playersimpleinfo(const playersimpleinfo& from);

  inline playersimpleinfo& operator=(const playersimpleinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  playersimpleinfo(playersimpleinfo&& from) noexcept
    : playersimpleinfo() {
    *this = ::std::move(from);
  }

  inline playersimpleinfo& operator=(playersimpleinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const playersimpleinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const playersimpleinfo* internal_default_instance() {
    return reinterpret_cast<const playersimpleinfo*>(
               &_playersimpleinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(playersimpleinfo* other);
  friend void swap(playersimpleinfo& a, playersimpleinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline playersimpleinfo* New() const final {
    return CreateMaybeMessage<playersimpleinfo>(NULL);
  }

  playersimpleinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<playersimpleinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const playersimpleinfo& from);
  void MergeFrom(const playersimpleinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(playersimpleinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nickname = 5;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 5;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string ip = 31;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 31;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional string face_1 = 34;
  bool has_face_1() const;
  void clear_face_1();
  static const int kFace1FieldNumber = 34;
  const ::std::string& face_1() const;
  void set_face_1(const ::std::string& value);
  #if LANG_CXX11
  void set_face_1(::std::string&& value);
  #endif
  void set_face_1(const char* value);
  void set_face_1(const char* value, size_t size);
  ::std::string* mutable_face_1();
  ::std::string* release_face_1();
  void set_allocated_face_1(::std::string* face_1);

  // optional string location = 41;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 41;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  #if LANG_CXX11
  void set_location(::std::string&& value);
  #endif
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // optional string location_x = 47;
  bool has_location_x() const;
  void clear_location_x();
  static const int kLocationXFieldNumber = 47;
  const ::std::string& location_x() const;
  void set_location_x(const ::std::string& value);
  #if LANG_CXX11
  void set_location_x(::std::string&& value);
  #endif
  void set_location_x(const char* value);
  void set_location_x(const char* value, size_t size);
  ::std::string* mutable_location_x();
  ::std::string* release_location_x();
  void set_allocated_location_x(::std::string* location_x);

  // optional string location_y = 48;
  bool has_location_y() const;
  void clear_location_y();
  static const int kLocationYFieldNumber = 48;
  const ::std::string& location_y() const;
  void set_location_y(const ::std::string& value);
  #if LANG_CXX11
  void set_location_y(::std::string&& value);
  #endif
  void set_location_y(const char* value);
  void set_location_y(const char* value, size_t size);
  ::std::string* mutable_location_y();
  ::std::string* release_location_y();
  void set_allocated_location_y(::std::string* location_y);

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 sex = 8;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 8;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // optional int32 level = 13;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 13;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional int32 viplevel = 14;
  bool has_viplevel() const;
  void clear_viplevel();
  static const int kViplevelFieldNumber = 14;
  ::google::protobuf::int32 viplevel() const;
  void set_viplevel(::google::protobuf::int32 value);

  // optional int64 jetton = 15;
  bool has_jetton() const;
  void clear_jetton();
  static const int kJettonFieldNumber = 15;
  ::google::protobuf::int64 jetton() const;
  void set_jetton(::google::protobuf::int64 value);

  // optional int32 gold = 16;
  bool has_gold() const;
  void clear_gold();
  static const int kGoldFieldNumber = 16;
  ::google::protobuf::int32 gold() const;
  void set_gold(::google::protobuf::int32 value);

  // optional int32 popularity = 21;
  bool has_popularity() const;
  void clear_popularity();
  static const int kPopularityFieldNumber = 21;
  ::google::protobuf::int32 popularity() const;
  void set_popularity(::google::protobuf::int32 value);

  // optional int32 propertyid = 45;
  bool has_propertyid() const;
  void clear_propertyid();
  static const int kPropertyidFieldNumber = 45;
  ::google::protobuf::int32 propertyid() const;
  void set_propertyid(::google::protobuf::int32 value);

  // optional int32 jifen = 99;
  bool has_jifen() const;
  void clear_jifen();
  static const int kJifenFieldNumber = 99;
  ::google::protobuf::int32 jifen() const;
  void set_jifen(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.playersimpleinfo)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_sex();
  void clear_has_sex();
  void set_has_level();
  void clear_has_level();
  void set_has_viplevel();
  void clear_has_viplevel();
  void set_has_jetton();
  void clear_has_jetton();
  void set_has_gold();
  void clear_has_gold();
  void set_has_popularity();
  void clear_has_popularity();
  void set_has_ip();
  void clear_has_ip();
  void set_has_face_1();
  void clear_has_face_1();
  void set_has_location();
  void clear_has_location();
  void set_has_propertyid();
  void clear_has_propertyid();
  void set_has_jifen();
  void clear_has_jifen();
  void set_has_location_x();
  void clear_has_location_x();
  void set_has_location_y();
  void clear_has_location_y();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr face_1_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::internal::ArenaStringPtr location_x_;
  ::google::protobuf::internal::ArenaStringPtr location_y_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int64 jetton_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 popularity_;
  ::google::protobuf::int32 propertyid_;
  ::google::protobuf::int32 jifen_;
  friend struct ::protobuf_st_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class broadcastinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.broadcastinfo) */ {
 public:
  broadcastinfo();
  virtual ~broadcastinfo();

  broadcastinfo(const broadcastinfo& from);

  inline broadcastinfo& operator=(const broadcastinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  broadcastinfo(broadcastinfo&& from) noexcept
    : broadcastinfo() {
    *this = ::std::move(from);
  }

  inline broadcastinfo& operator=(broadcastinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const broadcastinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const broadcastinfo* internal_default_instance() {
    return reinterpret_cast<const broadcastinfo*>(
               &_broadcastinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(broadcastinfo* other);
  friend void swap(broadcastinfo& a, broadcastinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline broadcastinfo* New() const final {
    return CreateMaybeMessage<broadcastinfo>(NULL);
  }

  broadcastinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<broadcastinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const broadcastinfo& from);
  void MergeFrom(const broadcastinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(broadcastinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sender = 4;
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 4;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  #if LANG_CXX11
  void set_sender(::std::string&& value);
  #endif
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // optional string msg = 5;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 5;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional string createtime = 8;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreatetimeFieldNumber = 8;
  const ::std::string& createtime() const;
  void set_createtime(const ::std::string& value);
  #if LANG_CXX11
  void set_createtime(::std::string&& value);
  #endif
  void set_createtime(const char* value);
  void set_createtime(const char* value, size_t size);
  ::std::string* mutable_createtime();
  ::std::string* release_createtime();
  void set_allocated_createtime(::std::string* createtime);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 broadtype = 2;
  bool has_broadtype() const;
  void clear_broadtype();
  static const int kBroadtypeFieldNumber = 2;
  ::google::protobuf::int32 broadtype() const;
  void set_broadtype(::google::protobuf::int32 value);

  // optional int32 senderid = 3;
  bool has_senderid() const;
  void clear_senderid();
  static const int kSenderidFieldNumber = 3;
  ::google::protobuf::int32 senderid() const;
  void set_senderid(::google::protobuf::int32 value);

  // optional int32 broadtimes = 6;
  bool has_broadtimes() const;
  void clear_broadtimes();
  static const int kBroadtimesFieldNumber = 6;
  ::google::protobuf::int32 broadtimes() const;
  void set_broadtimes(::google::protobuf::int32 value);

  // optional int32 validday = 7;
  bool has_validday() const;
  void clear_validday();
  static const int kValiddayFieldNumber = 7;
  ::google::protobuf::int32 validday() const;
  void set_validday(::google::protobuf::int32 value);

  // optional int32 cycletype = 9;
  bool has_cycletype() const;
  void clear_cycletype();
  static const int kCycletypeFieldNumber = 9;
  ::google::protobuf::int32 cycletype() const;
  void set_cycletype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.broadcastinfo)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_broadtype();
  void clear_has_broadtype();
  void set_has_senderid();
  void clear_has_senderid();
  void set_has_sender();
  void clear_has_sender();
  void set_has_msg();
  void clear_has_msg();
  void set_has_broadtimes();
  void clear_has_broadtimes();
  void set_has_validday();
  void clear_has_validday();
  void set_has_createtime();
  void clear_has_createtime();
  void set_has_cycletype();
  void clear_has_cycletype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::internal::ArenaStringPtr createtime_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 broadtype_;
  ::google::protobuf::int32 senderid_;
  ::google::protobuf::int32 broadtimes_;
  ::google::protobuf::int32 validday_;
  ::google::protobuf::int32 cycletype_;
  friend struct ::protobuf_st_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class mailinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.mailinfo) */ {
 public:
  mailinfo();
  virtual ~mailinfo();

  mailinfo(const mailinfo& from);

  inline mailinfo& operator=(const mailinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mailinfo(mailinfo&& from) noexcept
    : mailinfo() {
    *this = ::std::move(from);
  }

  inline mailinfo& operator=(mailinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mailinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mailinfo* internal_default_instance() {
    return reinterpret_cast<const mailinfo*>(
               &_mailinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(mailinfo* other);
  friend void swap(mailinfo& a, mailinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mailinfo* New() const final {
    return CreateMaybeMessage<mailinfo>(NULL);
  }

  mailinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mailinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mailinfo& from);
  void MergeFrom(const mailinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mailinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sender = 3;
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 3;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  #if LANG_CXX11
  void set_sender(::std::string&& value);
  #endif
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // optional string receiver = 5;
  bool has_receiver() const;
  void clear_receiver();
  static const int kReceiverFieldNumber = 5;
  const ::std::string& receiver() const;
  void set_receiver(const ::std::string& value);
  #if LANG_CXX11
  void set_receiver(::std::string&& value);
  #endif
  void set_receiver(const char* value);
  void set_receiver(const char* value, size_t size);
  ::std::string* mutable_receiver();
  ::std::string* release_receiver();
  void set_allocated_receiver(::std::string* receiver);

  // optional string title = 7;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 7;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string content = 8;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 8;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional string senddate = 9;
  bool has_senddate() const;
  void clear_senddate();
  static const int kSenddateFieldNumber = 9;
  const ::std::string& senddate() const;
  void set_senddate(const ::std::string& value);
  #if LANG_CXX11
  void set_senddate(::std::string&& value);
  #endif
  void set_senddate(const char* value);
  void set_senddate(const char* value, size_t size);
  ::std::string* mutable_senddate();
  ::std::string* release_senddate();
  void set_allocated_senddate(::std::string* senddate);

  // optional string markdate = 10;
  bool has_markdate() const;
  void clear_markdate();
  static const int kMarkdateFieldNumber = 10;
  const ::std::string& markdate() const;
  void set_markdate(const ::std::string& value);
  #if LANG_CXX11
  void set_markdate(::std::string&& value);
  #endif
  void set_markdate(const char* value);
  void set_markdate(const char* value, size_t size);
  ::std::string* mutable_markdate();
  ::std::string* release_markdate();
  void set_allocated_markdate(::std::string* markdate);

  // optional string externdata = 12;
  bool has_externdata() const;
  void clear_externdata();
  static const int kExterndataFieldNumber = 12;
  const ::std::string& externdata() const;
  void set_externdata(const ::std::string& value);
  #if LANG_CXX11
  void set_externdata(::std::string&& value);
  #endif
  void set_externdata(const char* value);
  void set_externdata(const char* value, size_t size);
  ::std::string* mutable_externdata();
  ::std::string* release_externdata();
  void set_allocated_externdata(::std::string* externdata);

  // optional string remark = 13;
  bool has_remark() const;
  void clear_remark();
  static const int kRemarkFieldNumber = 13;
  const ::std::string& remark() const;
  void set_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_remark(::std::string&& value);
  #endif
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  ::std::string* mutable_remark();
  ::std::string* release_remark();
  void set_allocated_remark(::std::string* remark);

  // optional int32 mailid = 1;
  bool has_mailid() const;
  void clear_mailid();
  static const int kMailidFieldNumber = 1;
  ::google::protobuf::int32 mailid() const;
  void set_mailid(::google::protobuf::int32 value);

  // optional int32 senderid = 2;
  bool has_senderid() const;
  void clear_senderid();
  static const int kSenderidFieldNumber = 2;
  ::google::protobuf::int32 senderid() const;
  void set_senderid(::google::protobuf::int32 value);

  // optional int32 receiverid = 4;
  bool has_receiverid() const;
  void clear_receiverid();
  static const int kReceiveridFieldNumber = 4;
  ::google::protobuf::int32 receiverid() const;
  void set_receiverid(::google::protobuf::int32 value);

  // optional int32 mailtype = 6;
  bool has_mailtype() const;
  void clear_mailtype();
  static const int kMailtypeFieldNumber = 6;
  ::google::protobuf::int32 mailtype() const;
  void set_mailtype(::google::protobuf::int32 value);

  // optional int32 mailstate = 11;
  bool has_mailstate() const;
  void clear_mailstate();
  static const int kMailstateFieldNumber = 11;
  ::google::protobuf::int32 mailstate() const;
  void set_mailstate(::google::protobuf::int32 value);

  // optional int32 validity = 14;
  bool has_validity() const;
  void clear_validity();
  static const int kValidityFieldNumber = 14;
  ::google::protobuf::int32 validity() const;
  void set_validity(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.mailinfo)
 private:
  void set_has_mailid();
  void clear_has_mailid();
  void set_has_senderid();
  void clear_has_senderid();
  void set_has_sender();
  void clear_has_sender();
  void set_has_receiverid();
  void clear_has_receiverid();
  void set_has_receiver();
  void clear_has_receiver();
  void set_has_mailtype();
  void clear_has_mailtype();
  void set_has_title();
  void clear_has_title();
  void set_has_content();
  void clear_has_content();
  void set_has_senddate();
  void clear_has_senddate();
  void set_has_markdate();
  void clear_has_markdate();
  void set_has_mailstate();
  void clear_has_mailstate();
  void set_has_externdata();
  void clear_has_externdata();
  void set_has_remark();
  void clear_has_remark();
  void set_has_validity();
  void clear_has_validity();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  ::google::protobuf::internal::ArenaStringPtr receiver_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr senddate_;
  ::google::protobuf::internal::ArenaStringPtr markdate_;
  ::google::protobuf::internal::ArenaStringPtr externdata_;
  ::google::protobuf::internal::ArenaStringPtr remark_;
  ::google::protobuf::int32 mailid_;
  ::google::protobuf::int32 senderid_;
  ::google::protobuf::int32 receiverid_;
  ::google::protobuf::int32 mailtype_;
  ::google::protobuf::int32 mailstate_;
  ::google::protobuf::int32 validity_;
  friend struct ::protobuf_st_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class maillist : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.maillist) */ {
 public:
  maillist();
  virtual ~maillist();

  maillist(const maillist& from);

  inline maillist& operator=(const maillist& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  maillist(maillist&& from) noexcept
    : maillist() {
    *this = ::std::move(from);
  }

  inline maillist& operator=(maillist&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const maillist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const maillist* internal_default_instance() {
    return reinterpret_cast<const maillist*>(
               &_maillist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(maillist* other);
  friend void swap(maillist& a, maillist& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline maillist* New() const final {
    return CreateMaybeMessage<maillist>(NULL);
  }

  maillist* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<maillist>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const maillist& from);
  void MergeFrom(const maillist& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(maillist* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.mailinfo mlist = 1;
  int mlist_size() const;
  void clear_mlist();
  static const int kMlistFieldNumber = 1;
  ::NFMsg::mailinfo* mutable_mlist(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::mailinfo >*
      mutable_mlist();
  const ::NFMsg::mailinfo& mlist(int index) const;
  ::NFMsg::mailinfo* add_mlist();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::mailinfo >&
      mlist() const;

  // @@protoc_insertion_point(class_scope:NFMsg.maillist)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::mailinfo > mlist_;
  friend struct ::protobuf_st_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class inviteinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.inviteinfo) */ {
 public:
  inviteinfo();
  virtual ~inviteinfo();

  inviteinfo(const inviteinfo& from);

  inline inviteinfo& operator=(const inviteinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  inviteinfo(inviteinfo&& from) noexcept
    : inviteinfo() {
    *this = ::std::move(from);
  }

  inline inviteinfo& operator=(inviteinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const inviteinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const inviteinfo* internal_default_instance() {
    return reinterpret_cast<const inviteinfo*>(
               &_inviteinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(inviteinfo* other);
  friend void swap(inviteinfo& a, inviteinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline inviteinfo* New() const final {
    return CreateMaybeMessage<inviteinfo>(NULL);
  }

  inviteinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<inviteinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const inviteinfo& from);
  void MergeFrom(const inviteinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(inviteinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string bindnickname = 3;
  bool has_bindnickname() const;
  void clear_bindnickname();
  static const int kBindnicknameFieldNumber = 3;
  const ::std::string& bindnickname() const;
  void set_bindnickname(const ::std::string& value);
  #if LANG_CXX11
  void set_bindnickname(::std::string&& value);
  #endif
  void set_bindnickname(const char* value);
  void set_bindnickname(const char* value, size_t size);
  ::std::string* mutable_bindnickname();
  ::std::string* release_bindnickname();
  void set_allocated_bindnickname(::std::string* bindnickname);

  // optional string bindfaceid = 4;
  bool has_bindfaceid() const;
  void clear_bindfaceid();
  static const int kBindfaceidFieldNumber = 4;
  const ::std::string& bindfaceid() const;
  void set_bindfaceid(const ::std::string& value);
  #if LANG_CXX11
  void set_bindfaceid(::std::string&& value);
  #endif
  void set_bindfaceid(const char* value);
  void set_bindfaceid(const char* value, size_t size);
  ::std::string* mutable_bindfaceid();
  ::std::string* release_bindfaceid();
  void set_allocated_bindfaceid(::std::string* bindfaceid);

  // optional string binddate = 5;
  bool has_binddate() const;
  void clear_binddate();
  static const int kBinddateFieldNumber = 5;
  const ::std::string& binddate() const;
  void set_binddate(const ::std::string& value);
  #if LANG_CXX11
  void set_binddate(::std::string&& value);
  #endif
  void set_binddate(const char* value);
  void set_binddate(const char* value, size_t size);
  ::std::string* mutable_binddate();
  ::std::string* release_binddate();
  void set_allocated_binddate(::std::string* binddate);

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 binduserid = 2;
  bool has_binduserid() const;
  void clear_binduserid();
  static const int kBinduseridFieldNumber = 2;
  ::google::protobuf::int32 binduserid() const;
  void set_binduserid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.inviteinfo)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_binduserid();
  void clear_has_binduserid();
  void set_has_bindnickname();
  void clear_has_bindnickname();
  void set_has_bindfaceid();
  void clear_has_bindfaceid();
  void set_has_binddate();
  void clear_has_binddate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr bindnickname_;
  ::google::protobuf::internal::ArenaStringPtr bindfaceid_;
  ::google::protobuf::internal::ArenaStringPtr binddate_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 binduserid_;
  friend struct ::protobuf_st_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class givemoneyrecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.givemoneyrecord) */ {
 public:
  givemoneyrecord();
  virtual ~givemoneyrecord();

  givemoneyrecord(const givemoneyrecord& from);

  inline givemoneyrecord& operator=(const givemoneyrecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  givemoneyrecord(givemoneyrecord&& from) noexcept
    : givemoneyrecord() {
    *this = ::std::move(from);
  }

  inline givemoneyrecord& operator=(givemoneyrecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const givemoneyrecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const givemoneyrecord* internal_default_instance() {
    return reinterpret_cast<const givemoneyrecord*>(
               &_givemoneyrecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(givemoneyrecord* other);
  friend void swap(givemoneyrecord& a, givemoneyrecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline givemoneyrecord* New() const final {
    return CreateMaybeMessage<givemoneyrecord>(NULL);
  }

  givemoneyrecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<givemoneyrecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const givemoneyrecord& from);
  void MergeFrom(const givemoneyrecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(givemoneyrecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nickname = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string timemark = 4;
  bool has_timemark() const;
  void clear_timemark();
  static const int kTimemarkFieldNumber = 4;
  const ::std::string& timemark() const;
  void set_timemark(const ::std::string& value);
  #if LANG_CXX11
  void set_timemark(::std::string&& value);
  #endif
  void set_timemark(const char* value);
  void set_timemark(const char* value, size_t size);
  ::std::string* mutable_timemark();
  ::std::string* release_timemark();
  void set_allocated_timemark(::std::string* timemark);

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 amount = 3;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  ::google::protobuf::int32 amount() const;
  void set_amount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.givemoneyrecord)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_amount();
  void clear_has_amount();
  void set_has_timemark();
  void clear_has_timemark();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr timemark_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 amount_;
  friend struct ::protobuf_st_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class agencyinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.agencyinfo) */ {
 public:
  agencyinfo();
  virtual ~agencyinfo();

  agencyinfo(const agencyinfo& from);

  inline agencyinfo& operator=(const agencyinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  agencyinfo(agencyinfo&& from) noexcept
    : agencyinfo() {
    *this = ::std::move(from);
  }

  inline agencyinfo& operator=(agencyinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const agencyinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const agencyinfo* internal_default_instance() {
    return reinterpret_cast<const agencyinfo*>(
               &_agencyinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(agencyinfo* other);
  friend void swap(agencyinfo& a, agencyinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline agencyinfo* New() const final {
    return CreateMaybeMessage<agencyinfo>(NULL);
  }

  agencyinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<agencyinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const agencyinfo& from);
  void MergeFrom(const agencyinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(agencyinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.inviteinfo invitelist = 9;
  int invitelist_size() const;
  void clear_invitelist();
  static const int kInvitelistFieldNumber = 9;
  ::NFMsg::inviteinfo* mutable_invitelist(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::inviteinfo >*
      mutable_invitelist();
  const ::NFMsg::inviteinfo& invitelist(int index) const;
  ::NFMsg::inviteinfo* add_invitelist();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::inviteinfo >&
      invitelist() const;

  // repeated .NFMsg.givemoneyrecord givemoneylist = 14;
  int givemoneylist_size() const;
  void clear_givemoneylist();
  static const int kGivemoneylistFieldNumber = 14;
  ::NFMsg::givemoneyrecord* mutable_givemoneylist(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::givemoneyrecord >*
      mutable_givemoneylist();
  const ::NFMsg::givemoneyrecord& givemoneylist(int index) const;
  ::NFMsg::givemoneyrecord* add_givemoneylist();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::givemoneyrecord >&
      givemoneylist() const;

  // optional string invitestr = 2;
  bool has_invitestr() const;
  void clear_invitestr();
  static const int kInvitestrFieldNumber = 2;
  const ::std::string& invitestr() const;
  void set_invitestr(const ::std::string& value);
  #if LANG_CXX11
  void set_invitestr(::std::string&& value);
  #endif
  void set_invitestr(const char* value);
  void set_invitestr(const char* value, size_t size);
  ::std::string* mutable_invitestr();
  ::std::string* release_invitestr();
  void set_allocated_invitestr(::std::string* invitestr);

  // optional string qrcodeurl = 10;
  bool has_qrcodeurl() const;
  void clear_qrcodeurl();
  static const int kQrcodeurlFieldNumber = 10;
  const ::std::string& qrcodeurl() const;
  void set_qrcodeurl(const ::std::string& value);
  #if LANG_CXX11
  void set_qrcodeurl(::std::string&& value);
  #endif
  void set_qrcodeurl(const char* value);
  void set_qrcodeurl(const char* value, size_t size);
  ::std::string* mutable_qrcodeurl();
  ::std::string* release_qrcodeurl();
  void set_allocated_qrcodeurl(::std::string* qrcodeurl);

  // optional string datemark = 11;
  bool has_datemark() const;
  void clear_datemark();
  static const int kDatemarkFieldNumber = 11;
  const ::std::string& datemark() const;
  void set_datemark(const ::std::string& value);
  #if LANG_CXX11
  void set_datemark(::std::string&& value);
  #endif
  void set_datemark(const char* value);
  void set_datemark(const char* value, size_t size);
  ::std::string* mutable_datemark();
  ::std::string* release_datemark();
  void set_allocated_datemark(::std::string* datemark);

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 level = 3;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional int32 soleagent = 4;
  bool has_soleagent() const;
  void clear_soleagent();
  static const int kSoleagentFieldNumber = 4;
  ::google::protobuf::int32 soleagent() const;
  void set_soleagent(::google::protobuf::int32 value);

  // optional int32 agent1 = 5;
  bool has_agent1() const;
  void clear_agent1();
  static const int kAgent1FieldNumber = 5;
  ::google::protobuf::int32 agent1() const;
  void set_agent1(::google::protobuf::int32 value);

  // optional int32 agent2 = 6;
  bool has_agent2() const;
  void clear_agent2();
  static const int kAgent2FieldNumber = 6;
  ::google::protobuf::int32 agent2() const;
  void set_agent2(::google::protobuf::int32 value);

  // optional int32 agent3 = 7;
  bool has_agent3() const;
  void clear_agent3();
  static const int kAgent3FieldNumber = 7;
  ::google::protobuf::int32 agent3() const;
  void set_agent3(::google::protobuf::int32 value);

  // optional int32 agent4 = 8;
  bool has_agent4() const;
  void clear_agent4();
  static const int kAgent4FieldNumber = 8;
  ::google::protobuf::int32 agent4() const;
  void set_agent4(::google::protobuf::int32 value);

  // optional int32 moneymark = 12;
  bool has_moneymark() const;
  void clear_moneymark();
  static const int kMoneymarkFieldNumber = 12;
  ::google::protobuf::int32 moneymark() const;
  void set_moneymark(::google::protobuf::int32 value);

  // optional int32 weekmoney = 13;
  bool has_weekmoney() const;
  void clear_weekmoney();
  static const int kWeekmoneyFieldNumber = 13;
  ::google::protobuf::int32 weekmoney() const;
  void set_weekmoney(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.agencyinfo)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_invitestr();
  void clear_has_invitestr();
  void set_has_level();
  void clear_has_level();
  void set_has_soleagent();
  void clear_has_soleagent();
  void set_has_agent1();
  void clear_has_agent1();
  void set_has_agent2();
  void clear_has_agent2();
  void set_has_agent3();
  void clear_has_agent3();
  void set_has_agent4();
  void clear_has_agent4();
  void set_has_qrcodeurl();
  void clear_has_qrcodeurl();
  void set_has_datemark();
  void clear_has_datemark();
  void set_has_moneymark();
  void clear_has_moneymark();
  void set_has_weekmoney();
  void clear_has_weekmoney();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::inviteinfo > invitelist_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::givemoneyrecord > givemoneylist_;
  ::google::protobuf::internal::ArenaStringPtr invitestr_;
  ::google::protobuf::internal::ArenaStringPtr qrcodeurl_;
  ::google::protobuf::internal::ArenaStringPtr datemark_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 soleagent_;
  ::google::protobuf::int32 agent1_;
  ::google::protobuf::int32 agent2_;
  ::google::protobuf::int32 agent3_;
  ::google::protobuf::int32 agent4_;
  ::google::protobuf::int32 moneymark_;
  ::google::protobuf::int32 weekmoney_;
  friend struct ::protobuf_st_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class intlist : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.intlist) */ {
 public:
  intlist();
  virtual ~intlist();

  intlist(const intlist& from);

  inline intlist& operator=(const intlist& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  intlist(intlist&& from) noexcept
    : intlist() {
    *this = ::std::move(from);
  }

  inline intlist& operator=(intlist&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const intlist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const intlist* internal_default_instance() {
    return reinterpret_cast<const intlist*>(
               &_intlist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(intlist* other);
  friend void swap(intlist& a, intlist& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline intlist* New() const final {
    return CreateMaybeMessage<intlist>(NULL);
  }

  intlist* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<intlist>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const intlist& from);
  void MergeFrom(const intlist& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(intlist* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 ilist = 1;
  int ilist_size() const;
  void clear_ilist();
  static const int kIlistFieldNumber = 1;
  ::google::protobuf::int32 ilist(int index) const;
  void set_ilist(int index, ::google::protobuf::int32 value);
  void add_ilist(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ilist() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ilist();

  // @@protoc_insertion_point(class_scope:NFMsg.intlist)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ilist_;
  friend struct ::protobuf_st_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class stringlist : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.stringlist) */ {
 public:
  stringlist();
  virtual ~stringlist();

  stringlist(const stringlist& from);

  inline stringlist& operator=(const stringlist& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  stringlist(stringlist&& from) noexcept
    : stringlist() {
    *this = ::std::move(from);
  }

  inline stringlist& operator=(stringlist&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stringlist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const stringlist* internal_default_instance() {
    return reinterpret_cast<const stringlist*>(
               &_stringlist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(stringlist* other);
  friend void swap(stringlist& a, stringlist& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline stringlist* New() const final {
    return CreateMaybeMessage<stringlist>(NULL);
  }

  stringlist* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<stringlist>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const stringlist& from);
  void MergeFrom(const stringlist& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stringlist* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string slist = 1;
  int slist_size() const;
  void clear_slist();
  static const int kSlistFieldNumber = 1;
  const ::std::string& slist(int index) const;
  ::std::string* mutable_slist(int index);
  void set_slist(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_slist(int index, ::std::string&& value);
  #endif
  void set_slist(int index, const char* value);
  void set_slist(int index, const char* value, size_t size);
  ::std::string* add_slist();
  void add_slist(const ::std::string& value);
  #if LANG_CXX11
  void add_slist(::std::string&& value);
  #endif
  void add_slist(const char* value);
  void add_slist(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& slist() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_slist();

  // @@protoc_insertion_point(class_scope:NFMsg.stringlist)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> slist_;
  friend struct ::protobuf_st_5fhuman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class specialinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.specialinfo) */ {
 public:
  specialinfo();
  virtual ~specialinfo();

  specialinfo(const specialinfo& from);

  inline specialinfo& operator=(const specialinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  specialinfo(specialinfo&& from) noexcept
    : specialinfo() {
    *this = ::std::move(from);
  }

  inline specialinfo& operator=(specialinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const specialinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const specialinfo* internal_default_instance() {
    return reinterpret_cast<const specialinfo*>(
               &_specialinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(specialinfo* other);
  friend void swap(specialinfo& a, specialinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline specialinfo* New() const final {
    return CreateMaybeMessage<specialinfo>(NULL);
  }

  specialinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<specialinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const specialinfo& from);
  void MergeFrom(const specialinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(specialinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 gametype = 9;
  int gametype_size() const;
  void clear_gametype();
  static const int kGametypeFieldNumber = 9;
  ::google::protobuf::int32 gametype(int index) const;
  void set_gametype(int index, ::google::protobuf::int32 value);
  void add_gametype(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      gametype() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_gametype();

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 starttime = 2;
  bool has_starttime() const;
  void clear_starttime();
  static const int kStarttimeFieldNumber = 2;
  ::google::protobuf::int32 starttime() const;
  void set_starttime(::google::protobuf::int32 value);

  // optional int32 endtime = 3;
  bool has_endtime() const;
  void clear_endtime();
  static const int kEndtimeFieldNumber = 3;
  ::google::protobuf::int32 endtime() const;
  void set_endtime(::google::protobuf::int32 value);

  // optional int32 state = 4;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // optional int32 rate = 5;
  bool has_rate() const;
  void clear_rate();
  static const int kRateFieldNumber = 5;
  ::google::protobuf::int32 rate() const;
  void set_rate(::google::protobuf::int32 value);

  // optional int32 winall = 6;
  bool has_winall() const;
  void clear_winall();
  static const int kWinallFieldNumber = 6;
  ::google::protobuf::int32 winall() const;
  void set_winall(::google::protobuf::int32 value);

  // optional int32 peinum = 7;
  bool has_peinum() const;
  void clear_peinum();
  static const int kPeinumFieldNumber = 7;
  ::google::protobuf::int32 peinum() const;
  void set_peinum(::google::protobuf::int32 value);

  // optional int32 marknum = 8;
  bool has_marknum() const;
  void clear_marknum();
  static const int kMarknumFieldNumber = 8;
  ::google::protobuf::int32 marknum() const;
  void set_marknum(::google::protobuf::int32 value);

  // optional int32 cardtype = 10;
  bool has_cardtype() const;
  void clear_cardtype();
  static const int kCardtypeFieldNumber = 10;
  ::google::protobuf::int32 cardtype() const;
  void set_cardtype(::google::protobuf::int32 value);

  // optional int32 iszhuang = 11;
  bool has_iszhuang() const;
  void clear_iszhuang();
  static const int kIszhuangFieldNumber = 11;
  ::google::protobuf::int32 iszhuang() const;
  void set_iszhuang(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.specialinfo)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_starttime();
  void clear_has_starttime();
  void set_has_endtime();
  void clear_has_endtime();
  void set_has_state();
  void clear_has_state();
  void set_has_rate();
  void clear_has_rate();
  void set_has_winall();
  void clear_has_winall();
  void set_has_peinum();
  void clear_has_peinum();
  void set_has_marknum();
  void clear_has_marknum();
  void set_has_cardtype();
  void clear_has_cardtype();
  void set_has_iszhuang();
  void clear_has_iszhuang();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > gametype_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 starttime_;
  ::google::protobuf::int32 endtime_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 rate_;
  ::google::protobuf::int32 winall_;
  ::google::protobuf::int32 peinum_;
  ::google::protobuf::int32 marknum_;
  ::google::protobuf::int32 cardtype_;
  ::google::protobuf::int32 iszhuang_;
  friend struct ::protobuf_st_5fhuman_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// accountinfo

// optional string account = 1;
inline bool accountinfo::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void accountinfo::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void accountinfo::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void accountinfo::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& accountinfo::account() const {
  // @@protoc_insertion_point(field_get:NFMsg.accountinfo.account)
  return account_.GetNoArena();
}
inline void accountinfo::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.accountinfo.account)
}
#if LANG_CXX11
inline void accountinfo::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.accountinfo.account)
}
#endif
inline void accountinfo::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.accountinfo.account)
}
inline void accountinfo::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.accountinfo.account)
}
inline ::std::string* accountinfo::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:NFMsg.accountinfo.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* accountinfo::release_account() {
  // @@protoc_insertion_point(field_release:NFMsg.accountinfo.account)
  if (!has_account()) {
    return NULL;
  }
  clear_has_account();
  return account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void accountinfo::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.accountinfo.account)
}

// optional string password = 2;
inline bool accountinfo::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void accountinfo::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void accountinfo::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void accountinfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& accountinfo::password() const {
  // @@protoc_insertion_point(field_get:NFMsg.accountinfo.password)
  return password_.GetNoArena();
}
inline void accountinfo::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.accountinfo.password)
}
#if LANG_CXX11
inline void accountinfo::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.accountinfo.password)
}
#endif
inline void accountinfo::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.accountinfo.password)
}
inline void accountinfo::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.accountinfo.password)
}
inline ::std::string* accountinfo::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:NFMsg.accountinfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* accountinfo::release_password() {
  // @@protoc_insertion_point(field_release:NFMsg.accountinfo.password)
  if (!has_password()) {
    return NULL;
  }
  clear_has_password();
  return password_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void accountinfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.accountinfo.password)
}

// optional uint64 userid = 3;
inline bool accountinfo::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void accountinfo::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void accountinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void accountinfo::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 accountinfo::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.accountinfo.userid)
  return userid_;
}
inline void accountinfo::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.accountinfo.userid)
}

// -------------------------------------------------------------------

// playerinfo

// optional int32 userid = 1;
inline bool playerinfo::has_userid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void playerinfo::set_has_userid() {
  _has_bits_[0] |= 0x08000000u;
}
inline void playerinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void playerinfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 playerinfo::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.userid)
  return userid_;
}
inline void playerinfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.userid)
}

// optional string cid = 2;
inline bool playerinfo::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void playerinfo::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void playerinfo::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void playerinfo::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cid();
}
inline const ::std::string& playerinfo::cid() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.cid)
  return cid_.GetNoArena();
}
inline void playerinfo::set_cid(const ::std::string& value) {
  set_has_cid();
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.cid)
}
#if LANG_CXX11
inline void playerinfo::set_cid(::std::string&& value) {
  set_has_cid();
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.cid)
}
#endif
inline void playerinfo::set_cid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cid();
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.cid)
}
inline void playerinfo::set_cid(const char* value, size_t size) {
  set_has_cid();
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.cid)
}
inline ::std::string* playerinfo::mutable_cid() {
  set_has_cid();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_cid() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.cid)
  if (!has_cid()) {
    return NULL;
  }
  clear_has_cid();
  return cid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    set_has_cid();
  } else {
    clear_has_cid();
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.cid)
}

// optional string account = 3;
inline bool playerinfo::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void playerinfo::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void playerinfo::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void playerinfo::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& playerinfo::account() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.account)
  return account_.GetNoArena();
}
inline void playerinfo::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.account)
}
#if LANG_CXX11
inline void playerinfo::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.account)
}
#endif
inline void playerinfo::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.account)
}
inline void playerinfo::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.account)
}
inline ::std::string* playerinfo::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_account() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.account)
  if (!has_account()) {
    return NULL;
  }
  clear_has_account();
  return account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.account)
}

// optional string password = 4;
inline bool playerinfo::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void playerinfo::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void playerinfo::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void playerinfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& playerinfo::password() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.password)
  return password_.GetNoArena();
}
inline void playerinfo::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.password)
}
#if LANG_CXX11
inline void playerinfo::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.password)
}
#endif
inline void playerinfo::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.password)
}
inline void playerinfo::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.password)
}
inline ::std::string* playerinfo::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_password() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.password)
  if (!has_password()) {
    return NULL;
  }
  clear_has_password();
  return password_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.password)
}

// optional string nickname = 5;
inline bool playerinfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void playerinfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void playerinfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void playerinfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& playerinfo::nickname() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.nickname)
  return nickname_.GetNoArena();
}
inline void playerinfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.nickname)
}
#if LANG_CXX11
inline void playerinfo::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.nickname)
}
#endif
inline void playerinfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.nickname)
}
inline void playerinfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.nickname)
}
inline ::std::string* playerinfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_nickname() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.nickname)
  if (!has_nickname()) {
    return NULL;
  }
  clear_has_nickname();
  return nickname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.nickname)
}

// optional string regdate = 7;
inline bool playerinfo::has_regdate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void playerinfo::set_has_regdate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void playerinfo::clear_has_regdate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void playerinfo::clear_regdate() {
  regdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_regdate();
}
inline const ::std::string& playerinfo::regdate() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.regdate)
  return regdate_.GetNoArena();
}
inline void playerinfo::set_regdate(const ::std::string& value) {
  set_has_regdate();
  regdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.regdate)
}
#if LANG_CXX11
inline void playerinfo::set_regdate(::std::string&& value) {
  set_has_regdate();
  regdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.regdate)
}
#endif
inline void playerinfo::set_regdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_regdate();
  regdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.regdate)
}
inline void playerinfo::set_regdate(const char* value, size_t size) {
  set_has_regdate();
  regdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.regdate)
}
inline ::std::string* playerinfo::mutable_regdate() {
  set_has_regdate();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.regdate)
  return regdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_regdate() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.regdate)
  if (!has_regdate()) {
    return NULL;
  }
  clear_has_regdate();
  return regdate_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_regdate(::std::string* regdate) {
  if (regdate != NULL) {
    set_has_regdate();
  } else {
    clear_has_regdate();
  }
  regdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regdate);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.regdate)
}

// optional int32 sex = 8;
inline bool playerinfo::has_sex() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void playerinfo::set_has_sex() {
  _has_bits_[0] |= 0x10000000u;
}
inline void playerinfo::clear_has_sex() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void playerinfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 playerinfo::sex() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.sex)
  return sex_;
}
inline void playerinfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.sex)
}

// optional int32 age = 9;
inline bool playerinfo::has_age() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void playerinfo::set_has_age() {
  _has_bits_[0] |= 0x20000000u;
}
inline void playerinfo::clear_has_age() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void playerinfo::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 playerinfo::age() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.age)
  return age_;
}
inline void playerinfo::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.age)
}

// optional string email = 10;
inline bool playerinfo::has_email() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void playerinfo::set_has_email() {
  _has_bits_[0] |= 0x00000020u;
}
inline void playerinfo::clear_has_email() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void playerinfo::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& playerinfo::email() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.email)
  return email_.GetNoArena();
}
inline void playerinfo::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.email)
}
#if LANG_CXX11
inline void playerinfo::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.email)
}
#endif
inline void playerinfo::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.email)
}
inline void playerinfo::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.email)
}
inline ::std::string* playerinfo::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_email() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.email)
  if (!has_email()) {
    return NULL;
  }
  clear_has_email();
  return email_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.email)
}

// optional string phonenum = 11;
inline bool playerinfo::has_phonenum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void playerinfo::set_has_phonenum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void playerinfo::clear_has_phonenum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void playerinfo::clear_phonenum() {
  phonenum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phonenum();
}
inline const ::std::string& playerinfo::phonenum() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.phonenum)
  return phonenum_.GetNoArena();
}
inline void playerinfo::set_phonenum(const ::std::string& value) {
  set_has_phonenum();
  phonenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.phonenum)
}
#if LANG_CXX11
inline void playerinfo::set_phonenum(::std::string&& value) {
  set_has_phonenum();
  phonenum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.phonenum)
}
#endif
inline void playerinfo::set_phonenum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phonenum();
  phonenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.phonenum)
}
inline void playerinfo::set_phonenum(const char* value, size_t size) {
  set_has_phonenum();
  phonenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.phonenum)
}
inline ::std::string* playerinfo::mutable_phonenum() {
  set_has_phonenum();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.phonenum)
  return phonenum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_phonenum() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.phonenum)
  if (!has_phonenum()) {
    return NULL;
  }
  clear_has_phonenum();
  return phonenum_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_phonenum(::std::string* phonenum) {
  if (phonenum != NULL) {
    set_has_phonenum();
  } else {
    clear_has_phonenum();
  }
  phonenum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phonenum);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.phonenum)
}

// optional int32 exp = 12;
inline bool playerinfo::has_exp() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void playerinfo::set_has_exp() {
  _has_bits_[0] |= 0x40000000u;
}
inline void playerinfo::clear_has_exp() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void playerinfo::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 playerinfo::exp() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.exp)
  return exp_;
}
inline void playerinfo::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.exp)
}

// optional int32 level = 13;
inline bool playerinfo::has_level() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void playerinfo::set_has_level() {
  _has_bits_[0] |= 0x80000000u;
}
inline void playerinfo::clear_has_level() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void playerinfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 playerinfo::level() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.level)
  return level_;
}
inline void playerinfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.level)
}

// optional int32 viplevel = 14;
inline bool playerinfo::has_viplevel() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void playerinfo::set_has_viplevel() {
  _has_bits_[1] |= 0x00000001u;
}
inline void playerinfo::clear_has_viplevel() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void playerinfo::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 playerinfo::viplevel() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.viplevel)
  return viplevel_;
}
inline void playerinfo::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.viplevel)
}

// optional int64 jetton = 15;
inline bool playerinfo::has_jetton() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void playerinfo::set_has_jetton() {
  _has_bits_[1] |= 0x00000002u;
}
inline void playerinfo::clear_has_jetton() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void playerinfo::clear_jetton() {
  jetton_ = GOOGLE_LONGLONG(0);
  clear_has_jetton();
}
inline ::google::protobuf::int64 playerinfo::jetton() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.jetton)
  return jetton_;
}
inline void playerinfo::set_jetton(::google::protobuf::int64 value) {
  set_has_jetton();
  jetton_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.jetton)
}

// optional int32 gold = 16;
inline bool playerinfo::has_gold() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void playerinfo::set_has_gold() {
  _has_bits_[1] |= 0x00000004u;
}
inline void playerinfo::clear_has_gold() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void playerinfo::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 playerinfo::gold() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.gold)
  return gold_;
}
inline void playerinfo::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.gold)
}

// optional int32 money = 17;
inline bool playerinfo::has_money() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void playerinfo::set_has_money() {
  _has_bits_[1] |= 0x00000008u;
}
inline void playerinfo::clear_has_money() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void playerinfo::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 playerinfo::money() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.money)
  return money_;
}
inline void playerinfo::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.money)
}

// optional string channel = 18;
inline bool playerinfo::has_channel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void playerinfo::set_has_channel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void playerinfo::clear_has_channel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void playerinfo::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel();
}
inline const ::std::string& playerinfo::channel() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.channel)
  return channel_.GetNoArena();
}
inline void playerinfo::set_channel(const ::std::string& value) {
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.channel)
}
#if LANG_CXX11
inline void playerinfo::set_channel(::std::string&& value) {
  set_has_channel();
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.channel)
}
#endif
inline void playerinfo::set_channel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.channel)
}
inline void playerinfo::set_channel(const char* value, size_t size) {
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.channel)
}
inline ::std::string* playerinfo::mutable_channel() {
  set_has_channel();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_channel() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.channel)
  if (!has_channel()) {
    return NULL;
  }
  clear_has_channel();
  return channel_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_channel(::std::string* channel) {
  if (channel != NULL) {
    set_has_channel();
  } else {
    clear_has_channel();
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.channel)
}

// optional string province = 19;
inline bool playerinfo::has_province() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void playerinfo::set_has_province() {
  _has_bits_[0] |= 0x00000100u;
}
inline void playerinfo::clear_has_province() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void playerinfo::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
inline const ::std::string& playerinfo::province() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.province)
  return province_.GetNoArena();
}
inline void playerinfo::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.province)
}
#if LANG_CXX11
inline void playerinfo::set_province(::std::string&& value) {
  set_has_province();
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.province)
}
#endif
inline void playerinfo::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.province)
}
inline void playerinfo::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.province)
}
inline ::std::string* playerinfo::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_province() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.province)
  if (!has_province()) {
    return NULL;
  }
  clear_has_province();
  return province_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.province)
}

// optional string city = 20;
inline bool playerinfo::has_city() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void playerinfo::set_has_city() {
  _has_bits_[0] |= 0x00000200u;
}
inline void playerinfo::clear_has_city() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void playerinfo::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
inline const ::std::string& playerinfo::city() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.city)
  return city_.GetNoArena();
}
inline void playerinfo::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.city)
}
#if LANG_CXX11
inline void playerinfo::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.city)
}
#endif
inline void playerinfo::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.city)
}
inline void playerinfo::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.city)
}
inline ::std::string* playerinfo::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_city() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.city)
  if (!has_city()) {
    return NULL;
  }
  clear_has_city();
  return city_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.city)
}

// optional int32 popularity = 21;
inline bool playerinfo::has_popularity() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void playerinfo::set_has_popularity() {
  _has_bits_[1] |= 0x00000010u;
}
inline void playerinfo::clear_has_popularity() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void playerinfo::clear_popularity() {
  popularity_ = 0;
  clear_has_popularity();
}
inline ::google::protobuf::int32 playerinfo::popularity() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.popularity)
  return popularity_;
}
inline void playerinfo::set_popularity(::google::protobuf::int32 value) {
  set_has_popularity();
  popularity_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.popularity)
}

// optional int32 idenstatus = 22;
inline bool playerinfo::has_idenstatus() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void playerinfo::set_has_idenstatus() {
  _has_bits_[1] |= 0x00000020u;
}
inline void playerinfo::clear_has_idenstatus() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void playerinfo::clear_idenstatus() {
  idenstatus_ = 0;
  clear_has_idenstatus();
}
inline ::google::protobuf::int32 playerinfo::idenstatus() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.idenstatus)
  return idenstatus_;
}
inline void playerinfo::set_idenstatus(::google::protobuf::int32 value) {
  set_has_idenstatus();
  idenstatus_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.idenstatus)
}

// optional int32 bindtype = 23;
inline bool playerinfo::has_bindtype() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void playerinfo::set_has_bindtype() {
  _has_bits_[1] |= 0x00000040u;
}
inline void playerinfo::clear_has_bindtype() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void playerinfo::clear_bindtype() {
  bindtype_ = 0;
  clear_has_bindtype();
}
inline ::google::protobuf::int32 playerinfo::bindtype() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.bindtype)
  return bindtype_;
}
inline void playerinfo::set_bindtype(::google::protobuf::int32 value) {
  set_has_bindtype();
  bindtype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.bindtype)
}

// optional string bindnick = 24;
inline bool playerinfo::has_bindnick() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void playerinfo::set_has_bindnick() {
  _has_bits_[0] |= 0x00000400u;
}
inline void playerinfo::clear_has_bindnick() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void playerinfo::clear_bindnick() {
  bindnick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bindnick();
}
inline const ::std::string& playerinfo::bindnick() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.bindnick)
  return bindnick_.GetNoArena();
}
inline void playerinfo::set_bindnick(const ::std::string& value) {
  set_has_bindnick();
  bindnick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.bindnick)
}
#if LANG_CXX11
inline void playerinfo::set_bindnick(::std::string&& value) {
  set_has_bindnick();
  bindnick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.bindnick)
}
#endif
inline void playerinfo::set_bindnick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bindnick();
  bindnick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.bindnick)
}
inline void playerinfo::set_bindnick(const char* value, size_t size) {
  set_has_bindnick();
  bindnick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.bindnick)
}
inline ::std::string* playerinfo::mutable_bindnick() {
  set_has_bindnick();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.bindnick)
  return bindnick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_bindnick() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.bindnick)
  if (!has_bindnick()) {
    return NULL;
  }
  clear_has_bindnick();
  return bindnick_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_bindnick(::std::string* bindnick) {
  if (bindnick != NULL) {
    set_has_bindnick();
  } else {
    clear_has_bindnick();
  }
  bindnick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindnick);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.bindnick)
}

// optional string platformid = 25;
inline bool playerinfo::has_platformid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void playerinfo::set_has_platformid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void playerinfo::clear_has_platformid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void playerinfo::clear_platformid() {
  platformid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platformid();
}
inline const ::std::string& playerinfo::platformid() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.platformid)
  return platformid_.GetNoArena();
}
inline void playerinfo::set_platformid(const ::std::string& value) {
  set_has_platformid();
  platformid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.platformid)
}
#if LANG_CXX11
inline void playerinfo::set_platformid(::std::string&& value) {
  set_has_platformid();
  platformid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.platformid)
}
#endif
inline void playerinfo::set_platformid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_platformid();
  platformid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.platformid)
}
inline void playerinfo::set_platformid(const char* value, size_t size) {
  set_has_platformid();
  platformid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.platformid)
}
inline ::std::string* playerinfo::mutable_platformid() {
  set_has_platformid();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.platformid)
  return platformid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_platformid() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.platformid)
  if (!has_platformid()) {
    return NULL;
  }
  clear_has_platformid();
  return platformid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_platformid(::std::string* platformid) {
  if (platformid != NULL) {
    set_has_platformid();
  } else {
    clear_has_platformid();
  }
  platformid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platformid);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.platformid)
}

// optional string imei = 26;
inline bool playerinfo::has_imei() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void playerinfo::set_has_imei() {
  _has_bits_[0] |= 0x00001000u;
}
inline void playerinfo::clear_has_imei() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void playerinfo::clear_imei() {
  imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imei();
}
inline const ::std::string& playerinfo::imei() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.imei)
  return imei_.GetNoArena();
}
inline void playerinfo::set_imei(const ::std::string& value) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.imei)
}
#if LANG_CXX11
inline void playerinfo::set_imei(::std::string&& value) {
  set_has_imei();
  imei_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.imei)
}
#endif
inline void playerinfo::set_imei(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.imei)
}
inline void playerinfo::set_imei(const char* value, size_t size) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.imei)
}
inline ::std::string* playerinfo::mutable_imei() {
  set_has_imei();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.imei)
  return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_imei() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.imei)
  if (!has_imei()) {
    return NULL;
  }
  clear_has_imei();
  return imei_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_imei(::std::string* imei) {
  if (imei != NULL) {
    set_has_imei();
  } else {
    clear_has_imei();
  }
  imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.imei)
}

// optional string devname = 27;
inline bool playerinfo::has_devname() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void playerinfo::set_has_devname() {
  _has_bits_[0] |= 0x00002000u;
}
inline void playerinfo::clear_has_devname() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void playerinfo::clear_devname() {
  devname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devname();
}
inline const ::std::string& playerinfo::devname() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.devname)
  return devname_.GetNoArena();
}
inline void playerinfo::set_devname(const ::std::string& value) {
  set_has_devname();
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.devname)
}
#if LANG_CXX11
inline void playerinfo::set_devname(::std::string&& value) {
  set_has_devname();
  devname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.devname)
}
#endif
inline void playerinfo::set_devname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devname();
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.devname)
}
inline void playerinfo::set_devname(const char* value, size_t size) {
  set_has_devname();
  devname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.devname)
}
inline ::std::string* playerinfo::mutable_devname() {
  set_has_devname();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.devname)
  return devname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_devname() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.devname)
  if (!has_devname()) {
    return NULL;
  }
  clear_has_devname();
  return devname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_devname(::std::string* devname) {
  if (devname != NULL) {
    set_has_devname();
  } else {
    clear_has_devname();
  }
  devname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devname);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.devname)
}

// optional string ip = 28;
inline bool playerinfo::has_ip() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void playerinfo::set_has_ip() {
  _has_bits_[0] |= 0x00004000u;
}
inline void playerinfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void playerinfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& playerinfo::ip() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.ip)
  return ip_.GetNoArena();
}
inline void playerinfo::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.ip)
}
#if LANG_CXX11
inline void playerinfo::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.ip)
}
#endif
inline void playerinfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.ip)
}
inline void playerinfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.ip)
}
inline ::std::string* playerinfo::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_ip() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.ip)
  if (!has_ip()) {
    return NULL;
  }
  clear_has_ip();
  return ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.ip)
}

// optional int32 mobiletype = 29;
inline bool playerinfo::has_mobiletype() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void playerinfo::set_has_mobiletype() {
  _has_bits_[1] |= 0x00000080u;
}
inline void playerinfo::clear_has_mobiletype() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void playerinfo::clear_mobiletype() {
  mobiletype_ = 0;
  clear_has_mobiletype();
}
inline ::google::protobuf::int32 playerinfo::mobiletype() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.mobiletype)
  return mobiletype_;
}
inline void playerinfo::set_mobiletype(::google::protobuf::int32 value) {
  set_has_mobiletype();
  mobiletype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.mobiletype)
}

// optional int32 lasttime = 30;
inline bool playerinfo::has_lasttime() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void playerinfo::set_has_lasttime() {
  _has_bits_[1] |= 0x00000100u;
}
inline void playerinfo::clear_has_lasttime() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void playerinfo::clear_lasttime() {
  lasttime_ = 0;
  clear_has_lasttime();
}
inline ::google::protobuf::int32 playerinfo::lasttime() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.lasttime)
  return lasttime_;
}
inline void playerinfo::set_lasttime(::google::protobuf::int32 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.lasttime)
}

// optional int32 penulttime = 31;
inline bool playerinfo::has_penulttime() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void playerinfo::set_has_penulttime() {
  _has_bits_[1] |= 0x00000200u;
}
inline void playerinfo::clear_has_penulttime() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void playerinfo::clear_penulttime() {
  penulttime_ = 0;
  clear_has_penulttime();
}
inline ::google::protobuf::int32 playerinfo::penulttime() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.penulttime)
  return penulttime_;
}
inline void playerinfo::set_penulttime(::google::protobuf::int32 value) {
  set_has_penulttime();
  penulttime_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.penulttime)
}

// optional int32 silent = 32;
inline bool playerinfo::has_silent() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void playerinfo::set_has_silent() {
  _has_bits_[1] |= 0x00000400u;
}
inline void playerinfo::clear_has_silent() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void playerinfo::clear_silent() {
  silent_ = 0;
  clear_has_silent();
}
inline ::google::protobuf::int32 playerinfo::silent() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.silent)
  return silent_;
}
inline void playerinfo::set_silent(::google::protobuf::int32 value) {
  set_has_silent();
  silent_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.silent)
}

// optional int32 isban = 33;
inline bool playerinfo::has_isban() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void playerinfo::set_has_isban() {
  _has_bits_[1] |= 0x00000800u;
}
inline void playerinfo::clear_has_isban() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void playerinfo::clear_isban() {
  isban_ = 0;
  clear_has_isban();
}
inline ::google::protobuf::int32 playerinfo::isban() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.isban)
  return isban_;
}
inline void playerinfo::set_isban(::google::protobuf::int32 value) {
  set_has_isban();
  isban_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.isban)
}

// optional string face_1 = 34;
inline bool playerinfo::has_face_1() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void playerinfo::set_has_face_1() {
  _has_bits_[0] |= 0x00008000u;
}
inline void playerinfo::clear_has_face_1() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void playerinfo::clear_face_1() {
  face_1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_face_1();
}
inline const ::std::string& playerinfo::face_1() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.face_1)
  return face_1_.GetNoArena();
}
inline void playerinfo::set_face_1(const ::std::string& value) {
  set_has_face_1();
  face_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.face_1)
}
#if LANG_CXX11
inline void playerinfo::set_face_1(::std::string&& value) {
  set_has_face_1();
  face_1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.face_1)
}
#endif
inline void playerinfo::set_face_1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_face_1();
  face_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.face_1)
}
inline void playerinfo::set_face_1(const char* value, size_t size) {
  set_has_face_1();
  face_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.face_1)
}
inline ::std::string* playerinfo::mutable_face_1() {
  set_has_face_1();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.face_1)
  return face_1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_face_1() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.face_1)
  if (!has_face_1()) {
    return NULL;
  }
  clear_has_face_1();
  return face_1_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_face_1(::std::string* face_1) {
  if (face_1 != NULL) {
    set_has_face_1();
  } else {
    clear_has_face_1();
  }
  face_1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), face_1);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.face_1)
}

// optional string face_2 = 35;
inline bool playerinfo::has_face_2() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void playerinfo::set_has_face_2() {
  _has_bits_[0] |= 0x00010000u;
}
inline void playerinfo::clear_has_face_2() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void playerinfo::clear_face_2() {
  face_2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_face_2();
}
inline const ::std::string& playerinfo::face_2() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.face_2)
  return face_2_.GetNoArena();
}
inline void playerinfo::set_face_2(const ::std::string& value) {
  set_has_face_2();
  face_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.face_2)
}
#if LANG_CXX11
inline void playerinfo::set_face_2(::std::string&& value) {
  set_has_face_2();
  face_2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.face_2)
}
#endif
inline void playerinfo::set_face_2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_face_2();
  face_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.face_2)
}
inline void playerinfo::set_face_2(const char* value, size_t size) {
  set_has_face_2();
  face_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.face_2)
}
inline ::std::string* playerinfo::mutable_face_2() {
  set_has_face_2();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.face_2)
  return face_2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_face_2() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.face_2)
  if (!has_face_2()) {
    return NULL;
  }
  clear_has_face_2();
  return face_2_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_face_2(::std::string* face_2) {
  if (face_2 != NULL) {
    set_has_face_2();
  } else {
    clear_has_face_2();
  }
  face_2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), face_2);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.face_2)
}

// optional string face_3 = 36;
inline bool playerinfo::has_face_3() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void playerinfo::set_has_face_3() {
  _has_bits_[0] |= 0x00020000u;
}
inline void playerinfo::clear_has_face_3() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void playerinfo::clear_face_3() {
  face_3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_face_3();
}
inline const ::std::string& playerinfo::face_3() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.face_3)
  return face_3_.GetNoArena();
}
inline void playerinfo::set_face_3(const ::std::string& value) {
  set_has_face_3();
  face_3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.face_3)
}
#if LANG_CXX11
inline void playerinfo::set_face_3(::std::string&& value) {
  set_has_face_3();
  face_3_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.face_3)
}
#endif
inline void playerinfo::set_face_3(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_face_3();
  face_3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.face_3)
}
inline void playerinfo::set_face_3(const char* value, size_t size) {
  set_has_face_3();
  face_3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.face_3)
}
inline ::std::string* playerinfo::mutable_face_3() {
  set_has_face_3();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.face_3)
  return face_3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_face_3() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.face_3)
  if (!has_face_3()) {
    return NULL;
  }
  clear_has_face_3();
  return face_3_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_face_3(::std::string* face_3) {
  if (face_3 != NULL) {
    set_has_face_3();
  } else {
    clear_has_face_3();
  }
  face_3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), face_3);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.face_3)
}

// optional string face_4 = 37;
inline bool playerinfo::has_face_4() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void playerinfo::set_has_face_4() {
  _has_bits_[0] |= 0x00040000u;
}
inline void playerinfo::clear_has_face_4() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void playerinfo::clear_face_4() {
  face_4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_face_4();
}
inline const ::std::string& playerinfo::face_4() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.face_4)
  return face_4_.GetNoArena();
}
inline void playerinfo::set_face_4(const ::std::string& value) {
  set_has_face_4();
  face_4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.face_4)
}
#if LANG_CXX11
inline void playerinfo::set_face_4(::std::string&& value) {
  set_has_face_4();
  face_4_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.face_4)
}
#endif
inline void playerinfo::set_face_4(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_face_4();
  face_4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.face_4)
}
inline void playerinfo::set_face_4(const char* value, size_t size) {
  set_has_face_4();
  face_4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.face_4)
}
inline ::std::string* playerinfo::mutable_face_4() {
  set_has_face_4();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.face_4)
  return face_4_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_face_4() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.face_4)
  if (!has_face_4()) {
    return NULL;
  }
  clear_has_face_4();
  return face_4_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_face_4(::std::string* face_4) {
  if (face_4 != NULL) {
    set_has_face_4();
  } else {
    clear_has_face_4();
  }
  face_4_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), face_4);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.face_4)
}

// optional int32 isrobot = 38;
inline bool playerinfo::has_isrobot() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void playerinfo::set_has_isrobot() {
  _has_bits_[1] |= 0x00001000u;
}
inline void playerinfo::clear_has_isrobot() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void playerinfo::clear_isrobot() {
  isrobot_ = 0;
  clear_has_isrobot();
}
inline ::google::protobuf::int32 playerinfo::isrobot() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.isrobot)
  return isrobot_;
}
inline void playerinfo::set_isrobot(::google::protobuf::int32 value) {
  set_has_isrobot();
  isrobot_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.isrobot)
}

// optional int32 playtype = 39;
inline bool playerinfo::has_playtype() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void playerinfo::set_has_playtype() {
  _has_bits_[1] |= 0x00002000u;
}
inline void playerinfo::clear_has_playtype() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void playerinfo::clear_playtype() {
  playtype_ = 0;
  clear_has_playtype();
}
inline ::google::protobuf::int32 playerinfo::playtype() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.playtype)
  return playtype_;
}
inline void playerinfo::set_playtype(::google::protobuf::int32 value) {
  set_has_playtype();
  playtype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.playtype)
}

// optional string description = 40;
inline bool playerinfo::has_description() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void playerinfo::set_has_description() {
  _has_bits_[0] |= 0x00080000u;
}
inline void playerinfo::clear_has_description() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void playerinfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& playerinfo::description() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.description)
  return description_.GetNoArena();
}
inline void playerinfo::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.description)
}
#if LANG_CXX11
inline void playerinfo::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.description)
}
#endif
inline void playerinfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.description)
}
inline void playerinfo::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.description)
}
inline ::std::string* playerinfo::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_description() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.description)
  if (!has_description()) {
    return NULL;
  }
  clear_has_description();
  return description_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.description)
}

// optional string location = 41;
inline bool playerinfo::has_location() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void playerinfo::set_has_location() {
  _has_bits_[0] |= 0x00100000u;
}
inline void playerinfo::clear_has_location() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void playerinfo::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_location();
}
inline const ::std::string& playerinfo::location() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.location)
  return location_.GetNoArena();
}
inline void playerinfo::set_location(const ::std::string& value) {
  set_has_location();
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.location)
}
#if LANG_CXX11
inline void playerinfo::set_location(::std::string&& value) {
  set_has_location();
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.location)
}
#endif
inline void playerinfo::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_location();
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.location)
}
inline void playerinfo::set_location(const char* value, size_t size) {
  set_has_location();
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.location)
}
inline ::std::string* playerinfo::mutable_location() {
  set_has_location();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_location() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.location)
  if (!has_location()) {
    return NULL;
  }
  clear_has_location();
  return location_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    set_has_location();
  } else {
    clear_has_location();
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.location)
}

// optional int64 bankjetton = 42;
inline bool playerinfo::has_bankjetton() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void playerinfo::set_has_bankjetton() {
  _has_bits_[1] |= 0x00004000u;
}
inline void playerinfo::clear_has_bankjetton() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void playerinfo::clear_bankjetton() {
  bankjetton_ = GOOGLE_LONGLONG(0);
  clear_has_bankjetton();
}
inline ::google::protobuf::int64 playerinfo::bankjetton() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.bankjetton)
  return bankjetton_;
}
inline void playerinfo::set_bankjetton(::google::protobuf::int64 value) {
  set_has_bankjetton();
  bankjetton_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.bankjetton)
}

// optional string title = 43;
inline bool playerinfo::has_title() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void playerinfo::set_has_title() {
  _has_bits_[0] |= 0x00200000u;
}
inline void playerinfo::clear_has_title() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void playerinfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& playerinfo::title() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.title)
  return title_.GetNoArena();
}
inline void playerinfo::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.title)
}
#if LANG_CXX11
inline void playerinfo::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.title)
}
#endif
inline void playerinfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.title)
}
inline void playerinfo::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.title)
}
inline ::std::string* playerinfo::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_title() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.title)
  if (!has_title()) {
    return NULL;
  }
  clear_has_title();
  return title_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.title)
}

// optional int32 blacklist = 44;
inline bool playerinfo::has_blacklist() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void playerinfo::set_has_blacklist() {
  _has_bits_[1] |= 0x00008000u;
}
inline void playerinfo::clear_has_blacklist() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void playerinfo::clear_blacklist() {
  blacklist_ = 0;
  clear_has_blacklist();
}
inline ::google::protobuf::int32 playerinfo::blacklist() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.blacklist)
  return blacklist_;
}
inline void playerinfo::set_blacklist(::google::protobuf::int32 value) {
  set_has_blacklist();
  blacklist_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.blacklist)
}

// optional int32 propertyid = 45;
inline bool playerinfo::has_propertyid() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void playerinfo::set_has_propertyid() {
  _has_bits_[1] |= 0x00010000u;
}
inline void playerinfo::clear_has_propertyid() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void playerinfo::clear_propertyid() {
  propertyid_ = 0;
  clear_has_propertyid();
}
inline ::google::protobuf::int32 playerinfo::propertyid() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.propertyid)
  return propertyid_;
}
inline void playerinfo::set_propertyid(::google::protobuf::int32 value) {
  set_has_propertyid();
  propertyid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.propertyid)
}

// optional int32 agencystatus = 46;
inline bool playerinfo::has_agencystatus() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void playerinfo::set_has_agencystatus() {
  _has_bits_[1] |= 0x00020000u;
}
inline void playerinfo::clear_has_agencystatus() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void playerinfo::clear_agencystatus() {
  agencystatus_ = 0;
  clear_has_agencystatus();
}
inline ::google::protobuf::int32 playerinfo::agencystatus() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.agencystatus)
  return agencystatus_;
}
inline void playerinfo::set_agencystatus(::google::protobuf::int32 value) {
  set_has_agencystatus();
  agencystatus_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.agencystatus)
}

// optional string location_x = 47;
inline bool playerinfo::has_location_x() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void playerinfo::set_has_location_x() {
  _has_bits_[0] |= 0x00400000u;
}
inline void playerinfo::clear_has_location_x() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void playerinfo::clear_location_x() {
  location_x_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_location_x();
}
inline const ::std::string& playerinfo::location_x() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.location_x)
  return location_x_.GetNoArena();
}
inline void playerinfo::set_location_x(const ::std::string& value) {
  set_has_location_x();
  location_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.location_x)
}
#if LANG_CXX11
inline void playerinfo::set_location_x(::std::string&& value) {
  set_has_location_x();
  location_x_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.location_x)
}
#endif
inline void playerinfo::set_location_x(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_location_x();
  location_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.location_x)
}
inline void playerinfo::set_location_x(const char* value, size_t size) {
  set_has_location_x();
  location_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.location_x)
}
inline ::std::string* playerinfo::mutable_location_x() {
  set_has_location_x();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.location_x)
  return location_x_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_location_x() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.location_x)
  if (!has_location_x()) {
    return NULL;
  }
  clear_has_location_x();
  return location_x_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_location_x(::std::string* location_x) {
  if (location_x != NULL) {
    set_has_location_x();
  } else {
    clear_has_location_x();
  }
  location_x_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location_x);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.location_x)
}

// optional string location_y = 48;
inline bool playerinfo::has_location_y() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void playerinfo::set_has_location_y() {
  _has_bits_[0] |= 0x00800000u;
}
inline void playerinfo::clear_has_location_y() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void playerinfo::clear_location_y() {
  location_y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_location_y();
}
inline const ::std::string& playerinfo::location_y() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.location_y)
  return location_y_.GetNoArena();
}
inline void playerinfo::set_location_y(const ::std::string& value) {
  set_has_location_y();
  location_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.location_y)
}
#if LANG_CXX11
inline void playerinfo::set_location_y(::std::string&& value) {
  set_has_location_y();
  location_y_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.location_y)
}
#endif
inline void playerinfo::set_location_y(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_location_y();
  location_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.location_y)
}
inline void playerinfo::set_location_y(const char* value, size_t size) {
  set_has_location_y();
  location_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.location_y)
}
inline ::std::string* playerinfo::mutable_location_y() {
  set_has_location_y();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.location_y)
  return location_y_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_location_y() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.location_y)
  if (!has_location_y()) {
    return NULL;
  }
  clear_has_location_y();
  return location_y_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_location_y(::std::string* location_y) {
  if (location_y != NULL) {
    set_has_location_y();
  } else {
    clear_has_location_y();
  }
  location_y_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location_y);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.location_y)
}

// optional string registration1 = 49;
inline bool playerinfo::has_registration1() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void playerinfo::set_has_registration1() {
  _has_bits_[0] |= 0x01000000u;
}
inline void playerinfo::clear_has_registration1() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void playerinfo::clear_registration1() {
  registration1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_registration1();
}
inline const ::std::string& playerinfo::registration1() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.registration1)
  return registration1_.GetNoArena();
}
inline void playerinfo::set_registration1(const ::std::string& value) {
  set_has_registration1();
  registration1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.registration1)
}
#if LANG_CXX11
inline void playerinfo::set_registration1(::std::string&& value) {
  set_has_registration1();
  registration1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.registration1)
}
#endif
inline void playerinfo::set_registration1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_registration1();
  registration1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.registration1)
}
inline void playerinfo::set_registration1(const char* value, size_t size) {
  set_has_registration1();
  registration1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.registration1)
}
inline ::std::string* playerinfo::mutable_registration1() {
  set_has_registration1();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.registration1)
  return registration1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_registration1() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.registration1)
  if (!has_registration1()) {
    return NULL;
  }
  clear_has_registration1();
  return registration1_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_registration1(::std::string* registration1) {
  if (registration1 != NULL) {
    set_has_registration1();
  } else {
    clear_has_registration1();
  }
  registration1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), registration1);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.registration1)
}

// optional string registration2 = 50;
inline bool playerinfo::has_registration2() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void playerinfo::set_has_registration2() {
  _has_bits_[0] |= 0x02000000u;
}
inline void playerinfo::clear_has_registration2() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void playerinfo::clear_registration2() {
  registration2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_registration2();
}
inline const ::std::string& playerinfo::registration2() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.registration2)
  return registration2_.GetNoArena();
}
inline void playerinfo::set_registration2(const ::std::string& value) {
  set_has_registration2();
  registration2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.registration2)
}
#if LANG_CXX11
inline void playerinfo::set_registration2(::std::string&& value) {
  set_has_registration2();
  registration2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.registration2)
}
#endif
inline void playerinfo::set_registration2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_registration2();
  registration2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.registration2)
}
inline void playerinfo::set_registration2(const char* value, size_t size) {
  set_has_registration2();
  registration2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.registration2)
}
inline ::std::string* playerinfo::mutable_registration2() {
  set_has_registration2();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.registration2)
  return registration2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_registration2() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.registration2)
  if (!has_registration2()) {
    return NULL;
  }
  clear_has_registration2();
  return registration2_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_registration2(::std::string* registration2) {
  if (registration2 != NULL) {
    set_has_registration2();
  } else {
    clear_has_registration2();
  }
  registration2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), registration2);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.registration2)
}

// optional string registration3 = 51;
inline bool playerinfo::has_registration3() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void playerinfo::set_has_registration3() {
  _has_bits_[0] |= 0x04000000u;
}
inline void playerinfo::clear_has_registration3() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void playerinfo::clear_registration3() {
  registration3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_registration3();
}
inline const ::std::string& playerinfo::registration3() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.registration3)
  return registration3_.GetNoArena();
}
inline void playerinfo::set_registration3(const ::std::string& value) {
  set_has_registration3();
  registration3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.registration3)
}
#if LANG_CXX11
inline void playerinfo::set_registration3(::std::string&& value) {
  set_has_registration3();
  registration3_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playerinfo.registration3)
}
#endif
inline void playerinfo::set_registration3(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_registration3();
  registration3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playerinfo.registration3)
}
inline void playerinfo::set_registration3(const char* value, size_t size) {
  set_has_registration3();
  registration3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playerinfo.registration3)
}
inline ::std::string* playerinfo::mutable_registration3() {
  set_has_registration3();
  // @@protoc_insertion_point(field_mutable:NFMsg.playerinfo.registration3)
  return registration3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playerinfo::release_registration3() {
  // @@protoc_insertion_point(field_release:NFMsg.playerinfo.registration3)
  if (!has_registration3()) {
    return NULL;
  }
  clear_has_registration3();
  return registration3_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playerinfo::set_allocated_registration3(::std::string* registration3) {
  if (registration3 != NULL) {
    set_has_registration3();
  } else {
    clear_has_registration3();
  }
  registration3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), registration3);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playerinfo.registration3)
}

// optional int32 signinmonth = 52;
inline bool playerinfo::has_signinmonth() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void playerinfo::set_has_signinmonth() {
  _has_bits_[1] |= 0x00040000u;
}
inline void playerinfo::clear_has_signinmonth() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void playerinfo::clear_signinmonth() {
  signinmonth_ = 0;
  clear_has_signinmonth();
}
inline ::google::protobuf::int32 playerinfo::signinmonth() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.signinmonth)
  return signinmonth_;
}
inline void playerinfo::set_signinmonth(::google::protobuf::int32 value) {
  set_has_signinmonth();
  signinmonth_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.signinmonth)
}

// optional int32 bsignin = 53;
inline bool playerinfo::has_bsignin() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void playerinfo::set_has_bsignin() {
  _has_bits_[1] |= 0x00080000u;
}
inline void playerinfo::clear_has_bsignin() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void playerinfo::clear_bsignin() {
  bsignin_ = 0;
  clear_has_bsignin();
}
inline ::google::protobuf::int32 playerinfo::bsignin() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.bsignin)
  return bsignin_;
}
inline void playerinfo::set_bsignin(::google::protobuf::int32 value) {
  set_has_bsignin();
  bsignin_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.bsignin)
}

// optional int32 turntablenum = 54;
inline bool playerinfo::has_turntablenum() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void playerinfo::set_has_turntablenum() {
  _has_bits_[1] |= 0x00100000u;
}
inline void playerinfo::clear_has_turntablenum() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void playerinfo::clear_turntablenum() {
  turntablenum_ = 0;
  clear_has_turntablenum();
}
inline ::google::protobuf::int32 playerinfo::turntablenum() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.turntablenum)
  return turntablenum_;
}
inline void playerinfo::set_turntablenum(::google::protobuf::int32 value) {
  set_has_turntablenum();
  turntablenum_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.turntablenum)
}

// optional int32 tengames = 55;
inline bool playerinfo::has_tengames() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void playerinfo::set_has_tengames() {
  _has_bits_[1] |= 0x00200000u;
}
inline void playerinfo::clear_has_tengames() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void playerinfo::clear_tengames() {
  tengames_ = 0;
  clear_has_tengames();
}
inline ::google::protobuf::int32 playerinfo::tengames() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.tengames)
  return tengames_;
}
inline void playerinfo::set_tengames(::google::protobuf::int32 value) {
  set_has_tengames();
  tengames_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.tengames)
}

// optional int32 todayshare = 56;
inline bool playerinfo::has_todayshare() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void playerinfo::set_has_todayshare() {
  _has_bits_[1] |= 0x00400000u;
}
inline void playerinfo::clear_has_todayshare() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void playerinfo::clear_todayshare() {
  todayshare_ = 0;
  clear_has_todayshare();
}
inline ::google::protobuf::int32 playerinfo::todayshare() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.todayshare)
  return todayshare_;
}
inline void playerinfo::set_todayshare(::google::protobuf::int32 value) {
  set_has_todayshare();
  todayshare_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.todayshare)
}

// optional int32 caninvite = 57;
inline bool playerinfo::has_caninvite() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void playerinfo::set_has_caninvite() {
  _has_bits_[1] |= 0x00800000u;
}
inline void playerinfo::clear_has_caninvite() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void playerinfo::clear_caninvite() {
  caninvite_ = 0;
  clear_has_caninvite();
}
inline ::google::protobuf::int32 playerinfo::caninvite() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.caninvite)
  return caninvite_;
}
inline void playerinfo::set_caninvite(::google::protobuf::int32 value) {
  set_has_caninvite();
  caninvite_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.caninvite)
}

// optional int32 totalgames = 58;
inline bool playerinfo::has_totalgames() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void playerinfo::set_has_totalgames() {
  _has_bits_[1] |= 0x01000000u;
}
inline void playerinfo::clear_has_totalgames() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void playerinfo::clear_totalgames() {
  totalgames_ = 0;
  clear_has_totalgames();
}
inline ::google::protobuf::int32 playerinfo::totalgames() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerinfo.totalgames)
  return totalgames_;
}
inline void playerinfo::set_totalgames(::google::protobuf::int32 value) {
  set_has_totalgames();
  totalgames_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerinfo.totalgames)
}

// -------------------------------------------------------------------

// playerstats

// optional int32 userid = 1;
inline bool playerstats::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void playerstats::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void playerstats::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void playerstats::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 playerstats::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerstats.userid)
  return userid_;
}
inline void playerstats::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerstats.userid)
}

// optional int32 mdynickamount = 2;
inline bool playerstats::has_mdynickamount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void playerstats::set_has_mdynickamount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void playerstats::clear_has_mdynickamount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void playerstats::clear_mdynickamount() {
  mdynickamount_ = 0;
  clear_has_mdynickamount();
}
inline ::google::protobuf::int32 playerstats::mdynickamount() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerstats.mdynickamount)
  return mdynickamount_;
}
inline void playerstats::set_mdynickamount(::google::protobuf::int32 value) {
  set_has_mdynickamount();
  mdynickamount_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerstats.mdynickamount)
}

// optional int32 loginday = 3;
inline bool playerstats::has_loginday() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void playerstats::set_has_loginday() {
  _has_bits_[0] |= 0x00000004u;
}
inline void playerstats::clear_has_loginday() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void playerstats::clear_loginday() {
  loginday_ = 0;
  clear_has_loginday();
}
inline ::google::protobuf::int32 playerstats::loginday() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerstats.loginday)
  return loginday_;
}
inline void playerstats::set_loginday(::google::protobuf::int32 value) {
  set_has_loginday();
  loginday_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerstats.loginday)
}

// optional int32 loginconday = 4;
inline bool playerstats::has_loginconday() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void playerstats::set_has_loginconday() {
  _has_bits_[0] |= 0x00000008u;
}
inline void playerstats::clear_has_loginconday() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void playerstats::clear_loginconday() {
  loginconday_ = 0;
  clear_has_loginconday();
}
inline ::google::protobuf::int32 playerstats::loginconday() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerstats.loginconday)
  return loginconday_;
}
inline void playerstats::set_loginconday(::google::protobuf::int32 value) {
  set_has_loginconday();
  loginconday_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerstats.loginconday)
}

// optional int32 maxloginconday = 5;
inline bool playerstats::has_maxloginconday() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void playerstats::set_has_maxloginconday() {
  _has_bits_[0] |= 0x00000010u;
}
inline void playerstats::clear_has_maxloginconday() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void playerstats::clear_maxloginconday() {
  maxloginconday_ = 0;
  clear_has_maxloginconday();
}
inline ::google::protobuf::int32 playerstats::maxloginconday() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerstats.maxloginconday)
  return maxloginconday_;
}
inline void playerstats::set_maxloginconday(::google::protobuf::int32 value) {
  set_has_maxloginconday();
  maxloginconday_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerstats.maxloginconday)
}

// optional int32 loginamount = 6;
inline bool playerstats::has_loginamount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void playerstats::set_has_loginamount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void playerstats::clear_has_loginamount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void playerstats::clear_loginamount() {
  loginamount_ = 0;
  clear_has_loginamount();
}
inline ::google::protobuf::int32 playerstats::loginamount() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerstats.loginamount)
  return loginamount_;
}
inline void playerstats::set_loginamount(::google::protobuf::int32 value) {
  set_has_loginamount();
  loginamount_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerstats.loginamount)
}

// optional int32 onlinetime = 7;
inline bool playerstats::has_onlinetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void playerstats::set_has_onlinetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void playerstats::clear_has_onlinetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void playerstats::clear_onlinetime() {
  onlinetime_ = 0;
  clear_has_onlinetime();
}
inline ::google::protobuf::int32 playerstats::onlinetime() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerstats.onlinetime)
  return onlinetime_;
}
inline void playerstats::set_onlinetime(::google::protobuf::int32 value) {
  set_has_onlinetime();
  onlinetime_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerstats.onlinetime)
}

// optional int32 maxjetton = 8;
inline bool playerstats::has_maxjetton() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void playerstats::set_has_maxjetton() {
  _has_bits_[0] |= 0x00000080u;
}
inline void playerstats::clear_has_maxjetton() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void playerstats::clear_maxjetton() {
  maxjetton_ = 0;
  clear_has_maxjetton();
}
inline ::google::protobuf::int32 playerstats::maxjetton() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerstats.maxjetton)
  return maxjetton_;
}
inline void playerstats::set_maxjetton(::google::protobuf::int32 value) {
  set_has_maxjetton();
  maxjetton_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerstats.maxjetton)
}

// optional int32 payrmb = 9;
inline bool playerstats::has_payrmb() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void playerstats::set_has_payrmb() {
  _has_bits_[0] |= 0x00000100u;
}
inline void playerstats::clear_has_payrmb() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void playerstats::clear_payrmb() {
  payrmb_ = 0;
  clear_has_payrmb();
}
inline ::google::protobuf::int32 playerstats::payrmb() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerstats.payrmb)
  return payrmb_;
}
inline void playerstats::set_payrmb(::google::protobuf::int32 value) {
  set_has_payrmb();
  payrmb_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerstats.payrmb)
}

// optional int32 callpayrmb = 10;
inline bool playerstats::has_callpayrmb() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void playerstats::set_has_callpayrmb() {
  _has_bits_[0] |= 0x00000200u;
}
inline void playerstats::clear_has_callpayrmb() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void playerstats::clear_callpayrmb() {
  callpayrmb_ = 0;
  clear_has_callpayrmb();
}
inline ::google::protobuf::int32 playerstats::callpayrmb() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerstats.callpayrmb)
  return callpayrmb_;
}
inline void playerstats::set_callpayrmb(::google::protobuf::int32 value) {
  set_has_callpayrmb();
  callpayrmb_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerstats.callpayrmb)
}

// optional int32 paytime = 11;
inline bool playerstats::has_paytime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void playerstats::set_has_paytime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void playerstats::clear_has_paytime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void playerstats::clear_paytime() {
  paytime_ = 0;
  clear_has_paytime();
}
inline ::google::protobuf::int32 playerstats::paytime() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerstats.paytime)
  return paytime_;
}
inline void playerstats::set_paytime(::google::protobuf::int32 value) {
  set_has_paytime();
  paytime_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerstats.paytime)
}

// optional int32 callpaytime = 12;
inline bool playerstats::has_callpaytime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void playerstats::set_has_callpaytime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void playerstats::clear_has_callpaytime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void playerstats::clear_callpaytime() {
  callpaytime_ = 0;
  clear_has_callpaytime();
}
inline ::google::protobuf::int32 playerstats::callpaytime() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerstats.callpaytime)
  return callpaytime_;
}
inline void playerstats::set_callpaytime(::google::protobuf::int32 value) {
  set_has_callpaytime();
  callpaytime_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerstats.callpaytime)
}

// optional int32 maxmoney = 13;
inline bool playerstats::has_maxmoney() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void playerstats::set_has_maxmoney() {
  _has_bits_[0] |= 0x00001000u;
}
inline void playerstats::clear_has_maxmoney() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void playerstats::clear_maxmoney() {
  maxmoney_ = 0;
  clear_has_maxmoney();
}
inline ::google::protobuf::int32 playerstats::maxmoney() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerstats.maxmoney)
  return maxmoney_;
}
inline void playerstats::set_maxmoney(::google::protobuf::int32 value) {
  set_has_maxmoney();
  maxmoney_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerstats.maxmoney)
}

// optional int32 dayrmb = 14;
inline bool playerstats::has_dayrmb() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void playerstats::set_has_dayrmb() {
  _has_bits_[0] |= 0x00002000u;
}
inline void playerstats::clear_has_dayrmb() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void playerstats::clear_dayrmb() {
  dayrmb_ = 0;
  clear_has_dayrmb();
}
inline ::google::protobuf::int32 playerstats::dayrmb() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerstats.dayrmb)
  return dayrmb_;
}
inline void playerstats::set_dayrmb(::google::protobuf::int32 value) {
  set_has_dayrmb();
  dayrmb_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerstats.dayrmb)
}

// optional int32 daypaytime = 15;
inline bool playerstats::has_daypaytime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void playerstats::set_has_daypaytime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void playerstats::clear_has_daypaytime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void playerstats::clear_daypaytime() {
  daypaytime_ = 0;
  clear_has_daypaytime();
}
inline ::google::protobuf::int32 playerstats::daypaytime() const {
  // @@protoc_insertion_point(field_get:NFMsg.playerstats.daypaytime)
  return daypaytime_;
}
inline void playerstats::set_daypaytime(::google::protobuf::int32 value) {
  set_has_daypaytime();
  daypaytime_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playerstats.daypaytime)
}

// -------------------------------------------------------------------

// goodsinfo

// optional int32 itemid = 1;
inline bool goodsinfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void goodsinfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void goodsinfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void goodsinfo::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 goodsinfo::itemid() const {
  // @@protoc_insertion_point(field_get:NFMsg.goodsinfo.itemid)
  return itemid_;
}
inline void goodsinfo::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.goodsinfo.itemid)
}

// optional int32 userid = 2;
inline bool goodsinfo::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void goodsinfo::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void goodsinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void goodsinfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 goodsinfo::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.goodsinfo.userid)
  return userid_;
}
inline void goodsinfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.goodsinfo.userid)
}

// optional int32 goodsid = 3;
inline bool goodsinfo::has_goodsid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void goodsinfo::set_has_goodsid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void goodsinfo::clear_has_goodsid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void goodsinfo::clear_goodsid() {
  goodsid_ = 0;
  clear_has_goodsid();
}
inline ::google::protobuf::int32 goodsinfo::goodsid() const {
  // @@protoc_insertion_point(field_get:NFMsg.goodsinfo.goodsid)
  return goodsid_;
}
inline void goodsinfo::set_goodsid(::google::protobuf::int32 value) {
  set_has_goodsid();
  goodsid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.goodsinfo.goodsid)
}

// optional int32 amount = 4;
inline bool goodsinfo::has_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void goodsinfo::set_has_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void goodsinfo::clear_has_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void goodsinfo::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline ::google::protobuf::int32 goodsinfo::amount() const {
  // @@protoc_insertion_point(field_get:NFMsg.goodsinfo.amount)
  return amount_;
}
inline void goodsinfo::set_amount(::google::protobuf::int32 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.goodsinfo.amount)
}

// optional int32 validity = 5;
inline bool goodsinfo::has_validity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void goodsinfo::set_has_validity() {
  _has_bits_[0] |= 0x00000020u;
}
inline void goodsinfo::clear_has_validity() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void goodsinfo::clear_validity() {
  validity_ = 0;
  clear_has_validity();
}
inline ::google::protobuf::int32 goodsinfo::validity() const {
  // @@protoc_insertion_point(field_get:NFMsg.goodsinfo.validity)
  return validity_;
}
inline void goodsinfo::set_validity(::google::protobuf::int32 value) {
  set_has_validity();
  validity_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.goodsinfo.validity)
}

// optional string createdate = 6;
inline bool goodsinfo::has_createdate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void goodsinfo::set_has_createdate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void goodsinfo::clear_has_createdate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void goodsinfo::clear_createdate() {
  createdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_createdate();
}
inline const ::std::string& goodsinfo::createdate() const {
  // @@protoc_insertion_point(field_get:NFMsg.goodsinfo.createdate)
  return createdate_.GetNoArena();
}
inline void goodsinfo::set_createdate(const ::std::string& value) {
  set_has_createdate();
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.goodsinfo.createdate)
}
#if LANG_CXX11
inline void goodsinfo::set_createdate(::std::string&& value) {
  set_has_createdate();
  createdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.goodsinfo.createdate)
}
#endif
inline void goodsinfo::set_createdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_createdate();
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.goodsinfo.createdate)
}
inline void goodsinfo::set_createdate(const char* value, size_t size) {
  set_has_createdate();
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.goodsinfo.createdate)
}
inline ::std::string* goodsinfo::mutable_createdate() {
  set_has_createdate();
  // @@protoc_insertion_point(field_mutable:NFMsg.goodsinfo.createdate)
  return createdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* goodsinfo::release_createdate() {
  // @@protoc_insertion_point(field_release:NFMsg.goodsinfo.createdate)
  if (!has_createdate()) {
    return NULL;
  }
  clear_has_createdate();
  return createdate_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void goodsinfo::set_allocated_createdate(::std::string* createdate) {
  if (createdate != NULL) {
    set_has_createdate();
  } else {
    clear_has_createdate();
  }
  createdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createdate);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.goodsinfo.createdate)
}

// optional int32 iswear = 7;
inline bool goodsinfo::has_iswear() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void goodsinfo::set_has_iswear() {
  _has_bits_[0] |= 0x00000040u;
}
inline void goodsinfo::clear_has_iswear() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void goodsinfo::clear_iswear() {
  iswear_ = 0;
  clear_has_iswear();
}
inline ::google::protobuf::int32 goodsinfo::iswear() const {
  // @@protoc_insertion_point(field_get:NFMsg.goodsinfo.iswear)
  return iswear_;
}
inline void goodsinfo::set_iswear(::google::protobuf::int32 value) {
  set_has_iswear();
  iswear_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.goodsinfo.iswear)
}

// -------------------------------------------------------------------

// goodslist

// repeated .NFMsg.goodsinfo glist = 1;
inline int goodslist::glist_size() const {
  return glist_.size();
}
inline void goodslist::clear_glist() {
  glist_.Clear();
}
inline ::NFMsg::goodsinfo* goodslist::mutable_glist(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.goodslist.glist)
  return glist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::goodsinfo >*
goodslist::mutable_glist() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.goodslist.glist)
  return &glist_;
}
inline const ::NFMsg::goodsinfo& goodslist::glist(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.goodslist.glist)
  return glist_.Get(index);
}
inline ::NFMsg::goodsinfo* goodslist::add_glist() {
  // @@protoc_insertion_point(field_add:NFMsg.goodslist.glist)
  return glist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::goodsinfo >&
goodslist::glist() const {
  // @@protoc_insertion_point(field_list:NFMsg.goodslist.glist)
  return glist_;
}

// -------------------------------------------------------------------

// noticeinfo

// optional int32 noticetype = 1;
inline bool noticeinfo::has_noticetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void noticeinfo::set_has_noticetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void noticeinfo::clear_has_noticetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void noticeinfo::clear_noticetype() {
  noticetype_ = 0;
  clear_has_noticetype();
}
inline ::google::protobuf::int32 noticeinfo::noticetype() const {
  // @@protoc_insertion_point(field_get:NFMsg.noticeinfo.noticetype)
  return noticetype_;
}
inline void noticeinfo::set_noticetype(::google::protobuf::int32 value) {
  set_has_noticetype();
  noticetype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.noticeinfo.noticetype)
}

// optional int32 amount = 2;
inline bool noticeinfo::has_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void noticeinfo::set_has_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void noticeinfo::clear_has_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void noticeinfo::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline ::google::protobuf::int32 noticeinfo::amount() const {
  // @@protoc_insertion_point(field_get:NFMsg.noticeinfo.amount)
  return amount_;
}
inline void noticeinfo::set_amount(::google::protobuf::int32 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.noticeinfo.amount)
}

// -------------------------------------------------------------------

// playersimpleinfo

// optional int32 userid = 1;
inline bool playersimpleinfo::has_userid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void playersimpleinfo::set_has_userid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void playersimpleinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void playersimpleinfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 playersimpleinfo::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.playersimpleinfo.userid)
  return userid_;
}
inline void playersimpleinfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playersimpleinfo.userid)
}

// optional string nickname = 5;
inline bool playersimpleinfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void playersimpleinfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void playersimpleinfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void playersimpleinfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& playersimpleinfo::nickname() const {
  // @@protoc_insertion_point(field_get:NFMsg.playersimpleinfo.nickname)
  return nickname_.GetNoArena();
}
inline void playersimpleinfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playersimpleinfo.nickname)
}
#if LANG_CXX11
inline void playersimpleinfo::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playersimpleinfo.nickname)
}
#endif
inline void playersimpleinfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playersimpleinfo.nickname)
}
inline void playersimpleinfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playersimpleinfo.nickname)
}
inline ::std::string* playersimpleinfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:NFMsg.playersimpleinfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playersimpleinfo::release_nickname() {
  // @@protoc_insertion_point(field_release:NFMsg.playersimpleinfo.nickname)
  if (!has_nickname()) {
    return NULL;
  }
  clear_has_nickname();
  return nickname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playersimpleinfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playersimpleinfo.nickname)
}

// optional int32 sex = 8;
inline bool playersimpleinfo::has_sex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void playersimpleinfo::set_has_sex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void playersimpleinfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void playersimpleinfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 playersimpleinfo::sex() const {
  // @@protoc_insertion_point(field_get:NFMsg.playersimpleinfo.sex)
  return sex_;
}
inline void playersimpleinfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playersimpleinfo.sex)
}

// optional int32 level = 13;
inline bool playersimpleinfo::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void playersimpleinfo::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void playersimpleinfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void playersimpleinfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 playersimpleinfo::level() const {
  // @@protoc_insertion_point(field_get:NFMsg.playersimpleinfo.level)
  return level_;
}
inline void playersimpleinfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playersimpleinfo.level)
}

// optional int32 viplevel = 14;
inline bool playersimpleinfo::has_viplevel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void playersimpleinfo::set_has_viplevel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void playersimpleinfo::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void playersimpleinfo::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 playersimpleinfo::viplevel() const {
  // @@protoc_insertion_point(field_get:NFMsg.playersimpleinfo.viplevel)
  return viplevel_;
}
inline void playersimpleinfo::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playersimpleinfo.viplevel)
}

// optional int64 jetton = 15;
inline bool playersimpleinfo::has_jetton() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void playersimpleinfo::set_has_jetton() {
  _has_bits_[0] |= 0x00000400u;
}
inline void playersimpleinfo::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void playersimpleinfo::clear_jetton() {
  jetton_ = GOOGLE_LONGLONG(0);
  clear_has_jetton();
}
inline ::google::protobuf::int64 playersimpleinfo::jetton() const {
  // @@protoc_insertion_point(field_get:NFMsg.playersimpleinfo.jetton)
  return jetton_;
}
inline void playersimpleinfo::set_jetton(::google::protobuf::int64 value) {
  set_has_jetton();
  jetton_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playersimpleinfo.jetton)
}

// optional int32 gold = 16;
inline bool playersimpleinfo::has_gold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void playersimpleinfo::set_has_gold() {
  _has_bits_[0] |= 0x00000800u;
}
inline void playersimpleinfo::clear_has_gold() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void playersimpleinfo::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 playersimpleinfo::gold() const {
  // @@protoc_insertion_point(field_get:NFMsg.playersimpleinfo.gold)
  return gold_;
}
inline void playersimpleinfo::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playersimpleinfo.gold)
}

// optional int32 popularity = 21;
inline bool playersimpleinfo::has_popularity() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void playersimpleinfo::set_has_popularity() {
  _has_bits_[0] |= 0x00001000u;
}
inline void playersimpleinfo::clear_has_popularity() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void playersimpleinfo::clear_popularity() {
  popularity_ = 0;
  clear_has_popularity();
}
inline ::google::protobuf::int32 playersimpleinfo::popularity() const {
  // @@protoc_insertion_point(field_get:NFMsg.playersimpleinfo.popularity)
  return popularity_;
}
inline void playersimpleinfo::set_popularity(::google::protobuf::int32 value) {
  set_has_popularity();
  popularity_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playersimpleinfo.popularity)
}

// optional string ip = 31;
inline bool playersimpleinfo::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void playersimpleinfo::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void playersimpleinfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void playersimpleinfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& playersimpleinfo::ip() const {
  // @@protoc_insertion_point(field_get:NFMsg.playersimpleinfo.ip)
  return ip_.GetNoArena();
}
inline void playersimpleinfo::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playersimpleinfo.ip)
}
#if LANG_CXX11
inline void playersimpleinfo::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playersimpleinfo.ip)
}
#endif
inline void playersimpleinfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playersimpleinfo.ip)
}
inline void playersimpleinfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playersimpleinfo.ip)
}
inline ::std::string* playersimpleinfo::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:NFMsg.playersimpleinfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playersimpleinfo::release_ip() {
  // @@protoc_insertion_point(field_release:NFMsg.playersimpleinfo.ip)
  if (!has_ip()) {
    return NULL;
  }
  clear_has_ip();
  return ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playersimpleinfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playersimpleinfo.ip)
}

// optional string face_1 = 34;
inline bool playersimpleinfo::has_face_1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void playersimpleinfo::set_has_face_1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void playersimpleinfo::clear_has_face_1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void playersimpleinfo::clear_face_1() {
  face_1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_face_1();
}
inline const ::std::string& playersimpleinfo::face_1() const {
  // @@protoc_insertion_point(field_get:NFMsg.playersimpleinfo.face_1)
  return face_1_.GetNoArena();
}
inline void playersimpleinfo::set_face_1(const ::std::string& value) {
  set_has_face_1();
  face_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playersimpleinfo.face_1)
}
#if LANG_CXX11
inline void playersimpleinfo::set_face_1(::std::string&& value) {
  set_has_face_1();
  face_1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playersimpleinfo.face_1)
}
#endif
inline void playersimpleinfo::set_face_1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_face_1();
  face_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playersimpleinfo.face_1)
}
inline void playersimpleinfo::set_face_1(const char* value, size_t size) {
  set_has_face_1();
  face_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playersimpleinfo.face_1)
}
inline ::std::string* playersimpleinfo::mutable_face_1() {
  set_has_face_1();
  // @@protoc_insertion_point(field_mutable:NFMsg.playersimpleinfo.face_1)
  return face_1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playersimpleinfo::release_face_1() {
  // @@protoc_insertion_point(field_release:NFMsg.playersimpleinfo.face_1)
  if (!has_face_1()) {
    return NULL;
  }
  clear_has_face_1();
  return face_1_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playersimpleinfo::set_allocated_face_1(::std::string* face_1) {
  if (face_1 != NULL) {
    set_has_face_1();
  } else {
    clear_has_face_1();
  }
  face_1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), face_1);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playersimpleinfo.face_1)
}

// optional string location = 41;
inline bool playersimpleinfo::has_location() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void playersimpleinfo::set_has_location() {
  _has_bits_[0] |= 0x00000008u;
}
inline void playersimpleinfo::clear_has_location() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void playersimpleinfo::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_location();
}
inline const ::std::string& playersimpleinfo::location() const {
  // @@protoc_insertion_point(field_get:NFMsg.playersimpleinfo.location)
  return location_.GetNoArena();
}
inline void playersimpleinfo::set_location(const ::std::string& value) {
  set_has_location();
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playersimpleinfo.location)
}
#if LANG_CXX11
inline void playersimpleinfo::set_location(::std::string&& value) {
  set_has_location();
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playersimpleinfo.location)
}
#endif
inline void playersimpleinfo::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_location();
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playersimpleinfo.location)
}
inline void playersimpleinfo::set_location(const char* value, size_t size) {
  set_has_location();
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playersimpleinfo.location)
}
inline ::std::string* playersimpleinfo::mutable_location() {
  set_has_location();
  // @@protoc_insertion_point(field_mutable:NFMsg.playersimpleinfo.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playersimpleinfo::release_location() {
  // @@protoc_insertion_point(field_release:NFMsg.playersimpleinfo.location)
  if (!has_location()) {
    return NULL;
  }
  clear_has_location();
  return location_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playersimpleinfo::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    set_has_location();
  } else {
    clear_has_location();
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playersimpleinfo.location)
}

// optional int32 propertyid = 45;
inline bool playersimpleinfo::has_propertyid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void playersimpleinfo::set_has_propertyid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void playersimpleinfo::clear_has_propertyid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void playersimpleinfo::clear_propertyid() {
  propertyid_ = 0;
  clear_has_propertyid();
}
inline ::google::protobuf::int32 playersimpleinfo::propertyid() const {
  // @@protoc_insertion_point(field_get:NFMsg.playersimpleinfo.propertyid)
  return propertyid_;
}
inline void playersimpleinfo::set_propertyid(::google::protobuf::int32 value) {
  set_has_propertyid();
  propertyid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playersimpleinfo.propertyid)
}

// optional int32 jifen = 99;
inline bool playersimpleinfo::has_jifen() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void playersimpleinfo::set_has_jifen() {
  _has_bits_[0] |= 0x00004000u;
}
inline void playersimpleinfo::clear_has_jifen() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void playersimpleinfo::clear_jifen() {
  jifen_ = 0;
  clear_has_jifen();
}
inline ::google::protobuf::int32 playersimpleinfo::jifen() const {
  // @@protoc_insertion_point(field_get:NFMsg.playersimpleinfo.jifen)
  return jifen_;
}
inline void playersimpleinfo::set_jifen(::google::protobuf::int32 value) {
  set_has_jifen();
  jifen_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.playersimpleinfo.jifen)
}

// optional string location_x = 47;
inline bool playersimpleinfo::has_location_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void playersimpleinfo::set_has_location_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void playersimpleinfo::clear_has_location_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void playersimpleinfo::clear_location_x() {
  location_x_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_location_x();
}
inline const ::std::string& playersimpleinfo::location_x() const {
  // @@protoc_insertion_point(field_get:NFMsg.playersimpleinfo.location_x)
  return location_x_.GetNoArena();
}
inline void playersimpleinfo::set_location_x(const ::std::string& value) {
  set_has_location_x();
  location_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playersimpleinfo.location_x)
}
#if LANG_CXX11
inline void playersimpleinfo::set_location_x(::std::string&& value) {
  set_has_location_x();
  location_x_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playersimpleinfo.location_x)
}
#endif
inline void playersimpleinfo::set_location_x(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_location_x();
  location_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playersimpleinfo.location_x)
}
inline void playersimpleinfo::set_location_x(const char* value, size_t size) {
  set_has_location_x();
  location_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playersimpleinfo.location_x)
}
inline ::std::string* playersimpleinfo::mutable_location_x() {
  set_has_location_x();
  // @@protoc_insertion_point(field_mutable:NFMsg.playersimpleinfo.location_x)
  return location_x_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playersimpleinfo::release_location_x() {
  // @@protoc_insertion_point(field_release:NFMsg.playersimpleinfo.location_x)
  if (!has_location_x()) {
    return NULL;
  }
  clear_has_location_x();
  return location_x_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playersimpleinfo::set_allocated_location_x(::std::string* location_x) {
  if (location_x != NULL) {
    set_has_location_x();
  } else {
    clear_has_location_x();
  }
  location_x_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location_x);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playersimpleinfo.location_x)
}

// optional string location_y = 48;
inline bool playersimpleinfo::has_location_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void playersimpleinfo::set_has_location_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void playersimpleinfo::clear_has_location_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void playersimpleinfo::clear_location_y() {
  location_y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_location_y();
}
inline const ::std::string& playersimpleinfo::location_y() const {
  // @@protoc_insertion_point(field_get:NFMsg.playersimpleinfo.location_y)
  return location_y_.GetNoArena();
}
inline void playersimpleinfo::set_location_y(const ::std::string& value) {
  set_has_location_y();
  location_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.playersimpleinfo.location_y)
}
#if LANG_CXX11
inline void playersimpleinfo::set_location_y(::std::string&& value) {
  set_has_location_y();
  location_y_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.playersimpleinfo.location_y)
}
#endif
inline void playersimpleinfo::set_location_y(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_location_y();
  location_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.playersimpleinfo.location_y)
}
inline void playersimpleinfo::set_location_y(const char* value, size_t size) {
  set_has_location_y();
  location_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.playersimpleinfo.location_y)
}
inline ::std::string* playersimpleinfo::mutable_location_y() {
  set_has_location_y();
  // @@protoc_insertion_point(field_mutable:NFMsg.playersimpleinfo.location_y)
  return location_y_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* playersimpleinfo::release_location_y() {
  // @@protoc_insertion_point(field_release:NFMsg.playersimpleinfo.location_y)
  if (!has_location_y()) {
    return NULL;
  }
  clear_has_location_y();
  return location_y_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void playersimpleinfo::set_allocated_location_y(::std::string* location_y) {
  if (location_y != NULL) {
    set_has_location_y();
  } else {
    clear_has_location_y();
  }
  location_y_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location_y);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.playersimpleinfo.location_y)
}

// -------------------------------------------------------------------

// broadcastinfo

// optional int32 id = 1;
inline bool broadcastinfo::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void broadcastinfo::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void broadcastinfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void broadcastinfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 broadcastinfo::id() const {
  // @@protoc_insertion_point(field_get:NFMsg.broadcastinfo.id)
  return id_;
}
inline void broadcastinfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.broadcastinfo.id)
}

// optional int32 broadtype = 2;
inline bool broadcastinfo::has_broadtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void broadcastinfo::set_has_broadtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void broadcastinfo::clear_has_broadtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void broadcastinfo::clear_broadtype() {
  broadtype_ = 0;
  clear_has_broadtype();
}
inline ::google::protobuf::int32 broadcastinfo::broadtype() const {
  // @@protoc_insertion_point(field_get:NFMsg.broadcastinfo.broadtype)
  return broadtype_;
}
inline void broadcastinfo::set_broadtype(::google::protobuf::int32 value) {
  set_has_broadtype();
  broadtype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.broadcastinfo.broadtype)
}

// optional int32 senderid = 3;
inline bool broadcastinfo::has_senderid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void broadcastinfo::set_has_senderid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void broadcastinfo::clear_has_senderid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void broadcastinfo::clear_senderid() {
  senderid_ = 0;
  clear_has_senderid();
}
inline ::google::protobuf::int32 broadcastinfo::senderid() const {
  // @@protoc_insertion_point(field_get:NFMsg.broadcastinfo.senderid)
  return senderid_;
}
inline void broadcastinfo::set_senderid(::google::protobuf::int32 value) {
  set_has_senderid();
  senderid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.broadcastinfo.senderid)
}

// optional string sender = 4;
inline bool broadcastinfo::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void broadcastinfo::set_has_sender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void broadcastinfo::clear_has_sender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void broadcastinfo::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender();
}
inline const ::std::string& broadcastinfo::sender() const {
  // @@protoc_insertion_point(field_get:NFMsg.broadcastinfo.sender)
  return sender_.GetNoArena();
}
inline void broadcastinfo::set_sender(const ::std::string& value) {
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.broadcastinfo.sender)
}
#if LANG_CXX11
inline void broadcastinfo::set_sender(::std::string&& value) {
  set_has_sender();
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.broadcastinfo.sender)
}
#endif
inline void broadcastinfo::set_sender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.broadcastinfo.sender)
}
inline void broadcastinfo::set_sender(const char* value, size_t size) {
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.broadcastinfo.sender)
}
inline ::std::string* broadcastinfo::mutable_sender() {
  set_has_sender();
  // @@protoc_insertion_point(field_mutable:NFMsg.broadcastinfo.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* broadcastinfo::release_sender() {
  // @@protoc_insertion_point(field_release:NFMsg.broadcastinfo.sender)
  if (!has_sender()) {
    return NULL;
  }
  clear_has_sender();
  return sender_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void broadcastinfo::set_allocated_sender(::std::string* sender) {
  if (sender != NULL) {
    set_has_sender();
  } else {
    clear_has_sender();
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.broadcastinfo.sender)
}

// optional string msg = 5;
inline bool broadcastinfo::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void broadcastinfo::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void broadcastinfo::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void broadcastinfo::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& broadcastinfo::msg() const {
  // @@protoc_insertion_point(field_get:NFMsg.broadcastinfo.msg)
  return msg_.GetNoArena();
}
inline void broadcastinfo::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.broadcastinfo.msg)
}
#if LANG_CXX11
inline void broadcastinfo::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.broadcastinfo.msg)
}
#endif
inline void broadcastinfo::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.broadcastinfo.msg)
}
inline void broadcastinfo::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.broadcastinfo.msg)
}
inline ::std::string* broadcastinfo::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:NFMsg.broadcastinfo.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* broadcastinfo::release_msg() {
  // @@protoc_insertion_point(field_release:NFMsg.broadcastinfo.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void broadcastinfo::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.broadcastinfo.msg)
}

// optional int32 broadtimes = 6;
inline bool broadcastinfo::has_broadtimes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void broadcastinfo::set_has_broadtimes() {
  _has_bits_[0] |= 0x00000040u;
}
inline void broadcastinfo::clear_has_broadtimes() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void broadcastinfo::clear_broadtimes() {
  broadtimes_ = 0;
  clear_has_broadtimes();
}
inline ::google::protobuf::int32 broadcastinfo::broadtimes() const {
  // @@protoc_insertion_point(field_get:NFMsg.broadcastinfo.broadtimes)
  return broadtimes_;
}
inline void broadcastinfo::set_broadtimes(::google::protobuf::int32 value) {
  set_has_broadtimes();
  broadtimes_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.broadcastinfo.broadtimes)
}

// optional int32 validday = 7;
inline bool broadcastinfo::has_validday() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void broadcastinfo::set_has_validday() {
  _has_bits_[0] |= 0x00000080u;
}
inline void broadcastinfo::clear_has_validday() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void broadcastinfo::clear_validday() {
  validday_ = 0;
  clear_has_validday();
}
inline ::google::protobuf::int32 broadcastinfo::validday() const {
  // @@protoc_insertion_point(field_get:NFMsg.broadcastinfo.validday)
  return validday_;
}
inline void broadcastinfo::set_validday(::google::protobuf::int32 value) {
  set_has_validday();
  validday_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.broadcastinfo.validday)
}

// optional string createtime = 8;
inline bool broadcastinfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void broadcastinfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void broadcastinfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void broadcastinfo::clear_createtime() {
  createtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_createtime();
}
inline const ::std::string& broadcastinfo::createtime() const {
  // @@protoc_insertion_point(field_get:NFMsg.broadcastinfo.createtime)
  return createtime_.GetNoArena();
}
inline void broadcastinfo::set_createtime(const ::std::string& value) {
  set_has_createtime();
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.broadcastinfo.createtime)
}
#if LANG_CXX11
inline void broadcastinfo::set_createtime(::std::string&& value) {
  set_has_createtime();
  createtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.broadcastinfo.createtime)
}
#endif
inline void broadcastinfo::set_createtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_createtime();
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.broadcastinfo.createtime)
}
inline void broadcastinfo::set_createtime(const char* value, size_t size) {
  set_has_createtime();
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.broadcastinfo.createtime)
}
inline ::std::string* broadcastinfo::mutable_createtime() {
  set_has_createtime();
  // @@protoc_insertion_point(field_mutable:NFMsg.broadcastinfo.createtime)
  return createtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* broadcastinfo::release_createtime() {
  // @@protoc_insertion_point(field_release:NFMsg.broadcastinfo.createtime)
  if (!has_createtime()) {
    return NULL;
  }
  clear_has_createtime();
  return createtime_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void broadcastinfo::set_allocated_createtime(::std::string* createtime) {
  if (createtime != NULL) {
    set_has_createtime();
  } else {
    clear_has_createtime();
  }
  createtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createtime);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.broadcastinfo.createtime)
}

// optional int32 cycletype = 9;
inline bool broadcastinfo::has_cycletype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void broadcastinfo::set_has_cycletype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void broadcastinfo::clear_has_cycletype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void broadcastinfo::clear_cycletype() {
  cycletype_ = 0;
  clear_has_cycletype();
}
inline ::google::protobuf::int32 broadcastinfo::cycletype() const {
  // @@protoc_insertion_point(field_get:NFMsg.broadcastinfo.cycletype)
  return cycletype_;
}
inline void broadcastinfo::set_cycletype(::google::protobuf::int32 value) {
  set_has_cycletype();
  cycletype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.broadcastinfo.cycletype)
}

// -------------------------------------------------------------------

// mailinfo

// optional int32 mailid = 1;
inline bool mailinfo::has_mailid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void mailinfo::set_has_mailid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void mailinfo::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void mailinfo::clear_mailid() {
  mailid_ = 0;
  clear_has_mailid();
}
inline ::google::protobuf::int32 mailinfo::mailid() const {
  // @@protoc_insertion_point(field_get:NFMsg.mailinfo.mailid)
  return mailid_;
}
inline void mailinfo::set_mailid(::google::protobuf::int32 value) {
  set_has_mailid();
  mailid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.mailinfo.mailid)
}

// optional int32 senderid = 2;
inline bool mailinfo::has_senderid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void mailinfo::set_has_senderid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void mailinfo::clear_has_senderid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void mailinfo::clear_senderid() {
  senderid_ = 0;
  clear_has_senderid();
}
inline ::google::protobuf::int32 mailinfo::senderid() const {
  // @@protoc_insertion_point(field_get:NFMsg.mailinfo.senderid)
  return senderid_;
}
inline void mailinfo::set_senderid(::google::protobuf::int32 value) {
  set_has_senderid();
  senderid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.mailinfo.senderid)
}

// optional string sender = 3;
inline bool mailinfo::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mailinfo::set_has_sender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mailinfo::clear_has_sender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mailinfo::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender();
}
inline const ::std::string& mailinfo::sender() const {
  // @@protoc_insertion_point(field_get:NFMsg.mailinfo.sender)
  return sender_.GetNoArena();
}
inline void mailinfo::set_sender(const ::std::string& value) {
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.mailinfo.sender)
}
#if LANG_CXX11
inline void mailinfo::set_sender(::std::string&& value) {
  set_has_sender();
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.mailinfo.sender)
}
#endif
inline void mailinfo::set_sender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.mailinfo.sender)
}
inline void mailinfo::set_sender(const char* value, size_t size) {
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.mailinfo.sender)
}
inline ::std::string* mailinfo::mutable_sender() {
  set_has_sender();
  // @@protoc_insertion_point(field_mutable:NFMsg.mailinfo.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mailinfo::release_sender() {
  // @@protoc_insertion_point(field_release:NFMsg.mailinfo.sender)
  if (!has_sender()) {
    return NULL;
  }
  clear_has_sender();
  return sender_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mailinfo::set_allocated_sender(::std::string* sender) {
  if (sender != NULL) {
    set_has_sender();
  } else {
    clear_has_sender();
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.mailinfo.sender)
}

// optional int32 receiverid = 4;
inline bool mailinfo::has_receiverid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void mailinfo::set_has_receiverid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void mailinfo::clear_has_receiverid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void mailinfo::clear_receiverid() {
  receiverid_ = 0;
  clear_has_receiverid();
}
inline ::google::protobuf::int32 mailinfo::receiverid() const {
  // @@protoc_insertion_point(field_get:NFMsg.mailinfo.receiverid)
  return receiverid_;
}
inline void mailinfo::set_receiverid(::google::protobuf::int32 value) {
  set_has_receiverid();
  receiverid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.mailinfo.receiverid)
}

// optional string receiver = 5;
inline bool mailinfo::has_receiver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mailinfo::set_has_receiver() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mailinfo::clear_has_receiver() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mailinfo::clear_receiver() {
  receiver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_receiver();
}
inline const ::std::string& mailinfo::receiver() const {
  // @@protoc_insertion_point(field_get:NFMsg.mailinfo.receiver)
  return receiver_.GetNoArena();
}
inline void mailinfo::set_receiver(const ::std::string& value) {
  set_has_receiver();
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.mailinfo.receiver)
}
#if LANG_CXX11
inline void mailinfo::set_receiver(::std::string&& value) {
  set_has_receiver();
  receiver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.mailinfo.receiver)
}
#endif
inline void mailinfo::set_receiver(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_receiver();
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.mailinfo.receiver)
}
inline void mailinfo::set_receiver(const char* value, size_t size) {
  set_has_receiver();
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.mailinfo.receiver)
}
inline ::std::string* mailinfo::mutable_receiver() {
  set_has_receiver();
  // @@protoc_insertion_point(field_mutable:NFMsg.mailinfo.receiver)
  return receiver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mailinfo::release_receiver() {
  // @@protoc_insertion_point(field_release:NFMsg.mailinfo.receiver)
  if (!has_receiver()) {
    return NULL;
  }
  clear_has_receiver();
  return receiver_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mailinfo::set_allocated_receiver(::std::string* receiver) {
  if (receiver != NULL) {
    set_has_receiver();
  } else {
    clear_has_receiver();
  }
  receiver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receiver);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.mailinfo.receiver)
}

// optional int32 mailtype = 6;
inline bool mailinfo::has_mailtype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void mailinfo::set_has_mailtype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void mailinfo::clear_has_mailtype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void mailinfo::clear_mailtype() {
  mailtype_ = 0;
  clear_has_mailtype();
}
inline ::google::protobuf::int32 mailinfo::mailtype() const {
  // @@protoc_insertion_point(field_get:NFMsg.mailinfo.mailtype)
  return mailtype_;
}
inline void mailinfo::set_mailtype(::google::protobuf::int32 value) {
  set_has_mailtype();
  mailtype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.mailinfo.mailtype)
}

// optional string title = 7;
inline bool mailinfo::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mailinfo::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mailinfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mailinfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& mailinfo::title() const {
  // @@protoc_insertion_point(field_get:NFMsg.mailinfo.title)
  return title_.GetNoArena();
}
inline void mailinfo::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.mailinfo.title)
}
#if LANG_CXX11
inline void mailinfo::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.mailinfo.title)
}
#endif
inline void mailinfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.mailinfo.title)
}
inline void mailinfo::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.mailinfo.title)
}
inline ::std::string* mailinfo::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:NFMsg.mailinfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mailinfo::release_title() {
  // @@protoc_insertion_point(field_release:NFMsg.mailinfo.title)
  if (!has_title()) {
    return NULL;
  }
  clear_has_title();
  return title_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mailinfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.mailinfo.title)
}

// optional string content = 8;
inline bool mailinfo::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mailinfo::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mailinfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mailinfo::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& mailinfo::content() const {
  // @@protoc_insertion_point(field_get:NFMsg.mailinfo.content)
  return content_.GetNoArena();
}
inline void mailinfo::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.mailinfo.content)
}
#if LANG_CXX11
inline void mailinfo::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.mailinfo.content)
}
#endif
inline void mailinfo::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.mailinfo.content)
}
inline void mailinfo::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.mailinfo.content)
}
inline ::std::string* mailinfo::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:NFMsg.mailinfo.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mailinfo::release_content() {
  // @@protoc_insertion_point(field_release:NFMsg.mailinfo.content)
  if (!has_content()) {
    return NULL;
  }
  clear_has_content();
  return content_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mailinfo::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.mailinfo.content)
}

// optional string senddate = 9;
inline bool mailinfo::has_senddate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mailinfo::set_has_senddate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mailinfo::clear_has_senddate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mailinfo::clear_senddate() {
  senddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_senddate();
}
inline const ::std::string& mailinfo::senddate() const {
  // @@protoc_insertion_point(field_get:NFMsg.mailinfo.senddate)
  return senddate_.GetNoArena();
}
inline void mailinfo::set_senddate(const ::std::string& value) {
  set_has_senddate();
  senddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.mailinfo.senddate)
}
#if LANG_CXX11
inline void mailinfo::set_senddate(::std::string&& value) {
  set_has_senddate();
  senddate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.mailinfo.senddate)
}
#endif
inline void mailinfo::set_senddate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_senddate();
  senddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.mailinfo.senddate)
}
inline void mailinfo::set_senddate(const char* value, size_t size) {
  set_has_senddate();
  senddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.mailinfo.senddate)
}
inline ::std::string* mailinfo::mutable_senddate() {
  set_has_senddate();
  // @@protoc_insertion_point(field_mutable:NFMsg.mailinfo.senddate)
  return senddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mailinfo::release_senddate() {
  // @@protoc_insertion_point(field_release:NFMsg.mailinfo.senddate)
  if (!has_senddate()) {
    return NULL;
  }
  clear_has_senddate();
  return senddate_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mailinfo::set_allocated_senddate(::std::string* senddate) {
  if (senddate != NULL) {
    set_has_senddate();
  } else {
    clear_has_senddate();
  }
  senddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), senddate);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.mailinfo.senddate)
}

// optional string markdate = 10;
inline bool mailinfo::has_markdate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mailinfo::set_has_markdate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mailinfo::clear_has_markdate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mailinfo::clear_markdate() {
  markdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_markdate();
}
inline const ::std::string& mailinfo::markdate() const {
  // @@protoc_insertion_point(field_get:NFMsg.mailinfo.markdate)
  return markdate_.GetNoArena();
}
inline void mailinfo::set_markdate(const ::std::string& value) {
  set_has_markdate();
  markdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.mailinfo.markdate)
}
#if LANG_CXX11
inline void mailinfo::set_markdate(::std::string&& value) {
  set_has_markdate();
  markdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.mailinfo.markdate)
}
#endif
inline void mailinfo::set_markdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_markdate();
  markdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.mailinfo.markdate)
}
inline void mailinfo::set_markdate(const char* value, size_t size) {
  set_has_markdate();
  markdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.mailinfo.markdate)
}
inline ::std::string* mailinfo::mutable_markdate() {
  set_has_markdate();
  // @@protoc_insertion_point(field_mutable:NFMsg.mailinfo.markdate)
  return markdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mailinfo::release_markdate() {
  // @@protoc_insertion_point(field_release:NFMsg.mailinfo.markdate)
  if (!has_markdate()) {
    return NULL;
  }
  clear_has_markdate();
  return markdate_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mailinfo::set_allocated_markdate(::std::string* markdate) {
  if (markdate != NULL) {
    set_has_markdate();
  } else {
    clear_has_markdate();
  }
  markdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), markdate);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.mailinfo.markdate)
}

// optional int32 mailstate = 11;
inline bool mailinfo::has_mailstate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void mailinfo::set_has_mailstate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void mailinfo::clear_has_mailstate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void mailinfo::clear_mailstate() {
  mailstate_ = 0;
  clear_has_mailstate();
}
inline ::google::protobuf::int32 mailinfo::mailstate() const {
  // @@protoc_insertion_point(field_get:NFMsg.mailinfo.mailstate)
  return mailstate_;
}
inline void mailinfo::set_mailstate(::google::protobuf::int32 value) {
  set_has_mailstate();
  mailstate_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.mailinfo.mailstate)
}

// optional string externdata = 12;
inline bool mailinfo::has_externdata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mailinfo::set_has_externdata() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mailinfo::clear_has_externdata() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mailinfo::clear_externdata() {
  externdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_externdata();
}
inline const ::std::string& mailinfo::externdata() const {
  // @@protoc_insertion_point(field_get:NFMsg.mailinfo.externdata)
  return externdata_.GetNoArena();
}
inline void mailinfo::set_externdata(const ::std::string& value) {
  set_has_externdata();
  externdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.mailinfo.externdata)
}
#if LANG_CXX11
inline void mailinfo::set_externdata(::std::string&& value) {
  set_has_externdata();
  externdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.mailinfo.externdata)
}
#endif
inline void mailinfo::set_externdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_externdata();
  externdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.mailinfo.externdata)
}
inline void mailinfo::set_externdata(const char* value, size_t size) {
  set_has_externdata();
  externdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.mailinfo.externdata)
}
inline ::std::string* mailinfo::mutable_externdata() {
  set_has_externdata();
  // @@protoc_insertion_point(field_mutable:NFMsg.mailinfo.externdata)
  return externdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mailinfo::release_externdata() {
  // @@protoc_insertion_point(field_release:NFMsg.mailinfo.externdata)
  if (!has_externdata()) {
    return NULL;
  }
  clear_has_externdata();
  return externdata_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mailinfo::set_allocated_externdata(::std::string* externdata) {
  if (externdata != NULL) {
    set_has_externdata();
  } else {
    clear_has_externdata();
  }
  externdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), externdata);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.mailinfo.externdata)
}

// optional string remark = 13;
inline bool mailinfo::has_remark() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mailinfo::set_has_remark() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mailinfo::clear_has_remark() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mailinfo::clear_remark() {
  remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_remark();
}
inline const ::std::string& mailinfo::remark() const {
  // @@protoc_insertion_point(field_get:NFMsg.mailinfo.remark)
  return remark_.GetNoArena();
}
inline void mailinfo::set_remark(const ::std::string& value) {
  set_has_remark();
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.mailinfo.remark)
}
#if LANG_CXX11
inline void mailinfo::set_remark(::std::string&& value) {
  set_has_remark();
  remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.mailinfo.remark)
}
#endif
inline void mailinfo::set_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_remark();
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.mailinfo.remark)
}
inline void mailinfo::set_remark(const char* value, size_t size) {
  set_has_remark();
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.mailinfo.remark)
}
inline ::std::string* mailinfo::mutable_remark() {
  set_has_remark();
  // @@protoc_insertion_point(field_mutable:NFMsg.mailinfo.remark)
  return remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mailinfo::release_remark() {
  // @@protoc_insertion_point(field_release:NFMsg.mailinfo.remark)
  if (!has_remark()) {
    return NULL;
  }
  clear_has_remark();
  return remark_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mailinfo::set_allocated_remark(::std::string* remark) {
  if (remark != NULL) {
    set_has_remark();
  } else {
    clear_has_remark();
  }
  remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remark);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.mailinfo.remark)
}

// optional int32 validity = 14;
inline bool mailinfo::has_validity() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void mailinfo::set_has_validity() {
  _has_bits_[0] |= 0x00002000u;
}
inline void mailinfo::clear_has_validity() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void mailinfo::clear_validity() {
  validity_ = 0;
  clear_has_validity();
}
inline ::google::protobuf::int32 mailinfo::validity() const {
  // @@protoc_insertion_point(field_get:NFMsg.mailinfo.validity)
  return validity_;
}
inline void mailinfo::set_validity(::google::protobuf::int32 value) {
  set_has_validity();
  validity_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.mailinfo.validity)
}

// -------------------------------------------------------------------

// maillist

// repeated .NFMsg.mailinfo mlist = 1;
inline int maillist::mlist_size() const {
  return mlist_.size();
}
inline void maillist::clear_mlist() {
  mlist_.Clear();
}
inline ::NFMsg::mailinfo* maillist::mutable_mlist(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.maillist.mlist)
  return mlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::mailinfo >*
maillist::mutable_mlist() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.maillist.mlist)
  return &mlist_;
}
inline const ::NFMsg::mailinfo& maillist::mlist(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.maillist.mlist)
  return mlist_.Get(index);
}
inline ::NFMsg::mailinfo* maillist::add_mlist() {
  // @@protoc_insertion_point(field_add:NFMsg.maillist.mlist)
  return mlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::mailinfo >&
maillist::mlist() const {
  // @@protoc_insertion_point(field_list:NFMsg.maillist.mlist)
  return mlist_;
}

// -------------------------------------------------------------------

// inviteinfo

// optional int32 userid = 1;
inline bool inviteinfo::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void inviteinfo::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void inviteinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void inviteinfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 inviteinfo::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.inviteinfo.userid)
  return userid_;
}
inline void inviteinfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.inviteinfo.userid)
}

// optional int32 binduserid = 2;
inline bool inviteinfo::has_binduserid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void inviteinfo::set_has_binduserid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void inviteinfo::clear_has_binduserid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void inviteinfo::clear_binduserid() {
  binduserid_ = 0;
  clear_has_binduserid();
}
inline ::google::protobuf::int32 inviteinfo::binduserid() const {
  // @@protoc_insertion_point(field_get:NFMsg.inviteinfo.binduserid)
  return binduserid_;
}
inline void inviteinfo::set_binduserid(::google::protobuf::int32 value) {
  set_has_binduserid();
  binduserid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.inviteinfo.binduserid)
}

// optional string bindnickname = 3;
inline bool inviteinfo::has_bindnickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void inviteinfo::set_has_bindnickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void inviteinfo::clear_has_bindnickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void inviteinfo::clear_bindnickname() {
  bindnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bindnickname();
}
inline const ::std::string& inviteinfo::bindnickname() const {
  // @@protoc_insertion_point(field_get:NFMsg.inviteinfo.bindnickname)
  return bindnickname_.GetNoArena();
}
inline void inviteinfo::set_bindnickname(const ::std::string& value) {
  set_has_bindnickname();
  bindnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.inviteinfo.bindnickname)
}
#if LANG_CXX11
inline void inviteinfo::set_bindnickname(::std::string&& value) {
  set_has_bindnickname();
  bindnickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.inviteinfo.bindnickname)
}
#endif
inline void inviteinfo::set_bindnickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bindnickname();
  bindnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.inviteinfo.bindnickname)
}
inline void inviteinfo::set_bindnickname(const char* value, size_t size) {
  set_has_bindnickname();
  bindnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.inviteinfo.bindnickname)
}
inline ::std::string* inviteinfo::mutable_bindnickname() {
  set_has_bindnickname();
  // @@protoc_insertion_point(field_mutable:NFMsg.inviteinfo.bindnickname)
  return bindnickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* inviteinfo::release_bindnickname() {
  // @@protoc_insertion_point(field_release:NFMsg.inviteinfo.bindnickname)
  if (!has_bindnickname()) {
    return NULL;
  }
  clear_has_bindnickname();
  return bindnickname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void inviteinfo::set_allocated_bindnickname(::std::string* bindnickname) {
  if (bindnickname != NULL) {
    set_has_bindnickname();
  } else {
    clear_has_bindnickname();
  }
  bindnickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindnickname);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.inviteinfo.bindnickname)
}

// optional string bindfaceid = 4;
inline bool inviteinfo::has_bindfaceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void inviteinfo::set_has_bindfaceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void inviteinfo::clear_has_bindfaceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void inviteinfo::clear_bindfaceid() {
  bindfaceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bindfaceid();
}
inline const ::std::string& inviteinfo::bindfaceid() const {
  // @@protoc_insertion_point(field_get:NFMsg.inviteinfo.bindfaceid)
  return bindfaceid_.GetNoArena();
}
inline void inviteinfo::set_bindfaceid(const ::std::string& value) {
  set_has_bindfaceid();
  bindfaceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.inviteinfo.bindfaceid)
}
#if LANG_CXX11
inline void inviteinfo::set_bindfaceid(::std::string&& value) {
  set_has_bindfaceid();
  bindfaceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.inviteinfo.bindfaceid)
}
#endif
inline void inviteinfo::set_bindfaceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bindfaceid();
  bindfaceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.inviteinfo.bindfaceid)
}
inline void inviteinfo::set_bindfaceid(const char* value, size_t size) {
  set_has_bindfaceid();
  bindfaceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.inviteinfo.bindfaceid)
}
inline ::std::string* inviteinfo::mutable_bindfaceid() {
  set_has_bindfaceid();
  // @@protoc_insertion_point(field_mutable:NFMsg.inviteinfo.bindfaceid)
  return bindfaceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* inviteinfo::release_bindfaceid() {
  // @@protoc_insertion_point(field_release:NFMsg.inviteinfo.bindfaceid)
  if (!has_bindfaceid()) {
    return NULL;
  }
  clear_has_bindfaceid();
  return bindfaceid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void inviteinfo::set_allocated_bindfaceid(::std::string* bindfaceid) {
  if (bindfaceid != NULL) {
    set_has_bindfaceid();
  } else {
    clear_has_bindfaceid();
  }
  bindfaceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindfaceid);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.inviteinfo.bindfaceid)
}

// optional string binddate = 5;
inline bool inviteinfo::has_binddate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void inviteinfo::set_has_binddate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void inviteinfo::clear_has_binddate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void inviteinfo::clear_binddate() {
  binddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_binddate();
}
inline const ::std::string& inviteinfo::binddate() const {
  // @@protoc_insertion_point(field_get:NFMsg.inviteinfo.binddate)
  return binddate_.GetNoArena();
}
inline void inviteinfo::set_binddate(const ::std::string& value) {
  set_has_binddate();
  binddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.inviteinfo.binddate)
}
#if LANG_CXX11
inline void inviteinfo::set_binddate(::std::string&& value) {
  set_has_binddate();
  binddate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.inviteinfo.binddate)
}
#endif
inline void inviteinfo::set_binddate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_binddate();
  binddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.inviteinfo.binddate)
}
inline void inviteinfo::set_binddate(const char* value, size_t size) {
  set_has_binddate();
  binddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.inviteinfo.binddate)
}
inline ::std::string* inviteinfo::mutable_binddate() {
  set_has_binddate();
  // @@protoc_insertion_point(field_mutable:NFMsg.inviteinfo.binddate)
  return binddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* inviteinfo::release_binddate() {
  // @@protoc_insertion_point(field_release:NFMsg.inviteinfo.binddate)
  if (!has_binddate()) {
    return NULL;
  }
  clear_has_binddate();
  return binddate_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void inviteinfo::set_allocated_binddate(::std::string* binddate) {
  if (binddate != NULL) {
    set_has_binddate();
  } else {
    clear_has_binddate();
  }
  binddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binddate);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.inviteinfo.binddate)
}

// -------------------------------------------------------------------

// givemoneyrecord

// optional int32 userid = 1;
inline bool givemoneyrecord::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void givemoneyrecord::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void givemoneyrecord::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void givemoneyrecord::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 givemoneyrecord::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.givemoneyrecord.userid)
  return userid_;
}
inline void givemoneyrecord::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.givemoneyrecord.userid)
}

// optional string nickname = 2;
inline bool givemoneyrecord::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void givemoneyrecord::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void givemoneyrecord::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void givemoneyrecord::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& givemoneyrecord::nickname() const {
  // @@protoc_insertion_point(field_get:NFMsg.givemoneyrecord.nickname)
  return nickname_.GetNoArena();
}
inline void givemoneyrecord::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.givemoneyrecord.nickname)
}
#if LANG_CXX11
inline void givemoneyrecord::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.givemoneyrecord.nickname)
}
#endif
inline void givemoneyrecord::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.givemoneyrecord.nickname)
}
inline void givemoneyrecord::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.givemoneyrecord.nickname)
}
inline ::std::string* givemoneyrecord::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:NFMsg.givemoneyrecord.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* givemoneyrecord::release_nickname() {
  // @@protoc_insertion_point(field_release:NFMsg.givemoneyrecord.nickname)
  if (!has_nickname()) {
    return NULL;
  }
  clear_has_nickname();
  return nickname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void givemoneyrecord::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.givemoneyrecord.nickname)
}

// optional int32 amount = 3;
inline bool givemoneyrecord::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void givemoneyrecord::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void givemoneyrecord::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void givemoneyrecord::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline ::google::protobuf::int32 givemoneyrecord::amount() const {
  // @@protoc_insertion_point(field_get:NFMsg.givemoneyrecord.amount)
  return amount_;
}
inline void givemoneyrecord::set_amount(::google::protobuf::int32 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.givemoneyrecord.amount)
}

// optional string timemark = 4;
inline bool givemoneyrecord::has_timemark() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void givemoneyrecord::set_has_timemark() {
  _has_bits_[0] |= 0x00000002u;
}
inline void givemoneyrecord::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void givemoneyrecord::clear_timemark() {
  timemark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timemark();
}
inline const ::std::string& givemoneyrecord::timemark() const {
  // @@protoc_insertion_point(field_get:NFMsg.givemoneyrecord.timemark)
  return timemark_.GetNoArena();
}
inline void givemoneyrecord::set_timemark(const ::std::string& value) {
  set_has_timemark();
  timemark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.givemoneyrecord.timemark)
}
#if LANG_CXX11
inline void givemoneyrecord::set_timemark(::std::string&& value) {
  set_has_timemark();
  timemark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.givemoneyrecord.timemark)
}
#endif
inline void givemoneyrecord::set_timemark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timemark();
  timemark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.givemoneyrecord.timemark)
}
inline void givemoneyrecord::set_timemark(const char* value, size_t size) {
  set_has_timemark();
  timemark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.givemoneyrecord.timemark)
}
inline ::std::string* givemoneyrecord::mutable_timemark() {
  set_has_timemark();
  // @@protoc_insertion_point(field_mutable:NFMsg.givemoneyrecord.timemark)
  return timemark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* givemoneyrecord::release_timemark() {
  // @@protoc_insertion_point(field_release:NFMsg.givemoneyrecord.timemark)
  if (!has_timemark()) {
    return NULL;
  }
  clear_has_timemark();
  return timemark_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void givemoneyrecord::set_allocated_timemark(::std::string* timemark) {
  if (timemark != NULL) {
    set_has_timemark();
  } else {
    clear_has_timemark();
  }
  timemark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timemark);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.givemoneyrecord.timemark)
}

// -------------------------------------------------------------------

// agencyinfo

// optional int32 userid = 1;
inline bool agencyinfo::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void agencyinfo::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void agencyinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void agencyinfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 agencyinfo::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.agencyinfo.userid)
  return userid_;
}
inline void agencyinfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.agencyinfo.userid)
}

// optional string invitestr = 2;
inline bool agencyinfo::has_invitestr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void agencyinfo::set_has_invitestr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void agencyinfo::clear_has_invitestr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void agencyinfo::clear_invitestr() {
  invitestr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_invitestr();
}
inline const ::std::string& agencyinfo::invitestr() const {
  // @@protoc_insertion_point(field_get:NFMsg.agencyinfo.invitestr)
  return invitestr_.GetNoArena();
}
inline void agencyinfo::set_invitestr(const ::std::string& value) {
  set_has_invitestr();
  invitestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.agencyinfo.invitestr)
}
#if LANG_CXX11
inline void agencyinfo::set_invitestr(::std::string&& value) {
  set_has_invitestr();
  invitestr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.agencyinfo.invitestr)
}
#endif
inline void agencyinfo::set_invitestr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_invitestr();
  invitestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.agencyinfo.invitestr)
}
inline void agencyinfo::set_invitestr(const char* value, size_t size) {
  set_has_invitestr();
  invitestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.agencyinfo.invitestr)
}
inline ::std::string* agencyinfo::mutable_invitestr() {
  set_has_invitestr();
  // @@protoc_insertion_point(field_mutable:NFMsg.agencyinfo.invitestr)
  return invitestr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* agencyinfo::release_invitestr() {
  // @@protoc_insertion_point(field_release:NFMsg.agencyinfo.invitestr)
  if (!has_invitestr()) {
    return NULL;
  }
  clear_has_invitestr();
  return invitestr_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void agencyinfo::set_allocated_invitestr(::std::string* invitestr) {
  if (invitestr != NULL) {
    set_has_invitestr();
  } else {
    clear_has_invitestr();
  }
  invitestr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invitestr);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.agencyinfo.invitestr)
}

// optional int32 level = 3;
inline bool agencyinfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void agencyinfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void agencyinfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void agencyinfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 agencyinfo::level() const {
  // @@protoc_insertion_point(field_get:NFMsg.agencyinfo.level)
  return level_;
}
inline void agencyinfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.agencyinfo.level)
}

// optional int32 soleagent = 4;
inline bool agencyinfo::has_soleagent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void agencyinfo::set_has_soleagent() {
  _has_bits_[0] |= 0x00000020u;
}
inline void agencyinfo::clear_has_soleagent() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void agencyinfo::clear_soleagent() {
  soleagent_ = 0;
  clear_has_soleagent();
}
inline ::google::protobuf::int32 agencyinfo::soleagent() const {
  // @@protoc_insertion_point(field_get:NFMsg.agencyinfo.soleagent)
  return soleagent_;
}
inline void agencyinfo::set_soleagent(::google::protobuf::int32 value) {
  set_has_soleagent();
  soleagent_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.agencyinfo.soleagent)
}

// optional int32 agent1 = 5;
inline bool agencyinfo::has_agent1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void agencyinfo::set_has_agent1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void agencyinfo::clear_has_agent1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void agencyinfo::clear_agent1() {
  agent1_ = 0;
  clear_has_agent1();
}
inline ::google::protobuf::int32 agencyinfo::agent1() const {
  // @@protoc_insertion_point(field_get:NFMsg.agencyinfo.agent1)
  return agent1_;
}
inline void agencyinfo::set_agent1(::google::protobuf::int32 value) {
  set_has_agent1();
  agent1_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.agencyinfo.agent1)
}

// optional int32 agent2 = 6;
inline bool agencyinfo::has_agent2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void agencyinfo::set_has_agent2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void agencyinfo::clear_has_agent2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void agencyinfo::clear_agent2() {
  agent2_ = 0;
  clear_has_agent2();
}
inline ::google::protobuf::int32 agencyinfo::agent2() const {
  // @@protoc_insertion_point(field_get:NFMsg.agencyinfo.agent2)
  return agent2_;
}
inline void agencyinfo::set_agent2(::google::protobuf::int32 value) {
  set_has_agent2();
  agent2_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.agencyinfo.agent2)
}

// optional int32 agent3 = 7;
inline bool agencyinfo::has_agent3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void agencyinfo::set_has_agent3() {
  _has_bits_[0] |= 0x00000100u;
}
inline void agencyinfo::clear_has_agent3() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void agencyinfo::clear_agent3() {
  agent3_ = 0;
  clear_has_agent3();
}
inline ::google::protobuf::int32 agencyinfo::agent3() const {
  // @@protoc_insertion_point(field_get:NFMsg.agencyinfo.agent3)
  return agent3_;
}
inline void agencyinfo::set_agent3(::google::protobuf::int32 value) {
  set_has_agent3();
  agent3_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.agencyinfo.agent3)
}

// optional int32 agent4 = 8;
inline bool agencyinfo::has_agent4() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void agencyinfo::set_has_agent4() {
  _has_bits_[0] |= 0x00000200u;
}
inline void agencyinfo::clear_has_agent4() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void agencyinfo::clear_agent4() {
  agent4_ = 0;
  clear_has_agent4();
}
inline ::google::protobuf::int32 agencyinfo::agent4() const {
  // @@protoc_insertion_point(field_get:NFMsg.agencyinfo.agent4)
  return agent4_;
}
inline void agencyinfo::set_agent4(::google::protobuf::int32 value) {
  set_has_agent4();
  agent4_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.agencyinfo.agent4)
}

// repeated .NFMsg.inviteinfo invitelist = 9;
inline int agencyinfo::invitelist_size() const {
  return invitelist_.size();
}
inline void agencyinfo::clear_invitelist() {
  invitelist_.Clear();
}
inline ::NFMsg::inviteinfo* agencyinfo::mutable_invitelist(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.agencyinfo.invitelist)
  return invitelist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::inviteinfo >*
agencyinfo::mutable_invitelist() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.agencyinfo.invitelist)
  return &invitelist_;
}
inline const ::NFMsg::inviteinfo& agencyinfo::invitelist(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.agencyinfo.invitelist)
  return invitelist_.Get(index);
}
inline ::NFMsg::inviteinfo* agencyinfo::add_invitelist() {
  // @@protoc_insertion_point(field_add:NFMsg.agencyinfo.invitelist)
  return invitelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::inviteinfo >&
agencyinfo::invitelist() const {
  // @@protoc_insertion_point(field_list:NFMsg.agencyinfo.invitelist)
  return invitelist_;
}

// optional string qrcodeurl = 10;
inline bool agencyinfo::has_qrcodeurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void agencyinfo::set_has_qrcodeurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void agencyinfo::clear_has_qrcodeurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void agencyinfo::clear_qrcodeurl() {
  qrcodeurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qrcodeurl();
}
inline const ::std::string& agencyinfo::qrcodeurl() const {
  // @@protoc_insertion_point(field_get:NFMsg.agencyinfo.qrcodeurl)
  return qrcodeurl_.GetNoArena();
}
inline void agencyinfo::set_qrcodeurl(const ::std::string& value) {
  set_has_qrcodeurl();
  qrcodeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.agencyinfo.qrcodeurl)
}
#if LANG_CXX11
inline void agencyinfo::set_qrcodeurl(::std::string&& value) {
  set_has_qrcodeurl();
  qrcodeurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.agencyinfo.qrcodeurl)
}
#endif
inline void agencyinfo::set_qrcodeurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qrcodeurl();
  qrcodeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.agencyinfo.qrcodeurl)
}
inline void agencyinfo::set_qrcodeurl(const char* value, size_t size) {
  set_has_qrcodeurl();
  qrcodeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.agencyinfo.qrcodeurl)
}
inline ::std::string* agencyinfo::mutable_qrcodeurl() {
  set_has_qrcodeurl();
  // @@protoc_insertion_point(field_mutable:NFMsg.agencyinfo.qrcodeurl)
  return qrcodeurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* agencyinfo::release_qrcodeurl() {
  // @@protoc_insertion_point(field_release:NFMsg.agencyinfo.qrcodeurl)
  if (!has_qrcodeurl()) {
    return NULL;
  }
  clear_has_qrcodeurl();
  return qrcodeurl_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void agencyinfo::set_allocated_qrcodeurl(::std::string* qrcodeurl) {
  if (qrcodeurl != NULL) {
    set_has_qrcodeurl();
  } else {
    clear_has_qrcodeurl();
  }
  qrcodeurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qrcodeurl);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.agencyinfo.qrcodeurl)
}

// optional string datemark = 11;
inline bool agencyinfo::has_datemark() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void agencyinfo::set_has_datemark() {
  _has_bits_[0] |= 0x00000004u;
}
inline void agencyinfo::clear_has_datemark() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void agencyinfo::clear_datemark() {
  datemark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_datemark();
}
inline const ::std::string& agencyinfo::datemark() const {
  // @@protoc_insertion_point(field_get:NFMsg.agencyinfo.datemark)
  return datemark_.GetNoArena();
}
inline void agencyinfo::set_datemark(const ::std::string& value) {
  set_has_datemark();
  datemark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.agencyinfo.datemark)
}
#if LANG_CXX11
inline void agencyinfo::set_datemark(::std::string&& value) {
  set_has_datemark();
  datemark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.agencyinfo.datemark)
}
#endif
inline void agencyinfo::set_datemark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_datemark();
  datemark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.agencyinfo.datemark)
}
inline void agencyinfo::set_datemark(const char* value, size_t size) {
  set_has_datemark();
  datemark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.agencyinfo.datemark)
}
inline ::std::string* agencyinfo::mutable_datemark() {
  set_has_datemark();
  // @@protoc_insertion_point(field_mutable:NFMsg.agencyinfo.datemark)
  return datemark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* agencyinfo::release_datemark() {
  // @@protoc_insertion_point(field_release:NFMsg.agencyinfo.datemark)
  if (!has_datemark()) {
    return NULL;
  }
  clear_has_datemark();
  return datemark_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void agencyinfo::set_allocated_datemark(::std::string* datemark) {
  if (datemark != NULL) {
    set_has_datemark();
  } else {
    clear_has_datemark();
  }
  datemark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datemark);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.agencyinfo.datemark)
}

// optional int32 moneymark = 12;
inline bool agencyinfo::has_moneymark() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void agencyinfo::set_has_moneymark() {
  _has_bits_[0] |= 0x00000400u;
}
inline void agencyinfo::clear_has_moneymark() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void agencyinfo::clear_moneymark() {
  moneymark_ = 0;
  clear_has_moneymark();
}
inline ::google::protobuf::int32 agencyinfo::moneymark() const {
  // @@protoc_insertion_point(field_get:NFMsg.agencyinfo.moneymark)
  return moneymark_;
}
inline void agencyinfo::set_moneymark(::google::protobuf::int32 value) {
  set_has_moneymark();
  moneymark_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.agencyinfo.moneymark)
}

// optional int32 weekmoney = 13;
inline bool agencyinfo::has_weekmoney() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void agencyinfo::set_has_weekmoney() {
  _has_bits_[0] |= 0x00000800u;
}
inline void agencyinfo::clear_has_weekmoney() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void agencyinfo::clear_weekmoney() {
  weekmoney_ = 0;
  clear_has_weekmoney();
}
inline ::google::protobuf::int32 agencyinfo::weekmoney() const {
  // @@protoc_insertion_point(field_get:NFMsg.agencyinfo.weekmoney)
  return weekmoney_;
}
inline void agencyinfo::set_weekmoney(::google::protobuf::int32 value) {
  set_has_weekmoney();
  weekmoney_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.agencyinfo.weekmoney)
}

// repeated .NFMsg.givemoneyrecord givemoneylist = 14;
inline int agencyinfo::givemoneylist_size() const {
  return givemoneylist_.size();
}
inline void agencyinfo::clear_givemoneylist() {
  givemoneylist_.Clear();
}
inline ::NFMsg::givemoneyrecord* agencyinfo::mutable_givemoneylist(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.agencyinfo.givemoneylist)
  return givemoneylist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::givemoneyrecord >*
agencyinfo::mutable_givemoneylist() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.agencyinfo.givemoneylist)
  return &givemoneylist_;
}
inline const ::NFMsg::givemoneyrecord& agencyinfo::givemoneylist(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.agencyinfo.givemoneylist)
  return givemoneylist_.Get(index);
}
inline ::NFMsg::givemoneyrecord* agencyinfo::add_givemoneylist() {
  // @@protoc_insertion_point(field_add:NFMsg.agencyinfo.givemoneylist)
  return givemoneylist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::givemoneyrecord >&
agencyinfo::givemoneylist() const {
  // @@protoc_insertion_point(field_list:NFMsg.agencyinfo.givemoneylist)
  return givemoneylist_;
}

// -------------------------------------------------------------------

// intlist

// repeated int32 ilist = 1;
inline int intlist::ilist_size() const {
  return ilist_.size();
}
inline void intlist::clear_ilist() {
  ilist_.Clear();
}
inline ::google::protobuf::int32 intlist::ilist(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.intlist.ilist)
  return ilist_.Get(index);
}
inline void intlist::set_ilist(int index, ::google::protobuf::int32 value) {
  ilist_.Set(index, value);
  // @@protoc_insertion_point(field_set:NFMsg.intlist.ilist)
}
inline void intlist::add_ilist(::google::protobuf::int32 value) {
  ilist_.Add(value);
  // @@protoc_insertion_point(field_add:NFMsg.intlist.ilist)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
intlist::ilist() const {
  // @@protoc_insertion_point(field_list:NFMsg.intlist.ilist)
  return ilist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
intlist::mutable_ilist() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.intlist.ilist)
  return &ilist_;
}

// -------------------------------------------------------------------

// stringlist

// repeated string slist = 1;
inline int stringlist::slist_size() const {
  return slist_.size();
}
inline void stringlist::clear_slist() {
  slist_.Clear();
}
inline const ::std::string& stringlist::slist(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.stringlist.slist)
  return slist_.Get(index);
}
inline ::std::string* stringlist::mutable_slist(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.stringlist.slist)
  return slist_.Mutable(index);
}
inline void stringlist::set_slist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFMsg.stringlist.slist)
  slist_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void stringlist::set_slist(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFMsg.stringlist.slist)
  slist_.Mutable(index)->assign(std::move(value));
}
#endif
inline void stringlist::set_slist(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  slist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFMsg.stringlist.slist)
}
inline void stringlist::set_slist(int index, const char* value, size_t size) {
  slist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFMsg.stringlist.slist)
}
inline ::std::string* stringlist::add_slist() {
  // @@protoc_insertion_point(field_add_mutable:NFMsg.stringlist.slist)
  return slist_.Add();
}
inline void stringlist::add_slist(const ::std::string& value) {
  slist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFMsg.stringlist.slist)
}
#if LANG_CXX11
inline void stringlist::add_slist(::std::string&& value) {
  slist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFMsg.stringlist.slist)
}
#endif
inline void stringlist::add_slist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  slist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFMsg.stringlist.slist)
}
inline void stringlist::add_slist(const char* value, size_t size) {
  slist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFMsg.stringlist.slist)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
stringlist::slist() const {
  // @@protoc_insertion_point(field_list:NFMsg.stringlist.slist)
  return slist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
stringlist::mutable_slist() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.stringlist.slist)
  return &slist_;
}

// -------------------------------------------------------------------

// specialinfo

// optional int32 userid = 1;
inline bool specialinfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void specialinfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void specialinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void specialinfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 specialinfo::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.specialinfo.userid)
  return userid_;
}
inline void specialinfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.specialinfo.userid)
}

// optional int32 starttime = 2;
inline bool specialinfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void specialinfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void specialinfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void specialinfo::clear_starttime() {
  starttime_ = 0;
  clear_has_starttime();
}
inline ::google::protobuf::int32 specialinfo::starttime() const {
  // @@protoc_insertion_point(field_get:NFMsg.specialinfo.starttime)
  return starttime_;
}
inline void specialinfo::set_starttime(::google::protobuf::int32 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.specialinfo.starttime)
}

// optional int32 endtime = 3;
inline bool specialinfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void specialinfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void specialinfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void specialinfo::clear_endtime() {
  endtime_ = 0;
  clear_has_endtime();
}
inline ::google::protobuf::int32 specialinfo::endtime() const {
  // @@protoc_insertion_point(field_get:NFMsg.specialinfo.endtime)
  return endtime_;
}
inline void specialinfo::set_endtime(::google::protobuf::int32 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.specialinfo.endtime)
}

// optional int32 state = 4;
inline bool specialinfo::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void specialinfo::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void specialinfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void specialinfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 specialinfo::state() const {
  // @@protoc_insertion_point(field_get:NFMsg.specialinfo.state)
  return state_;
}
inline void specialinfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.specialinfo.state)
}

// optional int32 rate = 5;
inline bool specialinfo::has_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void specialinfo::set_has_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void specialinfo::clear_has_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void specialinfo::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline ::google::protobuf::int32 specialinfo::rate() const {
  // @@protoc_insertion_point(field_get:NFMsg.specialinfo.rate)
  return rate_;
}
inline void specialinfo::set_rate(::google::protobuf::int32 value) {
  set_has_rate();
  rate_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.specialinfo.rate)
}

// optional int32 winall = 6;
inline bool specialinfo::has_winall() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void specialinfo::set_has_winall() {
  _has_bits_[0] |= 0x00000020u;
}
inline void specialinfo::clear_has_winall() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void specialinfo::clear_winall() {
  winall_ = 0;
  clear_has_winall();
}
inline ::google::protobuf::int32 specialinfo::winall() const {
  // @@protoc_insertion_point(field_get:NFMsg.specialinfo.winall)
  return winall_;
}
inline void specialinfo::set_winall(::google::protobuf::int32 value) {
  set_has_winall();
  winall_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.specialinfo.winall)
}

// optional int32 peinum = 7;
inline bool specialinfo::has_peinum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void specialinfo::set_has_peinum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void specialinfo::clear_has_peinum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void specialinfo::clear_peinum() {
  peinum_ = 0;
  clear_has_peinum();
}
inline ::google::protobuf::int32 specialinfo::peinum() const {
  // @@protoc_insertion_point(field_get:NFMsg.specialinfo.peinum)
  return peinum_;
}
inline void specialinfo::set_peinum(::google::protobuf::int32 value) {
  set_has_peinum();
  peinum_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.specialinfo.peinum)
}

// optional int32 marknum = 8;
inline bool specialinfo::has_marknum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void specialinfo::set_has_marknum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void specialinfo::clear_has_marknum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void specialinfo::clear_marknum() {
  marknum_ = 0;
  clear_has_marknum();
}
inline ::google::protobuf::int32 specialinfo::marknum() const {
  // @@protoc_insertion_point(field_get:NFMsg.specialinfo.marknum)
  return marknum_;
}
inline void specialinfo::set_marknum(::google::protobuf::int32 value) {
  set_has_marknum();
  marknum_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.specialinfo.marknum)
}

// repeated int32 gametype = 9;
inline int specialinfo::gametype_size() const {
  return gametype_.size();
}
inline void specialinfo::clear_gametype() {
  gametype_.Clear();
}
inline ::google::protobuf::int32 specialinfo::gametype(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.specialinfo.gametype)
  return gametype_.Get(index);
}
inline void specialinfo::set_gametype(int index, ::google::protobuf::int32 value) {
  gametype_.Set(index, value);
  // @@protoc_insertion_point(field_set:NFMsg.specialinfo.gametype)
}
inline void specialinfo::add_gametype(::google::protobuf::int32 value) {
  gametype_.Add(value);
  // @@protoc_insertion_point(field_add:NFMsg.specialinfo.gametype)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
specialinfo::gametype() const {
  // @@protoc_insertion_point(field_list:NFMsg.specialinfo.gametype)
  return gametype_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
specialinfo::mutable_gametype() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.specialinfo.gametype)
  return &gametype_;
}

// optional int32 cardtype = 10;
inline bool specialinfo::has_cardtype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void specialinfo::set_has_cardtype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void specialinfo::clear_has_cardtype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void specialinfo::clear_cardtype() {
  cardtype_ = 0;
  clear_has_cardtype();
}
inline ::google::protobuf::int32 specialinfo::cardtype() const {
  // @@protoc_insertion_point(field_get:NFMsg.specialinfo.cardtype)
  return cardtype_;
}
inline void specialinfo::set_cardtype(::google::protobuf::int32 value) {
  set_has_cardtype();
  cardtype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.specialinfo.cardtype)
}

// optional int32 iszhuang = 11;
inline bool specialinfo::has_iszhuang() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void specialinfo::set_has_iszhuang() {
  _has_bits_[0] |= 0x00000200u;
}
inline void specialinfo::clear_has_iszhuang() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void specialinfo::clear_iszhuang() {
  iszhuang_ = 0;
  clear_has_iszhuang();
}
inline ::google::protobuf::int32 specialinfo::iszhuang() const {
  // @@protoc_insertion_point(field_get:NFMsg.specialinfo.iszhuang)
  return iszhuang_;
}
inline void specialinfo::set_iszhuang(::google::protobuf::int32 value) {
  set_has_iszhuang();
  iszhuang_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.specialinfo.iszhuang)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_st_5fhuman_2eproto
