// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_lhd.proto

#include "st_lhd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_st_5fhuman_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_st_5fhuman_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_playersimpleinfo;
}  // namespace protobuf_st_5fhuman_2eproto
namespace protobuf_st_5flhd_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_st_5flhd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_lhd_areainfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_st_5flhd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_lhd_arearate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_st_5flhd_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_lhd_tableconfiginfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_st_5flhd_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_lhd_usercountinfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_st_5flhd_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_lhd_userinfo;
}  // namespace protobuf_st_5flhd_2eproto
namespace NFMsg {
class lhd_jettonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<lhd_jetton>
      _instance;
} _lhd_jetton_default_instance_;
class lhd_userinfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<lhd_userinfo>
      _instance;
} _lhd_userinfo_default_instance_;
class lhd_areainfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<lhd_areainfo>
      _instance;
} _lhd_areainfo_default_instance_;
class lhd_arearateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<lhd_arearate>
      _instance;
} _lhd_arearate_default_instance_;
class lhd_tableconfiginfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<lhd_tableconfiginfo>
      _instance;
} _lhd_tableconfiginfo_default_instance_;
class lhd_tableinfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<lhd_tableinfo>
      _instance;
} _lhd_tableinfo_default_instance_;
class lhd_usercountinfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<lhd_usercountinfo>
      _instance;
} _lhd_usercountinfo_default_instance_;
class lhd_gamecountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<lhd_gamecount>
      _instance;
} _lhd_gamecount_default_instance_;
}  // namespace NFMsg
namespace protobuf_st_5flhd_2eproto {
static void InitDefaultslhd_jetton() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_lhd_jetton_default_instance_;
    new (ptr) ::NFMsg::lhd_jetton();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::lhd_jetton::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_lhd_jetton =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslhd_jetton}, {}};

static void InitDefaultslhd_userinfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_lhd_userinfo_default_instance_;
    new (ptr) ::NFMsg::lhd_userinfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::lhd_userinfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_lhd_userinfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultslhd_userinfo}, {
      &protobuf_st_5fhuman_2eproto::scc_info_playersimpleinfo.base,}};

static void InitDefaultslhd_areainfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_lhd_areainfo_default_instance_;
    new (ptr) ::NFMsg::lhd_areainfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::lhd_areainfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_lhd_areainfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslhd_areainfo}, {}};

static void InitDefaultslhd_arearate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_lhd_arearate_default_instance_;
    new (ptr) ::NFMsg::lhd_arearate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::lhd_arearate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_lhd_arearate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslhd_arearate}, {}};

static void InitDefaultslhd_tableconfiginfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_lhd_tableconfiginfo_default_instance_;
    new (ptr) ::NFMsg::lhd_tableconfiginfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::lhd_tableconfiginfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_lhd_tableconfiginfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultslhd_tableconfiginfo}, {
      &protobuf_st_5flhd_2eproto::scc_info_lhd_arearate.base,}};

static void InitDefaultslhd_tableinfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_lhd_tableinfo_default_instance_;
    new (ptr) ::NFMsg::lhd_tableinfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::lhd_tableinfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_lhd_tableinfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultslhd_tableinfo}, {
      &protobuf_st_5flhd_2eproto::scc_info_lhd_tableconfiginfo.base,
      &protobuf_st_5flhd_2eproto::scc_info_lhd_userinfo.base,
      &protobuf_st_5flhd_2eproto::scc_info_lhd_areainfo.base,}};

static void InitDefaultslhd_usercountinfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_lhd_usercountinfo_default_instance_;
    new (ptr) ::NFMsg::lhd_usercountinfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::lhd_usercountinfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_lhd_usercountinfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultslhd_usercountinfo}, {
      &protobuf_st_5fhuman_2eproto::scc_info_playersimpleinfo.base,}};

static void InitDefaultslhd_gamecount() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_lhd_gamecount_default_instance_;
    new (ptr) ::NFMsg::lhd_gamecount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::lhd_gamecount::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_lhd_gamecount =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultslhd_gamecount}, {
      &protobuf_st_5flhd_2eproto::scc_info_lhd_usercountinfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_lhd_jetton.base);
  ::google::protobuf::internal::InitSCC(&scc_info_lhd_userinfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_lhd_areainfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_lhd_arearate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_lhd_tableconfiginfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_lhd_tableinfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_lhd_usercountinfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_lhd_gamecount.base);
}

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_jetton, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_jetton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_jetton, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_jetton, pourtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_jetton, jetton_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_userinfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_userinfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_userinfo, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_userinfo, chair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_userinfo, alljetton_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_userinfo, rush_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_areainfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_areainfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_areainfo, area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_areainfo, pour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_areainfo, cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_areainfo, chestarea_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_arearate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_arearate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_arearate, long_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_arearate, hu_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_arearate, he_rate_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_tableconfiginfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_tableconfiginfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_tableconfiginfo, maxuser_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_tableconfiginfo, maxpour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_tableconfiginfo, pourtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_tableconfiginfo, rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_tableconfiginfo, gamecountype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_tableconfiginfo, waittime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_tableconfiginfo, autonext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_tableconfiginfo, chesttype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_tableconfiginfo, banktype_),
  1,
  2,
  ~0u,
  0,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_tableinfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_tableinfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_tableinfo, tableid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_tableinfo, frameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_tableinfo, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_tableinfo, timemark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_tableinfo, configinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_tableinfo, bankerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_tableinfo, situsers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_tableinfo, standusers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_tableinfo, areainfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_tableinfo, usernum_),
  1,
  2,
  3,
  4,
  0,
  5,
  ~0u,
  ~0u,
  ~0u,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_usercountinfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_usercountinfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_usercountinfo, userinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_usercountinfo, redscore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_usercountinfo, blackscore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_usercountinfo, hescore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_usercountinfo, winscore_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_gamecount, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_gamecount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_gamecount, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_gamecount, area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_gamecount, winuser_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_gamecount, bankid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_gamecount, timemark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::lhd_gamecount, pourinfo_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::NFMsg::lhd_jetton)},
  { 11, 20, sizeof(::NFMsg::lhd_userinfo)},
  { 24, 33, sizeof(::NFMsg::lhd_areainfo)},
  { 37, 45, sizeof(::NFMsg::lhd_arearate)},
  { 48, 62, sizeof(::NFMsg::lhd_tableconfiginfo)},
  { 71, 86, sizeof(::NFMsg::lhd_tableinfo)},
  { 96, 106, sizeof(::NFMsg::lhd_usercountinfo)},
  { 111, 122, sizeof(::NFMsg::lhd_gamecount)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_lhd_jetton_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_lhd_userinfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_lhd_areainfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_lhd_arearate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_lhd_tableconfiginfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_lhd_tableinfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_lhd_usercountinfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_lhd_gamecount_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "st_lhd.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014st_lhd.proto\022\005NFMsg\032\016st_human.proto\">\n"
      "\nlhd_jetton\022\016\n\006userid\030\001 \001(\005\022\020\n\010pourtype\030"
      "\002 \001(\005\022\016\n\006jetton\030\003 \001(\005\"e\n\014lhd_userinfo\022%\n"
      "\004info\030\001 \001(\0132\027.NFMsg.playersimpleinfo\022\r\n\005"
      "chair\030\002 \001(\005\022\021\n\talljetton\030\003 \001(\005\022\014\n\004rush\030\004"
      " \001(\005\"L\n\014lhd_areainfo\022\014\n\004area\030\001 \001(\005\022\014\n\004po"
      "ur\030\002 \001(\005\022\r\n\005cards\030\003 \001(\005\022\021\n\tchestarea\030\005 \001"
      "(\005\"C\n\014lhd_arearate\022\021\n\tlong_rate\030\001 \001(\002\022\017\n"
      "\007hu_rate\030\002 \001(\002\022\017\n\007he_rate\030\003 \001(\002\"\313\001\n\023lhd_"
      "tableconfiginfo\022\017\n\007maxuser\030\002 \001(\005\022\017\n\007maxp"
      "our\030\003 \001(\005\022\020\n\010pourtype\030\004 \003(\005\022!\n\004rate\030\005 \001("
      "\0132\023.NFMsg.lhd_arearate\022\024\n\014gamecountype\030\006"
      " \001(\005\022\020\n\010waittime\030\007 \001(\005\022\020\n\010autonext\030\010 \001(\010"
      "\022\021\n\tchesttype\030\t \001(\005\022\020\n\010banktype\030\n \001(\005\"\234\002"
      "\n\rlhd_tableinfo\022\017\n\007tableid\030\001 \001(\005\022\017\n\007fram"
      "eid\030\002 \001(\005\022\r\n\005state\030\003 \001(\005\022\020\n\010timemark\030\004 \001"
      "(\005\022.\n\nconfiginfo\030\005 \001(\0132\032.NFMsg.lhd_table"
      "configinfo\022\020\n\010bankerid\030\006 \001(\005\022%\n\010situsers"
      "\030\007 \003(\0132\023.NFMsg.lhd_userinfo\022\'\n\nstanduser"
      "s\030\010 \003(\0132\023.NFMsg.lhd_userinfo\022%\n\010areainfo"
      "\030\t \003(\0132\023.NFMsg.lhd_areainfo\022\017\n\007usernum\030\n"
      " \001(\005\"\207\001\n\021lhd_usercountinfo\022)\n\010userinfo\030\001"
      " \001(\0132\027.NFMsg.playersimpleinfo\022\020\n\010redscor"
      "e\030\002 \001(\005\022\022\n\nblackscore\030\003 \001(\005\022\017\n\007hescore\030\004"
      " \001(\005\022\020\n\010winscore\030\005 \001(\005\"\212\001\n\rlhd_gamecount"
      "\022\014\n\004time\030\002 \001(\005\022\014\n\004area\030\003 \001(\005\022\017\n\007winuser\030"
      "\004 \001(\005\022\016\n\006bankid\030\005 \001(\005\022\020\n\010timemark\030\006 \001(\005\022"
      "*\n\010pourinfo\030\007 \003(\0132\030.NFMsg.lhd_usercounti"
      "nfo*\305\001\n\tlhd_state\022\023\n\017lhd_state_ready\020\001\022\030"
      "\n\024lhd_state_rushbanker\020\002\022\032\n\026lhd_state_co"
      "mmitbanker\020\003\022\030\n\024lhd_state_cheststart\020\004\022\022"
      "\n\016lhd_state_pour\020\005\022\027\n\023lhd_state_lightcar"
      "d\020\006\022\023\n\017lhd_state_count\020\007\022\021\n\rlhd_state_en"
      "d\020\010*\?\n\010lhd_area\022\021\n\rlhd_area_long\020\001\022\017\n\013lh"
      "d_area_hu\020\002\022\017\n\013lhd_area_he\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1388);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_lhd.proto", &protobuf_RegisterTypes);
  ::protobuf_st_5fhuman_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_st_5flhd_2eproto
namespace NFMsg {
const ::google::protobuf::EnumDescriptor* lhd_state_descriptor() {
  protobuf_st_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_st_5flhd_2eproto::file_level_enum_descriptors[0];
}
bool lhd_state_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* lhd_area_descriptor() {
  protobuf_st_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_st_5flhd_2eproto::file_level_enum_descriptors[1];
}
bool lhd_area_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void lhd_jetton::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int lhd_jetton::kUseridFieldNumber;
const int lhd_jetton::kPourtypeFieldNumber;
const int lhd_jetton::kJettonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

lhd_jetton::lhd_jetton()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_st_5flhd_2eproto::scc_info_lhd_jetton.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.lhd_jetton)
}
lhd_jetton::lhd_jetton(const lhd_jetton& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&jetton_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(jetton_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.lhd_jetton)
}

void lhd_jetton::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jetton_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(jetton_));
}

lhd_jetton::~lhd_jetton() {
  // @@protoc_insertion_point(destructor:NFMsg.lhd_jetton)
  SharedDtor();
}

void lhd_jetton::SharedDtor() {
}

void lhd_jetton::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* lhd_jetton::descriptor() {
  ::protobuf_st_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_st_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const lhd_jetton& lhd_jetton::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_st_5flhd_2eproto::scc_info_lhd_jetton.base);
  return *internal_default_instance();
}


void lhd_jetton::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.lhd_jetton)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&jetton_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(jetton_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool lhd_jetton::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.lhd_jetton)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pourtype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_pourtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 jetton = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_jetton();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jetton_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.lhd_jetton)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.lhd_jetton)
  return false;
#undef DO_
}

void lhd_jetton::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.lhd_jetton)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 pourtype = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pourtype(), output);
  }

  // optional int32 jetton = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->jetton(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.lhd_jetton)
}

::google::protobuf::uint8* lhd_jetton::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.lhd_jetton)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 pourtype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pourtype(), target);
  }

  // optional int32 jetton = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->jetton(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.lhd_jetton)
  return target;
}

size_t lhd_jetton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.lhd_jetton)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 pourtype = 2;
    if (has_pourtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourtype());
    }

    // optional int32 jetton = 3;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jetton());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void lhd_jetton::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.lhd_jetton)
  GOOGLE_DCHECK_NE(&from, this);
  const lhd_jetton* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const lhd_jetton>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.lhd_jetton)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.lhd_jetton)
    MergeFrom(*source);
  }
}

void lhd_jetton::MergeFrom(const lhd_jetton& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.lhd_jetton)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      pourtype_ = from.pourtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      jetton_ = from.jetton_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void lhd_jetton::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.lhd_jetton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lhd_jetton::CopyFrom(const lhd_jetton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.lhd_jetton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lhd_jetton::IsInitialized() const {
  return true;
}

void lhd_jetton::Swap(lhd_jetton* other) {
  if (other == this) return;
  InternalSwap(other);
}
void lhd_jetton::InternalSwap(lhd_jetton* other) {
  using std::swap;
  swap(userid_, other->userid_);
  swap(pourtype_, other->pourtype_);
  swap(jetton_, other->jetton_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata lhd_jetton::GetMetadata() const {
  protobuf_st_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_st_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void lhd_userinfo::InitAsDefaultInstance() {
  ::NFMsg::_lhd_userinfo_default_instance_._instance.get_mutable()->info_ = const_cast< ::NFMsg::playersimpleinfo*>(
      ::NFMsg::playersimpleinfo::internal_default_instance());
}
void lhd_userinfo::clear_info() {
  if (info_ != NULL) info_->Clear();
  clear_has_info();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int lhd_userinfo::kInfoFieldNumber;
const int lhd_userinfo::kChairFieldNumber;
const int lhd_userinfo::kAlljettonFieldNumber;
const int lhd_userinfo::kRushFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

lhd_userinfo::lhd_userinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_st_5flhd_2eproto::scc_info_lhd_userinfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.lhd_userinfo)
}
lhd_userinfo::lhd_userinfo(const lhd_userinfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::NFMsg::playersimpleinfo(*from.info_);
  } else {
    info_ = NULL;
  }
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&rush_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(rush_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.lhd_userinfo)
}

void lhd_userinfo::SharedCtor() {
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rush_) -
      reinterpret_cast<char*>(&info_)) + sizeof(rush_));
}

lhd_userinfo::~lhd_userinfo() {
  // @@protoc_insertion_point(destructor:NFMsg.lhd_userinfo)
  SharedDtor();
}

void lhd_userinfo::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void lhd_userinfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* lhd_userinfo::descriptor() {
  ::protobuf_st_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_st_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const lhd_userinfo& lhd_userinfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_st_5flhd_2eproto::scc_info_lhd_userinfo.base);
  return *internal_default_instance();
}


void lhd_userinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.lhd_userinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != NULL);
    info_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&chair_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rush_) -
        reinterpret_cast<char*>(&chair_)) + sizeof(rush_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool lhd_userinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.lhd_userinfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NFMsg.playersimpleinfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chair = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_chair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 alljetton = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_alljetton();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alljetton_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rush = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_rush();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rush_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.lhd_userinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.lhd_userinfo)
  return false;
#undef DO_
}

void lhd_userinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.lhd_userinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .NFMsg.playersimpleinfo info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_info(), output);
  }

  // optional int32 chair = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chair(), output);
  }

  // optional int32 alljetton = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->alljetton(), output);
  }

  // optional int32 rush = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rush(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.lhd_userinfo)
}

::google::protobuf::uint8* lhd_userinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.lhd_userinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .NFMsg.playersimpleinfo info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_info(), deterministic, target);
  }

  // optional int32 chair = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chair(), target);
  }

  // optional int32 alljetton = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->alljetton(), target);
  }

  // optional int32 rush = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rush(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.lhd_userinfo)
  return target;
}

size_t lhd_userinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.lhd_userinfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .NFMsg.playersimpleinfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional int32 chair = 2;
    if (has_chair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair());
    }

    // optional int32 alljetton = 3;
    if (has_alljetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alljetton());
    }

    // optional int32 rush = 4;
    if (has_rush()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rush());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void lhd_userinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.lhd_userinfo)
  GOOGLE_DCHECK_NE(&from, this);
  const lhd_userinfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const lhd_userinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.lhd_userinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.lhd_userinfo)
    MergeFrom(*source);
  }
}

void lhd_userinfo::MergeFrom(const lhd_userinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.lhd_userinfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_info()->::NFMsg::playersimpleinfo::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000002u) {
      chair_ = from.chair_;
    }
    if (cached_has_bits & 0x00000004u) {
      alljetton_ = from.alljetton_;
    }
    if (cached_has_bits & 0x00000008u) {
      rush_ = from.rush_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void lhd_userinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.lhd_userinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lhd_userinfo::CopyFrom(const lhd_userinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.lhd_userinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lhd_userinfo::IsInitialized() const {
  return true;
}

void lhd_userinfo::Swap(lhd_userinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void lhd_userinfo::InternalSwap(lhd_userinfo* other) {
  using std::swap;
  swap(info_, other->info_);
  swap(chair_, other->chair_);
  swap(alljetton_, other->alljetton_);
  swap(rush_, other->rush_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata lhd_userinfo::GetMetadata() const {
  protobuf_st_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_st_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void lhd_areainfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int lhd_areainfo::kAreaFieldNumber;
const int lhd_areainfo::kPourFieldNumber;
const int lhd_areainfo::kCardsFieldNumber;
const int lhd_areainfo::kChestareaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

lhd_areainfo::lhd_areainfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_st_5flhd_2eproto::scc_info_lhd_areainfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.lhd_areainfo)
}
lhd_areainfo::lhd_areainfo(const lhd_areainfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&area_, &from.area_,
    static_cast<size_t>(reinterpret_cast<char*>(&chestarea_) -
    reinterpret_cast<char*>(&area_)) + sizeof(chestarea_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.lhd_areainfo)
}

void lhd_areainfo::SharedCtor() {
  ::memset(&area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chestarea_) -
      reinterpret_cast<char*>(&area_)) + sizeof(chestarea_));
}

lhd_areainfo::~lhd_areainfo() {
  // @@protoc_insertion_point(destructor:NFMsg.lhd_areainfo)
  SharedDtor();
}

void lhd_areainfo::SharedDtor() {
}

void lhd_areainfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* lhd_areainfo::descriptor() {
  ::protobuf_st_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_st_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const lhd_areainfo& lhd_areainfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_st_5flhd_2eproto::scc_info_lhd_areainfo.base);
  return *internal_default_instance();
}


void lhd_areainfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.lhd_areainfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&area_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chestarea_) -
        reinterpret_cast<char*>(&area_)) + sizeof(chestarea_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool lhd_areainfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.lhd_areainfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 area = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pour = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_pour();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cards = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_cards();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cards_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chestarea = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_chestarea();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chestarea_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.lhd_areainfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.lhd_areainfo)
  return false;
#undef DO_
}

void lhd_areainfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.lhd_areainfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 area = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->area(), output);
  }

  // optional int32 pour = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pour(), output);
  }

  // optional int32 cards = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cards(), output);
  }

  // optional int32 chestarea = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->chestarea(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.lhd_areainfo)
}

::google::protobuf::uint8* lhd_areainfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.lhd_areainfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 area = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->area(), target);
  }

  // optional int32 pour = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pour(), target);
  }

  // optional int32 cards = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cards(), target);
  }

  // optional int32 chestarea = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->chestarea(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.lhd_areainfo)
  return target;
}

size_t lhd_areainfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.lhd_areainfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 area = 1;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area());
    }

    // optional int32 pour = 2;
    if (has_pour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pour());
    }

    // optional int32 cards = 3;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cards());
    }

    // optional int32 chestarea = 5;
    if (has_chestarea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chestarea());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void lhd_areainfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.lhd_areainfo)
  GOOGLE_DCHECK_NE(&from, this);
  const lhd_areainfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const lhd_areainfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.lhd_areainfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.lhd_areainfo)
    MergeFrom(*source);
  }
}

void lhd_areainfo::MergeFrom(const lhd_areainfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.lhd_areainfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      area_ = from.area_;
    }
    if (cached_has_bits & 0x00000002u) {
      pour_ = from.pour_;
    }
    if (cached_has_bits & 0x00000004u) {
      cards_ = from.cards_;
    }
    if (cached_has_bits & 0x00000008u) {
      chestarea_ = from.chestarea_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void lhd_areainfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.lhd_areainfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lhd_areainfo::CopyFrom(const lhd_areainfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.lhd_areainfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lhd_areainfo::IsInitialized() const {
  return true;
}

void lhd_areainfo::Swap(lhd_areainfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void lhd_areainfo::InternalSwap(lhd_areainfo* other) {
  using std::swap;
  swap(area_, other->area_);
  swap(pour_, other->pour_);
  swap(cards_, other->cards_);
  swap(chestarea_, other->chestarea_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata lhd_areainfo::GetMetadata() const {
  protobuf_st_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_st_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void lhd_arearate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int lhd_arearate::kLongRateFieldNumber;
const int lhd_arearate::kHuRateFieldNumber;
const int lhd_arearate::kHeRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

lhd_arearate::lhd_arearate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_st_5flhd_2eproto::scc_info_lhd_arearate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.lhd_arearate)
}
lhd_arearate::lhd_arearate(const lhd_arearate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&long_rate_, &from.long_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&he_rate_) -
    reinterpret_cast<char*>(&long_rate_)) + sizeof(he_rate_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.lhd_arearate)
}

void lhd_arearate::SharedCtor() {
  ::memset(&long_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&he_rate_) -
      reinterpret_cast<char*>(&long_rate_)) + sizeof(he_rate_));
}

lhd_arearate::~lhd_arearate() {
  // @@protoc_insertion_point(destructor:NFMsg.lhd_arearate)
  SharedDtor();
}

void lhd_arearate::SharedDtor() {
}

void lhd_arearate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* lhd_arearate::descriptor() {
  ::protobuf_st_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_st_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const lhd_arearate& lhd_arearate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_st_5flhd_2eproto::scc_info_lhd_arearate.base);
  return *internal_default_instance();
}


void lhd_arearate::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.lhd_arearate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&long_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&he_rate_) -
        reinterpret_cast<char*>(&long_rate_)) + sizeof(he_rate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool lhd_arearate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.lhd_arearate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float long_rate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_long_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &long_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float hu_rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_hu_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hu_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float he_rate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_he_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &he_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.lhd_arearate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.lhd_arearate)
  return false;
#undef DO_
}

void lhd_arearate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.lhd_arearate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float long_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->long_rate(), output);
  }

  // optional float hu_rate = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->hu_rate(), output);
  }

  // optional float he_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->he_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.lhd_arearate)
}

::google::protobuf::uint8* lhd_arearate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.lhd_arearate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float long_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->long_rate(), target);
  }

  // optional float hu_rate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->hu_rate(), target);
  }

  // optional float he_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->he_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.lhd_arearate)
  return target;
}

size_t lhd_arearate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.lhd_arearate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float long_rate = 1;
    if (has_long_rate()) {
      total_size += 1 + 4;
    }

    // optional float hu_rate = 2;
    if (has_hu_rate()) {
      total_size += 1 + 4;
    }

    // optional float he_rate = 3;
    if (has_he_rate()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void lhd_arearate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.lhd_arearate)
  GOOGLE_DCHECK_NE(&from, this);
  const lhd_arearate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const lhd_arearate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.lhd_arearate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.lhd_arearate)
    MergeFrom(*source);
  }
}

void lhd_arearate::MergeFrom(const lhd_arearate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.lhd_arearate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      long_rate_ = from.long_rate_;
    }
    if (cached_has_bits & 0x00000002u) {
      hu_rate_ = from.hu_rate_;
    }
    if (cached_has_bits & 0x00000004u) {
      he_rate_ = from.he_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void lhd_arearate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.lhd_arearate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lhd_arearate::CopyFrom(const lhd_arearate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.lhd_arearate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lhd_arearate::IsInitialized() const {
  return true;
}

void lhd_arearate::Swap(lhd_arearate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void lhd_arearate::InternalSwap(lhd_arearate* other) {
  using std::swap;
  swap(long_rate_, other->long_rate_);
  swap(hu_rate_, other->hu_rate_);
  swap(he_rate_, other->he_rate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata lhd_arearate::GetMetadata() const {
  protobuf_st_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_st_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void lhd_tableconfiginfo::InitAsDefaultInstance() {
  ::NFMsg::_lhd_tableconfiginfo_default_instance_._instance.get_mutable()->rate_ = const_cast< ::NFMsg::lhd_arearate*>(
      ::NFMsg::lhd_arearate::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int lhd_tableconfiginfo::kMaxuserFieldNumber;
const int lhd_tableconfiginfo::kMaxpourFieldNumber;
const int lhd_tableconfiginfo::kPourtypeFieldNumber;
const int lhd_tableconfiginfo::kRateFieldNumber;
const int lhd_tableconfiginfo::kGamecountypeFieldNumber;
const int lhd_tableconfiginfo::kWaittimeFieldNumber;
const int lhd_tableconfiginfo::kAutonextFieldNumber;
const int lhd_tableconfiginfo::kChesttypeFieldNumber;
const int lhd_tableconfiginfo::kBanktypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

lhd_tableconfiginfo::lhd_tableconfiginfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_st_5flhd_2eproto::scc_info_lhd_tableconfiginfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.lhd_tableconfiginfo)
}
lhd_tableconfiginfo::lhd_tableconfiginfo(const lhd_tableconfiginfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      pourtype_(from.pourtype_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rate()) {
    rate_ = new ::NFMsg::lhd_arearate(*from.rate_);
  } else {
    rate_ = NULL;
  }
  ::memcpy(&maxuser_, &from.maxuser_,
    static_cast<size_t>(reinterpret_cast<char*>(&banktype_) -
    reinterpret_cast<char*>(&maxuser_)) + sizeof(banktype_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.lhd_tableconfiginfo)
}

void lhd_tableconfiginfo::SharedCtor() {
  ::memset(&rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&banktype_) -
      reinterpret_cast<char*>(&rate_)) + sizeof(banktype_));
}

lhd_tableconfiginfo::~lhd_tableconfiginfo() {
  // @@protoc_insertion_point(destructor:NFMsg.lhd_tableconfiginfo)
  SharedDtor();
}

void lhd_tableconfiginfo::SharedDtor() {
  if (this != internal_default_instance()) delete rate_;
}

void lhd_tableconfiginfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* lhd_tableconfiginfo::descriptor() {
  ::protobuf_st_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_st_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const lhd_tableconfiginfo& lhd_tableconfiginfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_st_5flhd_2eproto::scc_info_lhd_tableconfiginfo.base);
  return *internal_default_instance();
}


void lhd_tableconfiginfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.lhd_tableconfiginfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pourtype_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(rate_ != NULL);
    rate_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&maxuser_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&banktype_) -
        reinterpret_cast<char*>(&maxuser_)) + sizeof(banktype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool lhd_tableconfiginfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.lhd_tableconfiginfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 maxuser = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_maxuser();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxuser_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maxpour = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_maxpour();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxpour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 pourtype = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_pourtype())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pourtype())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .NFMsg.lhd_arearate rate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gamecountype = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_gamecountype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamecountype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 waittime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_waittime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waittime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool autonext = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_autonext();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autonext_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chesttype = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_chesttype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chesttype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 banktype = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_banktype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banktype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.lhd_tableconfiginfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.lhd_tableconfiginfo)
  return false;
#undef DO_
}

void lhd_tableconfiginfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.lhd_tableconfiginfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 maxuser = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxuser(), output);
  }

  // optional int32 maxpour = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxpour(), output);
  }

  // repeated int32 pourtype = 4;
  for (int i = 0, n = this->pourtype_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->pourtype(i), output);
  }

  // optional .NFMsg.lhd_arearate rate = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_rate(), output);
  }

  // optional int32 gamecountype = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gamecountype(), output);
  }

  // optional int32 waittime = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->waittime(), output);
  }

  // optional bool autonext = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->autonext(), output);
  }

  // optional int32 chesttype = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->chesttype(), output);
  }

  // optional int32 banktype = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->banktype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.lhd_tableconfiginfo)
}

::google::protobuf::uint8* lhd_tableconfiginfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.lhd_tableconfiginfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 maxuser = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxuser(), target);
  }

  // optional int32 maxpour = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxpour(), target);
  }

  // repeated int32 pourtype = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->pourtype_, target);

  // optional .NFMsg.lhd_arearate rate = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_rate(), deterministic, target);
  }

  // optional int32 gamecountype = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gamecountype(), target);
  }

  // optional int32 waittime = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->waittime(), target);
  }

  // optional bool autonext = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->autonext(), target);
  }

  // optional int32 chesttype = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->chesttype(), target);
  }

  // optional int32 banktype = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->banktype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.lhd_tableconfiginfo)
  return target;
}

size_t lhd_tableconfiginfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.lhd_tableconfiginfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 pourtype = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->pourtype_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->pourtype_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .NFMsg.lhd_arearate rate = 5;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rate_);
    }

    // optional int32 maxuser = 2;
    if (has_maxuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxuser());
    }

    // optional int32 maxpour = 3;
    if (has_maxpour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxpour());
    }

    // optional int32 gamecountype = 6;
    if (has_gamecountype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamecountype());
    }

    // optional int32 waittime = 7;
    if (has_waittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->waittime());
    }

    // optional bool autonext = 8;
    if (has_autonext()) {
      total_size += 1 + 1;
    }

    // optional int32 chesttype = 9;
    if (has_chesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chesttype());
    }

    // optional int32 banktype = 10;
    if (has_banktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banktype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void lhd_tableconfiginfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.lhd_tableconfiginfo)
  GOOGLE_DCHECK_NE(&from, this);
  const lhd_tableconfiginfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const lhd_tableconfiginfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.lhd_tableconfiginfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.lhd_tableconfiginfo)
    MergeFrom(*source);
  }
}

void lhd_tableconfiginfo::MergeFrom(const lhd_tableconfiginfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.lhd_tableconfiginfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pourtype_.MergeFrom(from.pourtype_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_rate()->::NFMsg::lhd_arearate::MergeFrom(from.rate());
    }
    if (cached_has_bits & 0x00000002u) {
      maxuser_ = from.maxuser_;
    }
    if (cached_has_bits & 0x00000004u) {
      maxpour_ = from.maxpour_;
    }
    if (cached_has_bits & 0x00000008u) {
      gamecountype_ = from.gamecountype_;
    }
    if (cached_has_bits & 0x00000010u) {
      waittime_ = from.waittime_;
    }
    if (cached_has_bits & 0x00000020u) {
      autonext_ = from.autonext_;
    }
    if (cached_has_bits & 0x00000040u) {
      chesttype_ = from.chesttype_;
    }
    if (cached_has_bits & 0x00000080u) {
      banktype_ = from.banktype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void lhd_tableconfiginfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.lhd_tableconfiginfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lhd_tableconfiginfo::CopyFrom(const lhd_tableconfiginfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.lhd_tableconfiginfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lhd_tableconfiginfo::IsInitialized() const {
  return true;
}

void lhd_tableconfiginfo::Swap(lhd_tableconfiginfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void lhd_tableconfiginfo::InternalSwap(lhd_tableconfiginfo* other) {
  using std::swap;
  pourtype_.InternalSwap(&other->pourtype_);
  swap(rate_, other->rate_);
  swap(maxuser_, other->maxuser_);
  swap(maxpour_, other->maxpour_);
  swap(gamecountype_, other->gamecountype_);
  swap(waittime_, other->waittime_);
  swap(autonext_, other->autonext_);
  swap(chesttype_, other->chesttype_);
  swap(banktype_, other->banktype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata lhd_tableconfiginfo::GetMetadata() const {
  protobuf_st_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_st_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void lhd_tableinfo::InitAsDefaultInstance() {
  ::NFMsg::_lhd_tableinfo_default_instance_._instance.get_mutable()->configinfo_ = const_cast< ::NFMsg::lhd_tableconfiginfo*>(
      ::NFMsg::lhd_tableconfiginfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int lhd_tableinfo::kTableidFieldNumber;
const int lhd_tableinfo::kFrameidFieldNumber;
const int lhd_tableinfo::kStateFieldNumber;
const int lhd_tableinfo::kTimemarkFieldNumber;
const int lhd_tableinfo::kConfiginfoFieldNumber;
const int lhd_tableinfo::kBankeridFieldNumber;
const int lhd_tableinfo::kSitusersFieldNumber;
const int lhd_tableinfo::kStandusersFieldNumber;
const int lhd_tableinfo::kAreainfoFieldNumber;
const int lhd_tableinfo::kUsernumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

lhd_tableinfo::lhd_tableinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_st_5flhd_2eproto::scc_info_lhd_tableinfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.lhd_tableinfo)
}
lhd_tableinfo::lhd_tableinfo(const lhd_tableinfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      situsers_(from.situsers_),
      standusers_(from.standusers_),
      areainfo_(from.areainfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_configinfo()) {
    configinfo_ = new ::NFMsg::lhd_tableconfiginfo(*from.configinfo_);
  } else {
    configinfo_ = NULL;
  }
  ::memcpy(&tableid_, &from.tableid_,
    static_cast<size_t>(reinterpret_cast<char*>(&usernum_) -
    reinterpret_cast<char*>(&tableid_)) + sizeof(usernum_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.lhd_tableinfo)
}

void lhd_tableinfo::SharedCtor() {
  ::memset(&configinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usernum_) -
      reinterpret_cast<char*>(&configinfo_)) + sizeof(usernum_));
}

lhd_tableinfo::~lhd_tableinfo() {
  // @@protoc_insertion_point(destructor:NFMsg.lhd_tableinfo)
  SharedDtor();
}

void lhd_tableinfo::SharedDtor() {
  if (this != internal_default_instance()) delete configinfo_;
}

void lhd_tableinfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* lhd_tableinfo::descriptor() {
  ::protobuf_st_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_st_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const lhd_tableinfo& lhd_tableinfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_st_5flhd_2eproto::scc_info_lhd_tableinfo.base);
  return *internal_default_instance();
}


void lhd_tableinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.lhd_tableinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  situsers_.Clear();
  standusers_.Clear();
  areainfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(configinfo_ != NULL);
    configinfo_->Clear();
  }
  if (cached_has_bits & 126u) {
    ::memset(&tableid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usernum_) -
        reinterpret_cast<char*>(&tableid_)) + sizeof(usernum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool lhd_tableinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.lhd_tableinfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_tableid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 frameid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_frameid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 timemark = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_timemark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .NFMsg.lhd_tableconfiginfo configinfo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_configinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bankerid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_bankerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.lhd_userinfo situsers = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_situsers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.lhd_userinfo standusers = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_standusers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.lhd_areainfo areainfo = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_areainfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 usernum = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_usernum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usernum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.lhd_tableinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.lhd_tableinfo)
  return false;
#undef DO_
}

void lhd_tableinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.lhd_tableinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tableid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 frameid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frameid(), output);
  }

  // optional int32 state = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional int32 timemark = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timemark(), output);
  }

  // optional .NFMsg.lhd_tableconfiginfo configinfo = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_configinfo(), output);
  }

  // optional int32 bankerid = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bankerid(), output);
  }

  // repeated .NFMsg.lhd_userinfo situsers = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->situsers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->situsers(static_cast<int>(i)),
      output);
  }

  // repeated .NFMsg.lhd_userinfo standusers = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->standusers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->standusers(static_cast<int>(i)),
      output);
  }

  // repeated .NFMsg.lhd_areainfo areainfo = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->areainfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->areainfo(static_cast<int>(i)),
      output);
  }

  // optional int32 usernum = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->usernum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.lhd_tableinfo)
}

::google::protobuf::uint8* lhd_tableinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.lhd_tableinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tableid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 frameid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->frameid(), target);
  }

  // optional int32 state = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // optional int32 timemark = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timemark(), target);
  }

  // optional .NFMsg.lhd_tableconfiginfo configinfo = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_configinfo(), deterministic, target);
  }

  // optional int32 bankerid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bankerid(), target);
  }

  // repeated .NFMsg.lhd_userinfo situsers = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->situsers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->situsers(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NFMsg.lhd_userinfo standusers = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->standusers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->standusers(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NFMsg.lhd_areainfo areainfo = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->areainfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->areainfo(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 usernum = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->usernum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.lhd_tableinfo)
  return target;
}

size_t lhd_tableinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.lhd_tableinfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .NFMsg.lhd_userinfo situsers = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->situsers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->situsers(static_cast<int>(i)));
    }
  }

  // repeated .NFMsg.lhd_userinfo standusers = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->standusers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->standusers(static_cast<int>(i)));
    }
  }

  // repeated .NFMsg.lhd_areainfo areainfo = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->areainfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->areainfo(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional .NFMsg.lhd_tableconfiginfo configinfo = 5;
    if (has_configinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *configinfo_);
    }

    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 frameid = 2;
    if (has_frameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameid());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 4;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

    // optional int32 bankerid = 6;
    if (has_bankerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerid());
    }

    // optional int32 usernum = 10;
    if (has_usernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usernum());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void lhd_tableinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.lhd_tableinfo)
  GOOGLE_DCHECK_NE(&from, this);
  const lhd_tableinfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const lhd_tableinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.lhd_tableinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.lhd_tableinfo)
    MergeFrom(*source);
  }
}

void lhd_tableinfo::MergeFrom(const lhd_tableinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.lhd_tableinfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  situsers_.MergeFrom(from.situsers_);
  standusers_.MergeFrom(from.standusers_);
  areainfo_.MergeFrom(from.areainfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_configinfo()->::NFMsg::lhd_tableconfiginfo::MergeFrom(from.configinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      tableid_ = from.tableid_;
    }
    if (cached_has_bits & 0x00000004u) {
      frameid_ = from.frameid_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000010u) {
      timemark_ = from.timemark_;
    }
    if (cached_has_bits & 0x00000020u) {
      bankerid_ = from.bankerid_;
    }
    if (cached_has_bits & 0x00000040u) {
      usernum_ = from.usernum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void lhd_tableinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.lhd_tableinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lhd_tableinfo::CopyFrom(const lhd_tableinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.lhd_tableinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lhd_tableinfo::IsInitialized() const {
  return true;
}

void lhd_tableinfo::Swap(lhd_tableinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void lhd_tableinfo::InternalSwap(lhd_tableinfo* other) {
  using std::swap;
  CastToBase(&situsers_)->InternalSwap(CastToBase(&other->situsers_));
  CastToBase(&standusers_)->InternalSwap(CastToBase(&other->standusers_));
  CastToBase(&areainfo_)->InternalSwap(CastToBase(&other->areainfo_));
  swap(configinfo_, other->configinfo_);
  swap(tableid_, other->tableid_);
  swap(frameid_, other->frameid_);
  swap(state_, other->state_);
  swap(timemark_, other->timemark_);
  swap(bankerid_, other->bankerid_);
  swap(usernum_, other->usernum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata lhd_tableinfo::GetMetadata() const {
  protobuf_st_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_st_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void lhd_usercountinfo::InitAsDefaultInstance() {
  ::NFMsg::_lhd_usercountinfo_default_instance_._instance.get_mutable()->userinfo_ = const_cast< ::NFMsg::playersimpleinfo*>(
      ::NFMsg::playersimpleinfo::internal_default_instance());
}
void lhd_usercountinfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->Clear();
  clear_has_userinfo();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int lhd_usercountinfo::kUserinfoFieldNumber;
const int lhd_usercountinfo::kRedscoreFieldNumber;
const int lhd_usercountinfo::kBlackscoreFieldNumber;
const int lhd_usercountinfo::kHescoreFieldNumber;
const int lhd_usercountinfo::kWinscoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

lhd_usercountinfo::lhd_usercountinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_st_5flhd_2eproto::scc_info_lhd_usercountinfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.lhd_usercountinfo)
}
lhd_usercountinfo::lhd_usercountinfo(const lhd_usercountinfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_userinfo()) {
    userinfo_ = new ::NFMsg::playersimpleinfo(*from.userinfo_);
  } else {
    userinfo_ = NULL;
  }
  ::memcpy(&redscore_, &from.redscore_,
    static_cast<size_t>(reinterpret_cast<char*>(&winscore_) -
    reinterpret_cast<char*>(&redscore_)) + sizeof(winscore_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.lhd_usercountinfo)
}

void lhd_usercountinfo::SharedCtor() {
  ::memset(&userinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&winscore_) -
      reinterpret_cast<char*>(&userinfo_)) + sizeof(winscore_));
}

lhd_usercountinfo::~lhd_usercountinfo() {
  // @@protoc_insertion_point(destructor:NFMsg.lhd_usercountinfo)
  SharedDtor();
}

void lhd_usercountinfo::SharedDtor() {
  if (this != internal_default_instance()) delete userinfo_;
}

void lhd_usercountinfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* lhd_usercountinfo::descriptor() {
  ::protobuf_st_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_st_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const lhd_usercountinfo& lhd_usercountinfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_st_5flhd_2eproto::scc_info_lhd_usercountinfo.base);
  return *internal_default_instance();
}


void lhd_usercountinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.lhd_usercountinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(userinfo_ != NULL);
    userinfo_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&redscore_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&winscore_) -
        reinterpret_cast<char*>(&redscore_)) + sizeof(winscore_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool lhd_usercountinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.lhd_usercountinfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NFMsg.playersimpleinfo userinfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 redscore = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_redscore();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &redscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 blackscore = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_blackscore();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blackscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hescore = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_hescore();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hescore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 winscore = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_winscore();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.lhd_usercountinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.lhd_usercountinfo)
  return false;
#undef DO_
}

void lhd_usercountinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.lhd_usercountinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .NFMsg.playersimpleinfo userinfo = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_userinfo(), output);
  }

  // optional int32 redscore = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->redscore(), output);
  }

  // optional int32 blackscore = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->blackscore(), output);
  }

  // optional int32 hescore = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hescore(), output);
  }

  // optional int32 winscore = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->winscore(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.lhd_usercountinfo)
}

::google::protobuf::uint8* lhd_usercountinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.lhd_usercountinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .NFMsg.playersimpleinfo userinfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_userinfo(), deterministic, target);
  }

  // optional int32 redscore = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->redscore(), target);
  }

  // optional int32 blackscore = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->blackscore(), target);
  }

  // optional int32 hescore = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hescore(), target);
  }

  // optional int32 winscore = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->winscore(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.lhd_usercountinfo)
  return target;
}

size_t lhd_usercountinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.lhd_usercountinfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .NFMsg.playersimpleinfo userinfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *userinfo_);
    }

    // optional int32 redscore = 2;
    if (has_redscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->redscore());
    }

    // optional int32 blackscore = 3;
    if (has_blackscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blackscore());
    }

    // optional int32 hescore = 4;
    if (has_hescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hescore());
    }

    // optional int32 winscore = 5;
    if (has_winscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winscore());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void lhd_usercountinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.lhd_usercountinfo)
  GOOGLE_DCHECK_NE(&from, this);
  const lhd_usercountinfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const lhd_usercountinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.lhd_usercountinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.lhd_usercountinfo)
    MergeFrom(*source);
  }
}

void lhd_usercountinfo::MergeFrom(const lhd_usercountinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.lhd_usercountinfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_userinfo()->::NFMsg::playersimpleinfo::MergeFrom(from.userinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      redscore_ = from.redscore_;
    }
    if (cached_has_bits & 0x00000004u) {
      blackscore_ = from.blackscore_;
    }
    if (cached_has_bits & 0x00000008u) {
      hescore_ = from.hescore_;
    }
    if (cached_has_bits & 0x00000010u) {
      winscore_ = from.winscore_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void lhd_usercountinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.lhd_usercountinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lhd_usercountinfo::CopyFrom(const lhd_usercountinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.lhd_usercountinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lhd_usercountinfo::IsInitialized() const {
  return true;
}

void lhd_usercountinfo::Swap(lhd_usercountinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void lhd_usercountinfo::InternalSwap(lhd_usercountinfo* other) {
  using std::swap;
  swap(userinfo_, other->userinfo_);
  swap(redscore_, other->redscore_);
  swap(blackscore_, other->blackscore_);
  swap(hescore_, other->hescore_);
  swap(winscore_, other->winscore_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata lhd_usercountinfo::GetMetadata() const {
  protobuf_st_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_st_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void lhd_gamecount::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int lhd_gamecount::kTimeFieldNumber;
const int lhd_gamecount::kAreaFieldNumber;
const int lhd_gamecount::kWinuserFieldNumber;
const int lhd_gamecount::kBankidFieldNumber;
const int lhd_gamecount::kTimemarkFieldNumber;
const int lhd_gamecount::kPourinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

lhd_gamecount::lhd_gamecount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_st_5flhd_2eproto::scc_info_lhd_gamecount.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.lhd_gamecount)
}
lhd_gamecount::lhd_gamecount(const lhd_gamecount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      pourinfo_(from.pourinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&timemark_) -
    reinterpret_cast<char*>(&time_)) + sizeof(timemark_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.lhd_gamecount)
}

void lhd_gamecount::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timemark_) -
      reinterpret_cast<char*>(&time_)) + sizeof(timemark_));
}

lhd_gamecount::~lhd_gamecount() {
  // @@protoc_insertion_point(destructor:NFMsg.lhd_gamecount)
  SharedDtor();
}

void lhd_gamecount::SharedDtor() {
}

void lhd_gamecount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* lhd_gamecount::descriptor() {
  ::protobuf_st_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_st_5flhd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const lhd_gamecount& lhd_gamecount::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_st_5flhd_2eproto::scc_info_lhd_gamecount.base);
  return *internal_default_instance();
}


void lhd_gamecount::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.lhd_gamecount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pourinfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timemark_) -
        reinterpret_cast<char*>(&time_)) + sizeof(timemark_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool lhd_gamecount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.lhd_gamecount)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 area = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 winuser = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_winuser();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winuser_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bankid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_bankid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 timemark = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_timemark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.lhd_usercountinfo pourinfo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pourinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.lhd_gamecount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.lhd_gamecount)
  return false;
#undef DO_
}

void lhd_gamecount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.lhd_gamecount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 time = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  // optional int32 area = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->area(), output);
  }

  // optional int32 winuser = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->winuser(), output);
  }

  // optional int32 bankid = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bankid(), output);
  }

  // optional int32 timemark = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->timemark(), output);
  }

  // repeated .NFMsg.lhd_usercountinfo pourinfo = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pourinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->pourinfo(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.lhd_gamecount)
}

::google::protobuf::uint8* lhd_gamecount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.lhd_gamecount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  // optional int32 area = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->area(), target);
  }

  // optional int32 winuser = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->winuser(), target);
  }

  // optional int32 bankid = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bankid(), target);
  }

  // optional int32 timemark = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->timemark(), target);
  }

  // repeated .NFMsg.lhd_usercountinfo pourinfo = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pourinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->pourinfo(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.lhd_gamecount)
  return target;
}

size_t lhd_gamecount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.lhd_gamecount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .NFMsg.lhd_usercountinfo pourinfo = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->pourinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pourinfo(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 area = 3;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area());
    }

    // optional int32 winuser = 4;
    if (has_winuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winuser());
    }

    // optional int32 bankid = 5;
    if (has_bankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankid());
    }

    // optional int32 timemark = 6;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void lhd_gamecount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.lhd_gamecount)
  GOOGLE_DCHECK_NE(&from, this);
  const lhd_gamecount* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const lhd_gamecount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.lhd_gamecount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.lhd_gamecount)
    MergeFrom(*source);
  }
}

void lhd_gamecount::MergeFrom(const lhd_gamecount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.lhd_gamecount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pourinfo_.MergeFrom(from.pourinfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000002u) {
      area_ = from.area_;
    }
    if (cached_has_bits & 0x00000004u) {
      winuser_ = from.winuser_;
    }
    if (cached_has_bits & 0x00000008u) {
      bankid_ = from.bankid_;
    }
    if (cached_has_bits & 0x00000010u) {
      timemark_ = from.timemark_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void lhd_gamecount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.lhd_gamecount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lhd_gamecount::CopyFrom(const lhd_gamecount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.lhd_gamecount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lhd_gamecount::IsInitialized() const {
  return true;
}

void lhd_gamecount::Swap(lhd_gamecount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void lhd_gamecount::InternalSwap(lhd_gamecount* other) {
  using std::swap;
  CastToBase(&pourinfo_)->InternalSwap(CastToBase(&other->pourinfo_));
  swap(time_, other->time_);
  swap(area_, other->area_);
  swap(winuser_, other->winuser_);
  swap(bankid_, other->bankid_);
  swap(timemark_, other->timemark_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata lhd_gamecount::GetMetadata() const {
  protobuf_st_5flhd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_st_5flhd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NFMsg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::lhd_jetton* Arena::CreateMaybeMessage< ::NFMsg::lhd_jetton >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::lhd_jetton >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::lhd_userinfo* Arena::CreateMaybeMessage< ::NFMsg::lhd_userinfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::lhd_userinfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::lhd_areainfo* Arena::CreateMaybeMessage< ::NFMsg::lhd_areainfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::lhd_areainfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::lhd_arearate* Arena::CreateMaybeMessage< ::NFMsg::lhd_arearate >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::lhd_arearate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::lhd_tableconfiginfo* Arena::CreateMaybeMessage< ::NFMsg::lhd_tableconfiginfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::lhd_tableconfiginfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::lhd_tableinfo* Arena::CreateMaybeMessage< ::NFMsg::lhd_tableinfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::lhd_tableinfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::lhd_usercountinfo* Arena::CreateMaybeMessage< ::NFMsg::lhd_usercountinfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::lhd_usercountinfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::lhd_gamecount* Arena::CreateMaybeMessage< ::NFMsg::lhd_gamecount >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::lhd_gamecount >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
