// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_lhd.proto

#ifndef PROTOBUF_INCLUDED_st_5flhd_2eproto
#define PROTOBUF_INCLUDED_st_5flhd_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "st_human.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_st_5flhd_2eproto 

namespace protobuf_st_5flhd_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_st_5flhd_2eproto
namespace NFMsg {
class lhd_areainfo;
class lhd_areainfoDefaultTypeInternal;
extern lhd_areainfoDefaultTypeInternal _lhd_areainfo_default_instance_;
class lhd_arearate;
class lhd_arearateDefaultTypeInternal;
extern lhd_arearateDefaultTypeInternal _lhd_arearate_default_instance_;
class lhd_gamecount;
class lhd_gamecountDefaultTypeInternal;
extern lhd_gamecountDefaultTypeInternal _lhd_gamecount_default_instance_;
class lhd_jetton;
class lhd_jettonDefaultTypeInternal;
extern lhd_jettonDefaultTypeInternal _lhd_jetton_default_instance_;
class lhd_tableconfiginfo;
class lhd_tableconfiginfoDefaultTypeInternal;
extern lhd_tableconfiginfoDefaultTypeInternal _lhd_tableconfiginfo_default_instance_;
class lhd_tableinfo;
class lhd_tableinfoDefaultTypeInternal;
extern lhd_tableinfoDefaultTypeInternal _lhd_tableinfo_default_instance_;
class lhd_usercountinfo;
class lhd_usercountinfoDefaultTypeInternal;
extern lhd_usercountinfoDefaultTypeInternal _lhd_usercountinfo_default_instance_;
class lhd_userinfo;
class lhd_userinfoDefaultTypeInternal;
extern lhd_userinfoDefaultTypeInternal _lhd_userinfo_default_instance_;
}  // namespace NFMsg
namespace google {
namespace protobuf {
template<> ::NFMsg::lhd_areainfo* Arena::CreateMaybeMessage<::NFMsg::lhd_areainfo>(Arena*);
template<> ::NFMsg::lhd_arearate* Arena::CreateMaybeMessage<::NFMsg::lhd_arearate>(Arena*);
template<> ::NFMsg::lhd_gamecount* Arena::CreateMaybeMessage<::NFMsg::lhd_gamecount>(Arena*);
template<> ::NFMsg::lhd_jetton* Arena::CreateMaybeMessage<::NFMsg::lhd_jetton>(Arena*);
template<> ::NFMsg::lhd_tableconfiginfo* Arena::CreateMaybeMessage<::NFMsg::lhd_tableconfiginfo>(Arena*);
template<> ::NFMsg::lhd_tableinfo* Arena::CreateMaybeMessage<::NFMsg::lhd_tableinfo>(Arena*);
template<> ::NFMsg::lhd_usercountinfo* Arena::CreateMaybeMessage<::NFMsg::lhd_usercountinfo>(Arena*);
template<> ::NFMsg::lhd_userinfo* Arena::CreateMaybeMessage<::NFMsg::lhd_userinfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NFMsg {

enum lhd_state {
  lhd_state_ready = 1,
  lhd_state_rushbanker = 2,
  lhd_state_commitbanker = 3,
  lhd_state_cheststart = 4,
  lhd_state_pour = 5,
  lhd_state_lightcard = 6,
  lhd_state_count = 7,
  lhd_state_end = 8
};
bool lhd_state_IsValid(int value);
const lhd_state lhd_state_MIN = lhd_state_ready;
const lhd_state lhd_state_MAX = lhd_state_end;
const int lhd_state_ARRAYSIZE = lhd_state_MAX + 1;

const ::google::protobuf::EnumDescriptor* lhd_state_descriptor();
inline const ::std::string& lhd_state_Name(lhd_state value) {
  return ::google::protobuf::internal::NameOfEnum(
    lhd_state_descriptor(), value);
}
inline bool lhd_state_Parse(
    const ::std::string& name, lhd_state* value) {
  return ::google::protobuf::internal::ParseNamedEnum<lhd_state>(
    lhd_state_descriptor(), name, value);
}
enum lhd_area {
  lhd_area_long = 1,
  lhd_area_hu = 2,
  lhd_area_he = 3
};
bool lhd_area_IsValid(int value);
const lhd_area lhd_area_MIN = lhd_area_long;
const lhd_area lhd_area_MAX = lhd_area_he;
const int lhd_area_ARRAYSIZE = lhd_area_MAX + 1;

const ::google::protobuf::EnumDescriptor* lhd_area_descriptor();
inline const ::std::string& lhd_area_Name(lhd_area value) {
  return ::google::protobuf::internal::NameOfEnum(
    lhd_area_descriptor(), value);
}
inline bool lhd_area_Parse(
    const ::std::string& name, lhd_area* value) {
  return ::google::protobuf::internal::ParseNamedEnum<lhd_area>(
    lhd_area_descriptor(), name, value);
}
// ===================================================================

class lhd_jetton : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.lhd_jetton) */ {
 public:
  lhd_jetton();
  virtual ~lhd_jetton();

  lhd_jetton(const lhd_jetton& from);

  inline lhd_jetton& operator=(const lhd_jetton& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  lhd_jetton(lhd_jetton&& from) noexcept
    : lhd_jetton() {
    *this = ::std::move(from);
  }

  inline lhd_jetton& operator=(lhd_jetton&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const lhd_jetton& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const lhd_jetton* internal_default_instance() {
    return reinterpret_cast<const lhd_jetton*>(
               &_lhd_jetton_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(lhd_jetton* other);
  friend void swap(lhd_jetton& a, lhd_jetton& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline lhd_jetton* New() const final {
    return CreateMaybeMessage<lhd_jetton>(NULL);
  }

  lhd_jetton* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<lhd_jetton>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const lhd_jetton& from);
  void MergeFrom(const lhd_jetton& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(lhd_jetton* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 pourtype = 2;
  bool has_pourtype() const;
  void clear_pourtype();
  static const int kPourtypeFieldNumber = 2;
  ::google::protobuf::int32 pourtype() const;
  void set_pourtype(::google::protobuf::int32 value);

  // optional int32 jetton = 3;
  bool has_jetton() const;
  void clear_jetton();
  static const int kJettonFieldNumber = 3;
  ::google::protobuf::int32 jetton() const;
  void set_jetton(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.lhd_jetton)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_pourtype();
  void clear_has_pourtype();
  void set_has_jetton();
  void clear_has_jetton();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 pourtype_;
  ::google::protobuf::int32 jetton_;
  friend struct ::protobuf_st_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class lhd_userinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.lhd_userinfo) */ {
 public:
  lhd_userinfo();
  virtual ~lhd_userinfo();

  lhd_userinfo(const lhd_userinfo& from);

  inline lhd_userinfo& operator=(const lhd_userinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  lhd_userinfo(lhd_userinfo&& from) noexcept
    : lhd_userinfo() {
    *this = ::std::move(from);
  }

  inline lhd_userinfo& operator=(lhd_userinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const lhd_userinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const lhd_userinfo* internal_default_instance() {
    return reinterpret_cast<const lhd_userinfo*>(
               &_lhd_userinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(lhd_userinfo* other);
  friend void swap(lhd_userinfo& a, lhd_userinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline lhd_userinfo* New() const final {
    return CreateMaybeMessage<lhd_userinfo>(NULL);
  }

  lhd_userinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<lhd_userinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const lhd_userinfo& from);
  void MergeFrom(const lhd_userinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(lhd_userinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .NFMsg.playersimpleinfo info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  private:
  const ::NFMsg::playersimpleinfo& _internal_info() const;
  public:
  const ::NFMsg::playersimpleinfo& info() const;
  ::NFMsg::playersimpleinfo* release_info();
  ::NFMsg::playersimpleinfo* mutable_info();
  void set_allocated_info(::NFMsg::playersimpleinfo* info);

  // optional int32 chair = 2;
  bool has_chair() const;
  void clear_chair();
  static const int kChairFieldNumber = 2;
  ::google::protobuf::int32 chair() const;
  void set_chair(::google::protobuf::int32 value);

  // optional int32 alljetton = 3;
  bool has_alljetton() const;
  void clear_alljetton();
  static const int kAlljettonFieldNumber = 3;
  ::google::protobuf::int32 alljetton() const;
  void set_alljetton(::google::protobuf::int32 value);

  // optional int32 rush = 4;
  bool has_rush() const;
  void clear_rush();
  static const int kRushFieldNumber = 4;
  ::google::protobuf::int32 rush() const;
  void set_rush(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.lhd_userinfo)
 private:
  void set_has_info();
  void clear_has_info();
  void set_has_chair();
  void clear_has_chair();
  void set_has_alljetton();
  void clear_has_alljetton();
  void set_has_rush();
  void clear_has_rush();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::NFMsg::playersimpleinfo* info_;
  ::google::protobuf::int32 chair_;
  ::google::protobuf::int32 alljetton_;
  ::google::protobuf::int32 rush_;
  friend struct ::protobuf_st_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class lhd_areainfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.lhd_areainfo) */ {
 public:
  lhd_areainfo();
  virtual ~lhd_areainfo();

  lhd_areainfo(const lhd_areainfo& from);

  inline lhd_areainfo& operator=(const lhd_areainfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  lhd_areainfo(lhd_areainfo&& from) noexcept
    : lhd_areainfo() {
    *this = ::std::move(from);
  }

  inline lhd_areainfo& operator=(lhd_areainfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const lhd_areainfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const lhd_areainfo* internal_default_instance() {
    return reinterpret_cast<const lhd_areainfo*>(
               &_lhd_areainfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(lhd_areainfo* other);
  friend void swap(lhd_areainfo& a, lhd_areainfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline lhd_areainfo* New() const final {
    return CreateMaybeMessage<lhd_areainfo>(NULL);
  }

  lhd_areainfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<lhd_areainfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const lhd_areainfo& from);
  void MergeFrom(const lhd_areainfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(lhd_areainfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 area = 1;
  bool has_area() const;
  void clear_area();
  static const int kAreaFieldNumber = 1;
  ::google::protobuf::int32 area() const;
  void set_area(::google::protobuf::int32 value);

  // optional int32 pour = 2;
  bool has_pour() const;
  void clear_pour();
  static const int kPourFieldNumber = 2;
  ::google::protobuf::int32 pour() const;
  void set_pour(::google::protobuf::int32 value);

  // optional int32 cards = 3;
  bool has_cards() const;
  void clear_cards();
  static const int kCardsFieldNumber = 3;
  ::google::protobuf::int32 cards() const;
  void set_cards(::google::protobuf::int32 value);

  // optional int32 chestarea = 5;
  bool has_chestarea() const;
  void clear_chestarea();
  static const int kChestareaFieldNumber = 5;
  ::google::protobuf::int32 chestarea() const;
  void set_chestarea(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.lhd_areainfo)
 private:
  void set_has_area();
  void clear_has_area();
  void set_has_pour();
  void clear_has_pour();
  void set_has_cards();
  void clear_has_cards();
  void set_has_chestarea();
  void clear_has_chestarea();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 area_;
  ::google::protobuf::int32 pour_;
  ::google::protobuf::int32 cards_;
  ::google::protobuf::int32 chestarea_;
  friend struct ::protobuf_st_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class lhd_arearate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.lhd_arearate) */ {
 public:
  lhd_arearate();
  virtual ~lhd_arearate();

  lhd_arearate(const lhd_arearate& from);

  inline lhd_arearate& operator=(const lhd_arearate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  lhd_arearate(lhd_arearate&& from) noexcept
    : lhd_arearate() {
    *this = ::std::move(from);
  }

  inline lhd_arearate& operator=(lhd_arearate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const lhd_arearate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const lhd_arearate* internal_default_instance() {
    return reinterpret_cast<const lhd_arearate*>(
               &_lhd_arearate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(lhd_arearate* other);
  friend void swap(lhd_arearate& a, lhd_arearate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline lhd_arearate* New() const final {
    return CreateMaybeMessage<lhd_arearate>(NULL);
  }

  lhd_arearate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<lhd_arearate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const lhd_arearate& from);
  void MergeFrom(const lhd_arearate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(lhd_arearate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float long_rate = 1;
  bool has_long_rate() const;
  void clear_long_rate();
  static const int kLongRateFieldNumber = 1;
  float long_rate() const;
  void set_long_rate(float value);

  // optional float hu_rate = 2;
  bool has_hu_rate() const;
  void clear_hu_rate();
  static const int kHuRateFieldNumber = 2;
  float hu_rate() const;
  void set_hu_rate(float value);

  // optional float he_rate = 3;
  bool has_he_rate() const;
  void clear_he_rate();
  static const int kHeRateFieldNumber = 3;
  float he_rate() const;
  void set_he_rate(float value);

  // @@protoc_insertion_point(class_scope:NFMsg.lhd_arearate)
 private:
  void set_has_long_rate();
  void clear_has_long_rate();
  void set_has_hu_rate();
  void clear_has_hu_rate();
  void set_has_he_rate();
  void clear_has_he_rate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float long_rate_;
  float hu_rate_;
  float he_rate_;
  friend struct ::protobuf_st_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class lhd_tableconfiginfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.lhd_tableconfiginfo) */ {
 public:
  lhd_tableconfiginfo();
  virtual ~lhd_tableconfiginfo();

  lhd_tableconfiginfo(const lhd_tableconfiginfo& from);

  inline lhd_tableconfiginfo& operator=(const lhd_tableconfiginfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  lhd_tableconfiginfo(lhd_tableconfiginfo&& from) noexcept
    : lhd_tableconfiginfo() {
    *this = ::std::move(from);
  }

  inline lhd_tableconfiginfo& operator=(lhd_tableconfiginfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const lhd_tableconfiginfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const lhd_tableconfiginfo* internal_default_instance() {
    return reinterpret_cast<const lhd_tableconfiginfo*>(
               &_lhd_tableconfiginfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(lhd_tableconfiginfo* other);
  friend void swap(lhd_tableconfiginfo& a, lhd_tableconfiginfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline lhd_tableconfiginfo* New() const final {
    return CreateMaybeMessage<lhd_tableconfiginfo>(NULL);
  }

  lhd_tableconfiginfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<lhd_tableconfiginfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const lhd_tableconfiginfo& from);
  void MergeFrom(const lhd_tableconfiginfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(lhd_tableconfiginfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 pourtype = 4;
  int pourtype_size() const;
  void clear_pourtype();
  static const int kPourtypeFieldNumber = 4;
  ::google::protobuf::int32 pourtype(int index) const;
  void set_pourtype(int index, ::google::protobuf::int32 value);
  void add_pourtype(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pourtype() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pourtype();

  // optional .NFMsg.lhd_arearate rate = 5;
  bool has_rate() const;
  void clear_rate();
  static const int kRateFieldNumber = 5;
  private:
  const ::NFMsg::lhd_arearate& _internal_rate() const;
  public:
  const ::NFMsg::lhd_arearate& rate() const;
  ::NFMsg::lhd_arearate* release_rate();
  ::NFMsg::lhd_arearate* mutable_rate();
  void set_allocated_rate(::NFMsg::lhd_arearate* rate);

  // optional int32 maxuser = 2;
  bool has_maxuser() const;
  void clear_maxuser();
  static const int kMaxuserFieldNumber = 2;
  ::google::protobuf::int32 maxuser() const;
  void set_maxuser(::google::protobuf::int32 value);

  // optional int32 maxpour = 3;
  bool has_maxpour() const;
  void clear_maxpour();
  static const int kMaxpourFieldNumber = 3;
  ::google::protobuf::int32 maxpour() const;
  void set_maxpour(::google::protobuf::int32 value);

  // optional int32 gamecountype = 6;
  bool has_gamecountype() const;
  void clear_gamecountype();
  static const int kGamecountypeFieldNumber = 6;
  ::google::protobuf::int32 gamecountype() const;
  void set_gamecountype(::google::protobuf::int32 value);

  // optional int32 waittime = 7;
  bool has_waittime() const;
  void clear_waittime();
  static const int kWaittimeFieldNumber = 7;
  ::google::protobuf::int32 waittime() const;
  void set_waittime(::google::protobuf::int32 value);

  // optional bool autonext = 8;
  bool has_autonext() const;
  void clear_autonext();
  static const int kAutonextFieldNumber = 8;
  bool autonext() const;
  void set_autonext(bool value);

  // optional int32 chesttype = 9;
  bool has_chesttype() const;
  void clear_chesttype();
  static const int kChesttypeFieldNumber = 9;
  ::google::protobuf::int32 chesttype() const;
  void set_chesttype(::google::protobuf::int32 value);

  // optional int32 banktype = 10;
  bool has_banktype() const;
  void clear_banktype();
  static const int kBanktypeFieldNumber = 10;
  ::google::protobuf::int32 banktype() const;
  void set_banktype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.lhd_tableconfiginfo)
 private:
  void set_has_maxuser();
  void clear_has_maxuser();
  void set_has_maxpour();
  void clear_has_maxpour();
  void set_has_rate();
  void clear_has_rate();
  void set_has_gamecountype();
  void clear_has_gamecountype();
  void set_has_waittime();
  void clear_has_waittime();
  void set_has_autonext();
  void clear_has_autonext();
  void set_has_chesttype();
  void clear_has_chesttype();
  void set_has_banktype();
  void clear_has_banktype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pourtype_;
  ::NFMsg::lhd_arearate* rate_;
  ::google::protobuf::int32 maxuser_;
  ::google::protobuf::int32 maxpour_;
  ::google::protobuf::int32 gamecountype_;
  ::google::protobuf::int32 waittime_;
  bool autonext_;
  ::google::protobuf::int32 chesttype_;
  ::google::protobuf::int32 banktype_;
  friend struct ::protobuf_st_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class lhd_tableinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.lhd_tableinfo) */ {
 public:
  lhd_tableinfo();
  virtual ~lhd_tableinfo();

  lhd_tableinfo(const lhd_tableinfo& from);

  inline lhd_tableinfo& operator=(const lhd_tableinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  lhd_tableinfo(lhd_tableinfo&& from) noexcept
    : lhd_tableinfo() {
    *this = ::std::move(from);
  }

  inline lhd_tableinfo& operator=(lhd_tableinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const lhd_tableinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const lhd_tableinfo* internal_default_instance() {
    return reinterpret_cast<const lhd_tableinfo*>(
               &_lhd_tableinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(lhd_tableinfo* other);
  friend void swap(lhd_tableinfo& a, lhd_tableinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline lhd_tableinfo* New() const final {
    return CreateMaybeMessage<lhd_tableinfo>(NULL);
  }

  lhd_tableinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<lhd_tableinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const lhd_tableinfo& from);
  void MergeFrom(const lhd_tableinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(lhd_tableinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.lhd_userinfo situsers = 7;
  int situsers_size() const;
  void clear_situsers();
  static const int kSitusersFieldNumber = 7;
  ::NFMsg::lhd_userinfo* mutable_situsers(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_userinfo >*
      mutable_situsers();
  const ::NFMsg::lhd_userinfo& situsers(int index) const;
  ::NFMsg::lhd_userinfo* add_situsers();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_userinfo >&
      situsers() const;

  // repeated .NFMsg.lhd_userinfo standusers = 8;
  int standusers_size() const;
  void clear_standusers();
  static const int kStandusersFieldNumber = 8;
  ::NFMsg::lhd_userinfo* mutable_standusers(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_userinfo >*
      mutable_standusers();
  const ::NFMsg::lhd_userinfo& standusers(int index) const;
  ::NFMsg::lhd_userinfo* add_standusers();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_userinfo >&
      standusers() const;

  // repeated .NFMsg.lhd_areainfo areainfo = 9;
  int areainfo_size() const;
  void clear_areainfo();
  static const int kAreainfoFieldNumber = 9;
  ::NFMsg::lhd_areainfo* mutable_areainfo(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_areainfo >*
      mutable_areainfo();
  const ::NFMsg::lhd_areainfo& areainfo(int index) const;
  ::NFMsg::lhd_areainfo* add_areainfo();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_areainfo >&
      areainfo() const;

  // optional .NFMsg.lhd_tableconfiginfo configinfo = 5;
  bool has_configinfo() const;
  void clear_configinfo();
  static const int kConfiginfoFieldNumber = 5;
  private:
  const ::NFMsg::lhd_tableconfiginfo& _internal_configinfo() const;
  public:
  const ::NFMsg::lhd_tableconfiginfo& configinfo() const;
  ::NFMsg::lhd_tableconfiginfo* release_configinfo();
  ::NFMsg::lhd_tableconfiginfo* mutable_configinfo();
  void set_allocated_configinfo(::NFMsg::lhd_tableconfiginfo* configinfo);

  // optional int32 tableid = 1;
  bool has_tableid() const;
  void clear_tableid();
  static const int kTableidFieldNumber = 1;
  ::google::protobuf::int32 tableid() const;
  void set_tableid(::google::protobuf::int32 value);

  // optional int32 frameid = 2;
  bool has_frameid() const;
  void clear_frameid();
  static const int kFrameidFieldNumber = 2;
  ::google::protobuf::int32 frameid() const;
  void set_frameid(::google::protobuf::int32 value);

  // optional int32 state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // optional int32 timemark = 4;
  bool has_timemark() const;
  void clear_timemark();
  static const int kTimemarkFieldNumber = 4;
  ::google::protobuf::int32 timemark() const;
  void set_timemark(::google::protobuf::int32 value);

  // optional int32 bankerid = 6;
  bool has_bankerid() const;
  void clear_bankerid();
  static const int kBankeridFieldNumber = 6;
  ::google::protobuf::int32 bankerid() const;
  void set_bankerid(::google::protobuf::int32 value);

  // optional int32 usernum = 10;
  bool has_usernum() const;
  void clear_usernum();
  static const int kUsernumFieldNumber = 10;
  ::google::protobuf::int32 usernum() const;
  void set_usernum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.lhd_tableinfo)
 private:
  void set_has_tableid();
  void clear_has_tableid();
  void set_has_frameid();
  void clear_has_frameid();
  void set_has_state();
  void clear_has_state();
  void set_has_timemark();
  void clear_has_timemark();
  void set_has_configinfo();
  void clear_has_configinfo();
  void set_has_bankerid();
  void clear_has_bankerid();
  void set_has_usernum();
  void clear_has_usernum();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_userinfo > situsers_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_userinfo > standusers_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_areainfo > areainfo_;
  ::NFMsg::lhd_tableconfiginfo* configinfo_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 frameid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 timemark_;
  ::google::protobuf::int32 bankerid_;
  ::google::protobuf::int32 usernum_;
  friend struct ::protobuf_st_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class lhd_usercountinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.lhd_usercountinfo) */ {
 public:
  lhd_usercountinfo();
  virtual ~lhd_usercountinfo();

  lhd_usercountinfo(const lhd_usercountinfo& from);

  inline lhd_usercountinfo& operator=(const lhd_usercountinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  lhd_usercountinfo(lhd_usercountinfo&& from) noexcept
    : lhd_usercountinfo() {
    *this = ::std::move(from);
  }

  inline lhd_usercountinfo& operator=(lhd_usercountinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const lhd_usercountinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const lhd_usercountinfo* internal_default_instance() {
    return reinterpret_cast<const lhd_usercountinfo*>(
               &_lhd_usercountinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(lhd_usercountinfo* other);
  friend void swap(lhd_usercountinfo& a, lhd_usercountinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline lhd_usercountinfo* New() const final {
    return CreateMaybeMessage<lhd_usercountinfo>(NULL);
  }

  lhd_usercountinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<lhd_usercountinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const lhd_usercountinfo& from);
  void MergeFrom(const lhd_usercountinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(lhd_usercountinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .NFMsg.playersimpleinfo userinfo = 1;
  bool has_userinfo() const;
  void clear_userinfo();
  static const int kUserinfoFieldNumber = 1;
  private:
  const ::NFMsg::playersimpleinfo& _internal_userinfo() const;
  public:
  const ::NFMsg::playersimpleinfo& userinfo() const;
  ::NFMsg::playersimpleinfo* release_userinfo();
  ::NFMsg::playersimpleinfo* mutable_userinfo();
  void set_allocated_userinfo(::NFMsg::playersimpleinfo* userinfo);

  // optional int32 redscore = 2;
  bool has_redscore() const;
  void clear_redscore();
  static const int kRedscoreFieldNumber = 2;
  ::google::protobuf::int32 redscore() const;
  void set_redscore(::google::protobuf::int32 value);

  // optional int32 blackscore = 3;
  bool has_blackscore() const;
  void clear_blackscore();
  static const int kBlackscoreFieldNumber = 3;
  ::google::protobuf::int32 blackscore() const;
  void set_blackscore(::google::protobuf::int32 value);

  // optional int32 hescore = 4;
  bool has_hescore() const;
  void clear_hescore();
  static const int kHescoreFieldNumber = 4;
  ::google::protobuf::int32 hescore() const;
  void set_hescore(::google::protobuf::int32 value);

  // optional int32 winscore = 5;
  bool has_winscore() const;
  void clear_winscore();
  static const int kWinscoreFieldNumber = 5;
  ::google::protobuf::int32 winscore() const;
  void set_winscore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.lhd_usercountinfo)
 private:
  void set_has_userinfo();
  void clear_has_userinfo();
  void set_has_redscore();
  void clear_has_redscore();
  void set_has_blackscore();
  void clear_has_blackscore();
  void set_has_hescore();
  void clear_has_hescore();
  void set_has_winscore();
  void clear_has_winscore();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::NFMsg::playersimpleinfo* userinfo_;
  ::google::protobuf::int32 redscore_;
  ::google::protobuf::int32 blackscore_;
  ::google::protobuf::int32 hescore_;
  ::google::protobuf::int32 winscore_;
  friend struct ::protobuf_st_5flhd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class lhd_gamecount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.lhd_gamecount) */ {
 public:
  lhd_gamecount();
  virtual ~lhd_gamecount();

  lhd_gamecount(const lhd_gamecount& from);

  inline lhd_gamecount& operator=(const lhd_gamecount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  lhd_gamecount(lhd_gamecount&& from) noexcept
    : lhd_gamecount() {
    *this = ::std::move(from);
  }

  inline lhd_gamecount& operator=(lhd_gamecount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const lhd_gamecount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const lhd_gamecount* internal_default_instance() {
    return reinterpret_cast<const lhd_gamecount*>(
               &_lhd_gamecount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(lhd_gamecount* other);
  friend void swap(lhd_gamecount& a, lhd_gamecount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline lhd_gamecount* New() const final {
    return CreateMaybeMessage<lhd_gamecount>(NULL);
  }

  lhd_gamecount* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<lhd_gamecount>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const lhd_gamecount& from);
  void MergeFrom(const lhd_gamecount& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(lhd_gamecount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.lhd_usercountinfo pourinfo = 7;
  int pourinfo_size() const;
  void clear_pourinfo();
  static const int kPourinfoFieldNumber = 7;
  ::NFMsg::lhd_usercountinfo* mutable_pourinfo(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_usercountinfo >*
      mutable_pourinfo();
  const ::NFMsg::lhd_usercountinfo& pourinfo(int index) const;
  ::NFMsg::lhd_usercountinfo* add_pourinfo();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_usercountinfo >&
      pourinfo() const;

  // optional int32 time = 2;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // optional int32 area = 3;
  bool has_area() const;
  void clear_area();
  static const int kAreaFieldNumber = 3;
  ::google::protobuf::int32 area() const;
  void set_area(::google::protobuf::int32 value);

  // optional int32 winuser = 4;
  bool has_winuser() const;
  void clear_winuser();
  static const int kWinuserFieldNumber = 4;
  ::google::protobuf::int32 winuser() const;
  void set_winuser(::google::protobuf::int32 value);

  // optional int32 bankid = 5;
  bool has_bankid() const;
  void clear_bankid();
  static const int kBankidFieldNumber = 5;
  ::google::protobuf::int32 bankid() const;
  void set_bankid(::google::protobuf::int32 value);

  // optional int32 timemark = 6;
  bool has_timemark() const;
  void clear_timemark();
  static const int kTimemarkFieldNumber = 6;
  ::google::protobuf::int32 timemark() const;
  void set_timemark(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.lhd_gamecount)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_area();
  void clear_has_area();
  void set_has_winuser();
  void clear_has_winuser();
  void set_has_bankid();
  void clear_has_bankid();
  void set_has_timemark();
  void clear_has_timemark();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_usercountinfo > pourinfo_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 area_;
  ::google::protobuf::int32 winuser_;
  ::google::protobuf::int32 bankid_;
  ::google::protobuf::int32 timemark_;
  friend struct ::protobuf_st_5flhd_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// lhd_jetton

// optional int32 userid = 1;
inline bool lhd_jetton::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void lhd_jetton::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void lhd_jetton::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void lhd_jetton::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 lhd_jetton::userid() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_jetton.userid)
  return userid_;
}
inline void lhd_jetton::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_jetton.userid)
}

// optional int32 pourtype = 2;
inline bool lhd_jetton::has_pourtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void lhd_jetton::set_has_pourtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void lhd_jetton::clear_has_pourtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void lhd_jetton::clear_pourtype() {
  pourtype_ = 0;
  clear_has_pourtype();
}
inline ::google::protobuf::int32 lhd_jetton::pourtype() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_jetton.pourtype)
  return pourtype_;
}
inline void lhd_jetton::set_pourtype(::google::protobuf::int32 value) {
  set_has_pourtype();
  pourtype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_jetton.pourtype)
}

// optional int32 jetton = 3;
inline bool lhd_jetton::has_jetton() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void lhd_jetton::set_has_jetton() {
  _has_bits_[0] |= 0x00000004u;
}
inline void lhd_jetton::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void lhd_jetton::clear_jetton() {
  jetton_ = 0;
  clear_has_jetton();
}
inline ::google::protobuf::int32 lhd_jetton::jetton() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_jetton.jetton)
  return jetton_;
}
inline void lhd_jetton::set_jetton(::google::protobuf::int32 value) {
  set_has_jetton();
  jetton_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_jetton.jetton)
}

// -------------------------------------------------------------------

// lhd_userinfo

// optional .NFMsg.playersimpleinfo info = 1;
inline bool lhd_userinfo::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void lhd_userinfo::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void lhd_userinfo::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::NFMsg::playersimpleinfo& lhd_userinfo::_internal_info() const {
  return *info_;
}
inline const ::NFMsg::playersimpleinfo& lhd_userinfo::info() const {
  const ::NFMsg::playersimpleinfo* p = info_;
  // @@protoc_insertion_point(field_get:NFMsg.lhd_userinfo.info)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::playersimpleinfo*>(
      &::NFMsg::_playersimpleinfo_default_instance_);
}
inline ::NFMsg::playersimpleinfo* lhd_userinfo::release_info() {
  // @@protoc_insertion_point(field_release:NFMsg.lhd_userinfo.info)
  clear_has_info();
  ::NFMsg::playersimpleinfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline ::NFMsg::playersimpleinfo* lhd_userinfo::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::playersimpleinfo>(GetArenaNoVirtual());
    info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.lhd_userinfo.info)
  return info_;
}
inline void lhd_userinfo::set_allocated_info(::NFMsg::playersimpleinfo* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(info_);
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    set_has_info();
  } else {
    clear_has_info();
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.lhd_userinfo.info)
}

// optional int32 chair = 2;
inline bool lhd_userinfo::has_chair() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void lhd_userinfo::set_has_chair() {
  _has_bits_[0] |= 0x00000002u;
}
inline void lhd_userinfo::clear_has_chair() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void lhd_userinfo::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
inline ::google::protobuf::int32 lhd_userinfo::chair() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_userinfo.chair)
  return chair_;
}
inline void lhd_userinfo::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_userinfo.chair)
}

// optional int32 alljetton = 3;
inline bool lhd_userinfo::has_alljetton() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void lhd_userinfo::set_has_alljetton() {
  _has_bits_[0] |= 0x00000004u;
}
inline void lhd_userinfo::clear_has_alljetton() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void lhd_userinfo::clear_alljetton() {
  alljetton_ = 0;
  clear_has_alljetton();
}
inline ::google::protobuf::int32 lhd_userinfo::alljetton() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_userinfo.alljetton)
  return alljetton_;
}
inline void lhd_userinfo::set_alljetton(::google::protobuf::int32 value) {
  set_has_alljetton();
  alljetton_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_userinfo.alljetton)
}

// optional int32 rush = 4;
inline bool lhd_userinfo::has_rush() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void lhd_userinfo::set_has_rush() {
  _has_bits_[0] |= 0x00000008u;
}
inline void lhd_userinfo::clear_has_rush() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void lhd_userinfo::clear_rush() {
  rush_ = 0;
  clear_has_rush();
}
inline ::google::protobuf::int32 lhd_userinfo::rush() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_userinfo.rush)
  return rush_;
}
inline void lhd_userinfo::set_rush(::google::protobuf::int32 value) {
  set_has_rush();
  rush_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_userinfo.rush)
}

// -------------------------------------------------------------------

// lhd_areainfo

// optional int32 area = 1;
inline bool lhd_areainfo::has_area() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void lhd_areainfo::set_has_area() {
  _has_bits_[0] |= 0x00000001u;
}
inline void lhd_areainfo::clear_has_area() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void lhd_areainfo::clear_area() {
  area_ = 0;
  clear_has_area();
}
inline ::google::protobuf::int32 lhd_areainfo::area() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_areainfo.area)
  return area_;
}
inline void lhd_areainfo::set_area(::google::protobuf::int32 value) {
  set_has_area();
  area_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_areainfo.area)
}

// optional int32 pour = 2;
inline bool lhd_areainfo::has_pour() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void lhd_areainfo::set_has_pour() {
  _has_bits_[0] |= 0x00000002u;
}
inline void lhd_areainfo::clear_has_pour() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void lhd_areainfo::clear_pour() {
  pour_ = 0;
  clear_has_pour();
}
inline ::google::protobuf::int32 lhd_areainfo::pour() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_areainfo.pour)
  return pour_;
}
inline void lhd_areainfo::set_pour(::google::protobuf::int32 value) {
  set_has_pour();
  pour_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_areainfo.pour)
}

// optional int32 cards = 3;
inline bool lhd_areainfo::has_cards() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void lhd_areainfo::set_has_cards() {
  _has_bits_[0] |= 0x00000004u;
}
inline void lhd_areainfo::clear_has_cards() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void lhd_areainfo::clear_cards() {
  cards_ = 0;
  clear_has_cards();
}
inline ::google::protobuf::int32 lhd_areainfo::cards() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_areainfo.cards)
  return cards_;
}
inline void lhd_areainfo::set_cards(::google::protobuf::int32 value) {
  set_has_cards();
  cards_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_areainfo.cards)
}

// optional int32 chestarea = 5;
inline bool lhd_areainfo::has_chestarea() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void lhd_areainfo::set_has_chestarea() {
  _has_bits_[0] |= 0x00000008u;
}
inline void lhd_areainfo::clear_has_chestarea() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void lhd_areainfo::clear_chestarea() {
  chestarea_ = 0;
  clear_has_chestarea();
}
inline ::google::protobuf::int32 lhd_areainfo::chestarea() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_areainfo.chestarea)
  return chestarea_;
}
inline void lhd_areainfo::set_chestarea(::google::protobuf::int32 value) {
  set_has_chestarea();
  chestarea_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_areainfo.chestarea)
}

// -------------------------------------------------------------------

// lhd_arearate

// optional float long_rate = 1;
inline bool lhd_arearate::has_long_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void lhd_arearate::set_has_long_rate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void lhd_arearate::clear_has_long_rate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void lhd_arearate::clear_long_rate() {
  long_rate_ = 0;
  clear_has_long_rate();
}
inline float lhd_arearate::long_rate() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_arearate.long_rate)
  return long_rate_;
}
inline void lhd_arearate::set_long_rate(float value) {
  set_has_long_rate();
  long_rate_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_arearate.long_rate)
}

// optional float hu_rate = 2;
inline bool lhd_arearate::has_hu_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void lhd_arearate::set_has_hu_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void lhd_arearate::clear_has_hu_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void lhd_arearate::clear_hu_rate() {
  hu_rate_ = 0;
  clear_has_hu_rate();
}
inline float lhd_arearate::hu_rate() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_arearate.hu_rate)
  return hu_rate_;
}
inline void lhd_arearate::set_hu_rate(float value) {
  set_has_hu_rate();
  hu_rate_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_arearate.hu_rate)
}

// optional float he_rate = 3;
inline bool lhd_arearate::has_he_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void lhd_arearate::set_has_he_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void lhd_arearate::clear_has_he_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void lhd_arearate::clear_he_rate() {
  he_rate_ = 0;
  clear_has_he_rate();
}
inline float lhd_arearate::he_rate() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_arearate.he_rate)
  return he_rate_;
}
inline void lhd_arearate::set_he_rate(float value) {
  set_has_he_rate();
  he_rate_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_arearate.he_rate)
}

// -------------------------------------------------------------------

// lhd_tableconfiginfo

// optional int32 maxuser = 2;
inline bool lhd_tableconfiginfo::has_maxuser() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void lhd_tableconfiginfo::set_has_maxuser() {
  _has_bits_[0] |= 0x00000002u;
}
inline void lhd_tableconfiginfo::clear_has_maxuser() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void lhd_tableconfiginfo::clear_maxuser() {
  maxuser_ = 0;
  clear_has_maxuser();
}
inline ::google::protobuf::int32 lhd_tableconfiginfo::maxuser() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_tableconfiginfo.maxuser)
  return maxuser_;
}
inline void lhd_tableconfiginfo::set_maxuser(::google::protobuf::int32 value) {
  set_has_maxuser();
  maxuser_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_tableconfiginfo.maxuser)
}

// optional int32 maxpour = 3;
inline bool lhd_tableconfiginfo::has_maxpour() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void lhd_tableconfiginfo::set_has_maxpour() {
  _has_bits_[0] |= 0x00000004u;
}
inline void lhd_tableconfiginfo::clear_has_maxpour() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void lhd_tableconfiginfo::clear_maxpour() {
  maxpour_ = 0;
  clear_has_maxpour();
}
inline ::google::protobuf::int32 lhd_tableconfiginfo::maxpour() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_tableconfiginfo.maxpour)
  return maxpour_;
}
inline void lhd_tableconfiginfo::set_maxpour(::google::protobuf::int32 value) {
  set_has_maxpour();
  maxpour_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_tableconfiginfo.maxpour)
}

// repeated int32 pourtype = 4;
inline int lhd_tableconfiginfo::pourtype_size() const {
  return pourtype_.size();
}
inline void lhd_tableconfiginfo::clear_pourtype() {
  pourtype_.Clear();
}
inline ::google::protobuf::int32 lhd_tableconfiginfo::pourtype(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_tableconfiginfo.pourtype)
  return pourtype_.Get(index);
}
inline void lhd_tableconfiginfo::set_pourtype(int index, ::google::protobuf::int32 value) {
  pourtype_.Set(index, value);
  // @@protoc_insertion_point(field_set:NFMsg.lhd_tableconfiginfo.pourtype)
}
inline void lhd_tableconfiginfo::add_pourtype(::google::protobuf::int32 value) {
  pourtype_.Add(value);
  // @@protoc_insertion_point(field_add:NFMsg.lhd_tableconfiginfo.pourtype)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
lhd_tableconfiginfo::pourtype() const {
  // @@protoc_insertion_point(field_list:NFMsg.lhd_tableconfiginfo.pourtype)
  return pourtype_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
lhd_tableconfiginfo::mutable_pourtype() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.lhd_tableconfiginfo.pourtype)
  return &pourtype_;
}

// optional .NFMsg.lhd_arearate rate = 5;
inline bool lhd_tableconfiginfo::has_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void lhd_tableconfiginfo::set_has_rate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void lhd_tableconfiginfo::clear_has_rate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void lhd_tableconfiginfo::clear_rate() {
  if (rate_ != NULL) rate_->Clear();
  clear_has_rate();
}
inline const ::NFMsg::lhd_arearate& lhd_tableconfiginfo::_internal_rate() const {
  return *rate_;
}
inline const ::NFMsg::lhd_arearate& lhd_tableconfiginfo::rate() const {
  const ::NFMsg::lhd_arearate* p = rate_;
  // @@protoc_insertion_point(field_get:NFMsg.lhd_tableconfiginfo.rate)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::lhd_arearate*>(
      &::NFMsg::_lhd_arearate_default_instance_);
}
inline ::NFMsg::lhd_arearate* lhd_tableconfiginfo::release_rate() {
  // @@protoc_insertion_point(field_release:NFMsg.lhd_tableconfiginfo.rate)
  clear_has_rate();
  ::NFMsg::lhd_arearate* temp = rate_;
  rate_ = NULL;
  return temp;
}
inline ::NFMsg::lhd_arearate* lhd_tableconfiginfo::mutable_rate() {
  set_has_rate();
  if (rate_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::lhd_arearate>(GetArenaNoVirtual());
    rate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.lhd_tableconfiginfo.rate)
  return rate_;
}
inline void lhd_tableconfiginfo::set_allocated_rate(::NFMsg::lhd_arearate* rate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rate_;
  }
  if (rate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rate, submessage_arena);
    }
    set_has_rate();
  } else {
    clear_has_rate();
  }
  rate_ = rate;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.lhd_tableconfiginfo.rate)
}

// optional int32 gamecountype = 6;
inline bool lhd_tableconfiginfo::has_gamecountype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void lhd_tableconfiginfo::set_has_gamecountype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void lhd_tableconfiginfo::clear_has_gamecountype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void lhd_tableconfiginfo::clear_gamecountype() {
  gamecountype_ = 0;
  clear_has_gamecountype();
}
inline ::google::protobuf::int32 lhd_tableconfiginfo::gamecountype() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_tableconfiginfo.gamecountype)
  return gamecountype_;
}
inline void lhd_tableconfiginfo::set_gamecountype(::google::protobuf::int32 value) {
  set_has_gamecountype();
  gamecountype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_tableconfiginfo.gamecountype)
}

// optional int32 waittime = 7;
inline bool lhd_tableconfiginfo::has_waittime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void lhd_tableconfiginfo::set_has_waittime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void lhd_tableconfiginfo::clear_has_waittime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void lhd_tableconfiginfo::clear_waittime() {
  waittime_ = 0;
  clear_has_waittime();
}
inline ::google::protobuf::int32 lhd_tableconfiginfo::waittime() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_tableconfiginfo.waittime)
  return waittime_;
}
inline void lhd_tableconfiginfo::set_waittime(::google::protobuf::int32 value) {
  set_has_waittime();
  waittime_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_tableconfiginfo.waittime)
}

// optional bool autonext = 8;
inline bool lhd_tableconfiginfo::has_autonext() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void lhd_tableconfiginfo::set_has_autonext() {
  _has_bits_[0] |= 0x00000020u;
}
inline void lhd_tableconfiginfo::clear_has_autonext() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void lhd_tableconfiginfo::clear_autonext() {
  autonext_ = false;
  clear_has_autonext();
}
inline bool lhd_tableconfiginfo::autonext() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_tableconfiginfo.autonext)
  return autonext_;
}
inline void lhd_tableconfiginfo::set_autonext(bool value) {
  set_has_autonext();
  autonext_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_tableconfiginfo.autonext)
}

// optional int32 chesttype = 9;
inline bool lhd_tableconfiginfo::has_chesttype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void lhd_tableconfiginfo::set_has_chesttype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void lhd_tableconfiginfo::clear_has_chesttype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void lhd_tableconfiginfo::clear_chesttype() {
  chesttype_ = 0;
  clear_has_chesttype();
}
inline ::google::protobuf::int32 lhd_tableconfiginfo::chesttype() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_tableconfiginfo.chesttype)
  return chesttype_;
}
inline void lhd_tableconfiginfo::set_chesttype(::google::protobuf::int32 value) {
  set_has_chesttype();
  chesttype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_tableconfiginfo.chesttype)
}

// optional int32 banktype = 10;
inline bool lhd_tableconfiginfo::has_banktype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void lhd_tableconfiginfo::set_has_banktype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void lhd_tableconfiginfo::clear_has_banktype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void lhd_tableconfiginfo::clear_banktype() {
  banktype_ = 0;
  clear_has_banktype();
}
inline ::google::protobuf::int32 lhd_tableconfiginfo::banktype() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_tableconfiginfo.banktype)
  return banktype_;
}
inline void lhd_tableconfiginfo::set_banktype(::google::protobuf::int32 value) {
  set_has_banktype();
  banktype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_tableconfiginfo.banktype)
}

// -------------------------------------------------------------------

// lhd_tableinfo

// optional int32 tableid = 1;
inline bool lhd_tableinfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void lhd_tableinfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void lhd_tableinfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void lhd_tableinfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 lhd_tableinfo::tableid() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_tableinfo.tableid)
  return tableid_;
}
inline void lhd_tableinfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_tableinfo.tableid)
}

// optional int32 frameid = 2;
inline bool lhd_tableinfo::has_frameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void lhd_tableinfo::set_has_frameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void lhd_tableinfo::clear_has_frameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void lhd_tableinfo::clear_frameid() {
  frameid_ = 0;
  clear_has_frameid();
}
inline ::google::protobuf::int32 lhd_tableinfo::frameid() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_tableinfo.frameid)
  return frameid_;
}
inline void lhd_tableinfo::set_frameid(::google::protobuf::int32 value) {
  set_has_frameid();
  frameid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_tableinfo.frameid)
}

// optional int32 state = 3;
inline bool lhd_tableinfo::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void lhd_tableinfo::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void lhd_tableinfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void lhd_tableinfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 lhd_tableinfo::state() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_tableinfo.state)
  return state_;
}
inline void lhd_tableinfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_tableinfo.state)
}

// optional int32 timemark = 4;
inline bool lhd_tableinfo::has_timemark() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void lhd_tableinfo::set_has_timemark() {
  _has_bits_[0] |= 0x00000010u;
}
inline void lhd_tableinfo::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void lhd_tableinfo::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 lhd_tableinfo::timemark() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_tableinfo.timemark)
  return timemark_;
}
inline void lhd_tableinfo::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_tableinfo.timemark)
}

// optional .NFMsg.lhd_tableconfiginfo configinfo = 5;
inline bool lhd_tableinfo::has_configinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void lhd_tableinfo::set_has_configinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void lhd_tableinfo::clear_has_configinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void lhd_tableinfo::clear_configinfo() {
  if (configinfo_ != NULL) configinfo_->Clear();
  clear_has_configinfo();
}
inline const ::NFMsg::lhd_tableconfiginfo& lhd_tableinfo::_internal_configinfo() const {
  return *configinfo_;
}
inline const ::NFMsg::lhd_tableconfiginfo& lhd_tableinfo::configinfo() const {
  const ::NFMsg::lhd_tableconfiginfo* p = configinfo_;
  // @@protoc_insertion_point(field_get:NFMsg.lhd_tableinfo.configinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::lhd_tableconfiginfo*>(
      &::NFMsg::_lhd_tableconfiginfo_default_instance_);
}
inline ::NFMsg::lhd_tableconfiginfo* lhd_tableinfo::release_configinfo() {
  // @@protoc_insertion_point(field_release:NFMsg.lhd_tableinfo.configinfo)
  clear_has_configinfo();
  ::NFMsg::lhd_tableconfiginfo* temp = configinfo_;
  configinfo_ = NULL;
  return temp;
}
inline ::NFMsg::lhd_tableconfiginfo* lhd_tableinfo::mutable_configinfo() {
  set_has_configinfo();
  if (configinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::lhd_tableconfiginfo>(GetArenaNoVirtual());
    configinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.lhd_tableinfo.configinfo)
  return configinfo_;
}
inline void lhd_tableinfo::set_allocated_configinfo(::NFMsg::lhd_tableconfiginfo* configinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete configinfo_;
  }
  if (configinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      configinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, configinfo, submessage_arena);
    }
    set_has_configinfo();
  } else {
    clear_has_configinfo();
  }
  configinfo_ = configinfo;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.lhd_tableinfo.configinfo)
}

// optional int32 bankerid = 6;
inline bool lhd_tableinfo::has_bankerid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void lhd_tableinfo::set_has_bankerid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void lhd_tableinfo::clear_has_bankerid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void lhd_tableinfo::clear_bankerid() {
  bankerid_ = 0;
  clear_has_bankerid();
}
inline ::google::protobuf::int32 lhd_tableinfo::bankerid() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_tableinfo.bankerid)
  return bankerid_;
}
inline void lhd_tableinfo::set_bankerid(::google::protobuf::int32 value) {
  set_has_bankerid();
  bankerid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_tableinfo.bankerid)
}

// repeated .NFMsg.lhd_userinfo situsers = 7;
inline int lhd_tableinfo::situsers_size() const {
  return situsers_.size();
}
inline void lhd_tableinfo::clear_situsers() {
  situsers_.Clear();
}
inline ::NFMsg::lhd_userinfo* lhd_tableinfo::mutable_situsers(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.lhd_tableinfo.situsers)
  return situsers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_userinfo >*
lhd_tableinfo::mutable_situsers() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.lhd_tableinfo.situsers)
  return &situsers_;
}
inline const ::NFMsg::lhd_userinfo& lhd_tableinfo::situsers(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_tableinfo.situsers)
  return situsers_.Get(index);
}
inline ::NFMsg::lhd_userinfo* lhd_tableinfo::add_situsers() {
  // @@protoc_insertion_point(field_add:NFMsg.lhd_tableinfo.situsers)
  return situsers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_userinfo >&
lhd_tableinfo::situsers() const {
  // @@protoc_insertion_point(field_list:NFMsg.lhd_tableinfo.situsers)
  return situsers_;
}

// repeated .NFMsg.lhd_userinfo standusers = 8;
inline int lhd_tableinfo::standusers_size() const {
  return standusers_.size();
}
inline void lhd_tableinfo::clear_standusers() {
  standusers_.Clear();
}
inline ::NFMsg::lhd_userinfo* lhd_tableinfo::mutable_standusers(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.lhd_tableinfo.standusers)
  return standusers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_userinfo >*
lhd_tableinfo::mutable_standusers() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.lhd_tableinfo.standusers)
  return &standusers_;
}
inline const ::NFMsg::lhd_userinfo& lhd_tableinfo::standusers(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_tableinfo.standusers)
  return standusers_.Get(index);
}
inline ::NFMsg::lhd_userinfo* lhd_tableinfo::add_standusers() {
  // @@protoc_insertion_point(field_add:NFMsg.lhd_tableinfo.standusers)
  return standusers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_userinfo >&
lhd_tableinfo::standusers() const {
  // @@protoc_insertion_point(field_list:NFMsg.lhd_tableinfo.standusers)
  return standusers_;
}

// repeated .NFMsg.lhd_areainfo areainfo = 9;
inline int lhd_tableinfo::areainfo_size() const {
  return areainfo_.size();
}
inline void lhd_tableinfo::clear_areainfo() {
  areainfo_.Clear();
}
inline ::NFMsg::lhd_areainfo* lhd_tableinfo::mutable_areainfo(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.lhd_tableinfo.areainfo)
  return areainfo_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_areainfo >*
lhd_tableinfo::mutable_areainfo() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.lhd_tableinfo.areainfo)
  return &areainfo_;
}
inline const ::NFMsg::lhd_areainfo& lhd_tableinfo::areainfo(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_tableinfo.areainfo)
  return areainfo_.Get(index);
}
inline ::NFMsg::lhd_areainfo* lhd_tableinfo::add_areainfo() {
  // @@protoc_insertion_point(field_add:NFMsg.lhd_tableinfo.areainfo)
  return areainfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_areainfo >&
lhd_tableinfo::areainfo() const {
  // @@protoc_insertion_point(field_list:NFMsg.lhd_tableinfo.areainfo)
  return areainfo_;
}

// optional int32 usernum = 10;
inline bool lhd_tableinfo::has_usernum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void lhd_tableinfo::set_has_usernum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void lhd_tableinfo::clear_has_usernum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void lhd_tableinfo::clear_usernum() {
  usernum_ = 0;
  clear_has_usernum();
}
inline ::google::protobuf::int32 lhd_tableinfo::usernum() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_tableinfo.usernum)
  return usernum_;
}
inline void lhd_tableinfo::set_usernum(::google::protobuf::int32 value) {
  set_has_usernum();
  usernum_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_tableinfo.usernum)
}

// -------------------------------------------------------------------

// lhd_usercountinfo

// optional .NFMsg.playersimpleinfo userinfo = 1;
inline bool lhd_usercountinfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void lhd_usercountinfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void lhd_usercountinfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::NFMsg::playersimpleinfo& lhd_usercountinfo::_internal_userinfo() const {
  return *userinfo_;
}
inline const ::NFMsg::playersimpleinfo& lhd_usercountinfo::userinfo() const {
  const ::NFMsg::playersimpleinfo* p = userinfo_;
  // @@protoc_insertion_point(field_get:NFMsg.lhd_usercountinfo.userinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::playersimpleinfo*>(
      &::NFMsg::_playersimpleinfo_default_instance_);
}
inline ::NFMsg::playersimpleinfo* lhd_usercountinfo::release_userinfo() {
  // @@protoc_insertion_point(field_release:NFMsg.lhd_usercountinfo.userinfo)
  clear_has_userinfo();
  ::NFMsg::playersimpleinfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline ::NFMsg::playersimpleinfo* lhd_usercountinfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::playersimpleinfo>(GetArenaNoVirtual());
    userinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.lhd_usercountinfo.userinfo)
  return userinfo_;
}
inline void lhd_usercountinfo::set_allocated_userinfo(::NFMsg::playersimpleinfo* userinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(userinfo_);
  }
  if (userinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      userinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.lhd_usercountinfo.userinfo)
}

// optional int32 redscore = 2;
inline bool lhd_usercountinfo::has_redscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void lhd_usercountinfo::set_has_redscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void lhd_usercountinfo::clear_has_redscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void lhd_usercountinfo::clear_redscore() {
  redscore_ = 0;
  clear_has_redscore();
}
inline ::google::protobuf::int32 lhd_usercountinfo::redscore() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_usercountinfo.redscore)
  return redscore_;
}
inline void lhd_usercountinfo::set_redscore(::google::protobuf::int32 value) {
  set_has_redscore();
  redscore_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_usercountinfo.redscore)
}

// optional int32 blackscore = 3;
inline bool lhd_usercountinfo::has_blackscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void lhd_usercountinfo::set_has_blackscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void lhd_usercountinfo::clear_has_blackscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void lhd_usercountinfo::clear_blackscore() {
  blackscore_ = 0;
  clear_has_blackscore();
}
inline ::google::protobuf::int32 lhd_usercountinfo::blackscore() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_usercountinfo.blackscore)
  return blackscore_;
}
inline void lhd_usercountinfo::set_blackscore(::google::protobuf::int32 value) {
  set_has_blackscore();
  blackscore_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_usercountinfo.blackscore)
}

// optional int32 hescore = 4;
inline bool lhd_usercountinfo::has_hescore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void lhd_usercountinfo::set_has_hescore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void lhd_usercountinfo::clear_has_hescore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void lhd_usercountinfo::clear_hescore() {
  hescore_ = 0;
  clear_has_hescore();
}
inline ::google::protobuf::int32 lhd_usercountinfo::hescore() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_usercountinfo.hescore)
  return hescore_;
}
inline void lhd_usercountinfo::set_hescore(::google::protobuf::int32 value) {
  set_has_hescore();
  hescore_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_usercountinfo.hescore)
}

// optional int32 winscore = 5;
inline bool lhd_usercountinfo::has_winscore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void lhd_usercountinfo::set_has_winscore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void lhd_usercountinfo::clear_has_winscore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void lhd_usercountinfo::clear_winscore() {
  winscore_ = 0;
  clear_has_winscore();
}
inline ::google::protobuf::int32 lhd_usercountinfo::winscore() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_usercountinfo.winscore)
  return winscore_;
}
inline void lhd_usercountinfo::set_winscore(::google::protobuf::int32 value) {
  set_has_winscore();
  winscore_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_usercountinfo.winscore)
}

// -------------------------------------------------------------------

// lhd_gamecount

// optional int32 time = 2;
inline bool lhd_gamecount::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void lhd_gamecount::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void lhd_gamecount::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void lhd_gamecount::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 lhd_gamecount::time() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_gamecount.time)
  return time_;
}
inline void lhd_gamecount::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_gamecount.time)
}

// optional int32 area = 3;
inline bool lhd_gamecount::has_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void lhd_gamecount::set_has_area() {
  _has_bits_[0] |= 0x00000002u;
}
inline void lhd_gamecount::clear_has_area() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void lhd_gamecount::clear_area() {
  area_ = 0;
  clear_has_area();
}
inline ::google::protobuf::int32 lhd_gamecount::area() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_gamecount.area)
  return area_;
}
inline void lhd_gamecount::set_area(::google::protobuf::int32 value) {
  set_has_area();
  area_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_gamecount.area)
}

// optional int32 winuser = 4;
inline bool lhd_gamecount::has_winuser() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void lhd_gamecount::set_has_winuser() {
  _has_bits_[0] |= 0x00000004u;
}
inline void lhd_gamecount::clear_has_winuser() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void lhd_gamecount::clear_winuser() {
  winuser_ = 0;
  clear_has_winuser();
}
inline ::google::protobuf::int32 lhd_gamecount::winuser() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_gamecount.winuser)
  return winuser_;
}
inline void lhd_gamecount::set_winuser(::google::protobuf::int32 value) {
  set_has_winuser();
  winuser_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_gamecount.winuser)
}

// optional int32 bankid = 5;
inline bool lhd_gamecount::has_bankid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void lhd_gamecount::set_has_bankid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void lhd_gamecount::clear_has_bankid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void lhd_gamecount::clear_bankid() {
  bankid_ = 0;
  clear_has_bankid();
}
inline ::google::protobuf::int32 lhd_gamecount::bankid() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_gamecount.bankid)
  return bankid_;
}
inline void lhd_gamecount::set_bankid(::google::protobuf::int32 value) {
  set_has_bankid();
  bankid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_gamecount.bankid)
}

// optional int32 timemark = 6;
inline bool lhd_gamecount::has_timemark() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void lhd_gamecount::set_has_timemark() {
  _has_bits_[0] |= 0x00000010u;
}
inline void lhd_gamecount::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void lhd_gamecount::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 lhd_gamecount::timemark() const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_gamecount.timemark)
  return timemark_;
}
inline void lhd_gamecount::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.lhd_gamecount.timemark)
}

// repeated .NFMsg.lhd_usercountinfo pourinfo = 7;
inline int lhd_gamecount::pourinfo_size() const {
  return pourinfo_.size();
}
inline void lhd_gamecount::clear_pourinfo() {
  pourinfo_.Clear();
}
inline ::NFMsg::lhd_usercountinfo* lhd_gamecount::mutable_pourinfo(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.lhd_gamecount.pourinfo)
  return pourinfo_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_usercountinfo >*
lhd_gamecount::mutable_pourinfo() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.lhd_gamecount.pourinfo)
  return &pourinfo_;
}
inline const ::NFMsg::lhd_usercountinfo& lhd_gamecount::pourinfo(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.lhd_gamecount.pourinfo)
  return pourinfo_.Get(index);
}
inline ::NFMsg::lhd_usercountinfo* lhd_gamecount::add_pourinfo() {
  // @@protoc_insertion_point(field_add:NFMsg.lhd_gamecount.pourinfo)
  return pourinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::lhd_usercountinfo >&
lhd_gamecount::pourinfo() const {
  // @@protoc_insertion_point(field_list:NFMsg.lhd_gamecount.pourinfo)
  return pourinfo_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NFMsg::lhd_state> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::lhd_state>() {
  return ::NFMsg::lhd_state_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::lhd_area> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::lhd_area>() {
  return ::NFMsg::lhd_area_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_st_5flhd_2eproto
